
sneak100_f405_software_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b670  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e4  0800b800  0800b800  0001b800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8e4  0800c8e4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8e4  0800c8e4  0001c8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8ec  0800c8ec  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200001e8  0800cadc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  0800cadc  00020a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1fe  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a93  00000000  00000000  0003b416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  000401e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fec  00000000  00000000  000413a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cad0  00000000  00000000  0006538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21fa  00000000  00000000  00081e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000640c  00000000  00000000  001540ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7e8 	.word	0x0800b7e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b7e8 	.word	0x0800b7e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <MX_ADC1_Init+0x124>)
 8001000:	4a44      	ldr	r2, [pc, #272]	; (8001114 <MX_ADC1_Init+0x128>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <MX_ADC1_Init+0x124>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <MX_ADC1_Init+0x124>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <MX_ADC1_Init+0x124>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001018:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <MX_ADC1_Init+0x124>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <MX_ADC1_Init+0x124>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <MX_ADC1_Init+0x124>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <MX_ADC1_Init+0x124>)
 800102e:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <MX_ADC1_Init+0x12c>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_ADC1_Init+0x124>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <MX_ADC1_Init+0x124>)
 800103a:	2206      	movs	r2, #6
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <MX_ADC1_Init+0x124>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_ADC1_Init+0x124>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104c:	4830      	ldr	r0, [pc, #192]	; (8001110 <MX_ADC1_Init+0x124>)
 800104e:	f001 fa4d 	bl	80024ec <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fb08 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800105c:	230a      	movs	r3, #10
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001064:	2307      	movs	r3, #7
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4828      	ldr	r0, [pc, #160]	; (8001110 <MX_ADC1_Init+0x124>)
 800106e:	f001 fbaf 	bl	80027d0 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 faf8 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800107c:	230b      	movs	r3, #11
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <MX_ADC1_Init+0x124>)
 800108a:	f001 fba1 	bl	80027d0 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001094:	f000 faea 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001098:	230c      	movs	r3, #12
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800109c:	2303      	movs	r3, #3
 800109e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	481a      	ldr	r0, [pc, #104]	; (8001110 <MX_ADC1_Init+0x124>)
 80010a6:	f001 fb93 	bl	80027d0 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010b0:	f000 fadc 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010b4:	230d      	movs	r3, #13
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_ADC1_Init+0x124>)
 80010c2:	f001 fb85 	bl	80027d0 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010cc:	f000 face 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010d0:	230e      	movs	r3, #14
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d4:	2305      	movs	r3, #5
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_ADC1_Init+0x124>)
 80010de:	f001 fb77 	bl	80027d0 <HAL_ADC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010e8:	f000 fac0 	bl	800166c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010ec:	2310      	movs	r3, #16
 80010ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010f0:	2306      	movs	r3, #6
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_ADC1_Init+0x124>)
 80010fa:	f001 fb69 	bl	80027d0 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001104:	f000 fab2 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000062c 	.word	0x2000062c
 8001114:	40012000 	.word	0x40012000
 8001118:	0f000001 	.word	0x0f000001

0800111c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <HAL_ADC_MspInit+0xdc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d157      	bne.n	80011ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_ADC_MspInit+0xe0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = LINE_RR_Pin|LINE_RM_Pin|LINE_LM_Pin|LINE_LL_Pin
 8001176:	231f      	movs	r3, #31
 8001178:	617b      	str	r3, [r7, #20]
                          |BATTERY_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <HAL_ADC_MspInit+0xe4>)
 800118a:	f002 fa13 	bl	80035b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_ADC_MspInit+0xec>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011d4:	f001 fe7e 	bl	8002ed4 <HAL_DMA_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011de:	f000 fa45 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_ADC_MspInit+0xe8>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020800 	.word	0x40020800
 8001204:	20000674 	.word	0x20000674
 8001208:	40026410 	.word	0x40026410

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_DMA_Init+0x3c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <MX_DMA_Init+0x3c>)
 800121c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_DMA_Init+0x3c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2038      	movs	r0, #56	; 0x38
 8001234:	f001 fe24 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001238:	2038      	movs	r0, #56	; 0x38
 800123a:	f001 fe3d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <MX_GPIO_Init+0x144>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a49      	ldr	r2, [pc, #292]	; (8001390 <MX_GPIO_Init+0x144>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <MX_GPIO_Init+0x144>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_GPIO_Init+0x144>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <MX_GPIO_Init+0x144>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_GPIO_Init+0x144>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <MX_GPIO_Init+0x144>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <MX_GPIO_Init+0x144>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <MX_GPIO_Init+0x144>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_GPIO_Init+0x144>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <MX_GPIO_Init+0x144>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_GPIO_Init+0x144>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_PWR_GPIO_Port, BLUETOOTH_PWR_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	482f      	ldr	r0, [pc, #188]	; (8001394 <MX_GPIO_Init+0x148>)
 80012d8:	f002 fb08 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_YELLOW_Pin|USER_LED_GREEN_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <MX_GPIO_Init+0x14c>)
 80012e4:	f002 fb02 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RECEIVER_OUT_Pin;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RECEIVER_OUT_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <MX_GPIO_Init+0x150>)
 8001300:	f002 f958 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PROXIMITY_RR_Pin|PROXIMITY_FR_Pin|USER_BUTTON_L_Pin|USER_BUTTON_C_Pin
 8001304:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8001308:	617b      	str	r3, [r7, #20]
                          |USER_BUTTON_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_GPIO_Init+0x150>)
 800131a:	f002 f94b 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLUETOOTH_ST_Pin|BLUETOOTH_EN_Pin;
 800131e:	2390      	movs	r3, #144	; 0x90
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <MX_GPIO_Init+0x148>)
 8001332:	f002 f93f 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUETOOTH_PWR_Pin;
 8001336:	2340      	movs	r3, #64	; 0x40
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800133a:	2311      	movs	r3, #17
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUETOOTH_PWR_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_GPIO_Init+0x148>)
 800134e:	f002 f931 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROXIMITY_FL_Pin|PROXIMITY_LL_Pin;
 8001352:	2303      	movs	r3, #3
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_GPIO_Init+0x14c>)
 8001366:	f002 f925 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USER_LED_YELLOW_Pin|USER_LED_GREEN_Pin;
 800136a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_GPIO_Init+0x14c>)
 8001384:	f002 f916 	bl	80035b4 <HAL_GPIO_Init>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800

080013a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <MX_I2C1_Init+0x54>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_I2C1_Init+0x58>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_I2C1_Init+0x50>)
 80013de:	f002 fab9 	bl	8003954 <HAL_I2C_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e8:	f000 f940 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200006d4 	.word	0x200006d4
 80013f4:	40005400 	.word	0x40005400
 80013f8:	00061a80 	.word	0x00061a80

080013fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_I2C_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12c      	bne.n	8001478 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_I2C_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_I2C_MspInit+0x88>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_I2C_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144c:	2304      	movs	r3, #4
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <HAL_I2C_MspInit+0x8c>)
 8001458:	f002 f8ac 	bl	80035b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_I2C_MspInit+0x88>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_I2C_MspInit+0x88>)
 8001466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_I2C_MspInit+0x88>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40005400 	.word	0x40005400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020400 	.word	0x40020400

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f000 ffc6 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f86e 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f7ff fed8 	bl	800124c <MX_GPIO_Init>
  MX_I2C1_Init();
 800149c:	f7ff ff80 	bl	80013a0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014a0:	f000 fb2c 	bl	8001afc <MX_TIM2_Init>
  MX_TIM3_Init();
 80014a4:	f000 fb7e 	bl	8001ba4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014a8:	f000 fbd0 	bl	8001c4c <MX_TIM4_Init>
  MX_TIM8_Init();
 80014ac:	f000 fc76 	bl	8001d9c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80014b0:	f000 feba 	bl	8002228 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014b4:	f000 fa7a 	bl	80019ac <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80014b8:	f000 fee0 	bl	800227c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 80014bc:	f000 fc1a 	bl	8001cf4 <MX_TIM5_Init>
  MX_DMA_Init();
 80014c0:	f7ff fea4 	bl	800120c <MX_DMA_Init>
  MX_ADC1_Init();
 80014c4:	f7ff fd92 	bl	8000fec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SNEAK100_ADC_Init();
 80014c8:	f005 f89c 	bl	8006604 <SNEAK100_ADC_Init>
  SNEAK100_Display_Init();
 80014cc:	f005 f96a 	bl	80067a4 <SNEAK100_Display_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {

	  HAL_GPIO_TogglePin(USER_LED_GREEN_GPIO_Port, USER_LED_GREEN_Pin);
 80014d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d4:	4825      	ldr	r0, [pc, #148]	; (800156c <main+0xe0>)
 80014d6:	f002 fa22 	bl	800391e <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80014da:	20fa      	movs	r0, #250	; 0xfa
 80014dc:	f000 ffe2 	bl	80024a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(USER_LED_YELLOW_GPIO_Port, USER_LED_YELLOW_Pin);
 80014e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <main+0xe0>)
 80014e6:	f002 fa1a 	bl	800391e <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80014ea:	20fa      	movs	r0, #250	; 0xfa
 80014ec:	f000 ffda 	bl	80024a4 <HAL_Delay>

	  gui.battery_voltage = SNEAK100_ADC_GetSupplyVoltage();
 80014f0:	f005 f8da 	bl	80066a8 <SNEAK100_ADC_GetSupplyVoltage>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <main+0xe4>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
	  gui.temperature = SNEAK100_ADC_GetTemperature();
 80014fe:	f005 f8ef 	bl	80066e0 <SNEAK100_ADC_GetTemperature>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <main+0xe4>)
 8001508:	edc3 7a01 	vstr	s15, [r3, #4]
	  gui.line[0] = 0;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <main+0xe4>)
 800150e:	2200      	movs	r2, #0
 8001510:	811a      	strh	r2, [r3, #8]
	  gui.line[1] = 0;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <main+0xe4>)
 8001514:	2200      	movs	r2, #0
 8001516:	815a      	strh	r2, [r3, #10]
	  gui.line[2] = 0;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <main+0xe4>)
 800151a:	2200      	movs	r2, #0
 800151c:	819a      	strh	r2, [r3, #12]
	  gui.line[3] = 0;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <main+0xe4>)
 8001520:	2200      	movs	r2, #0
 8001522:	81da      	strh	r2, [r3, #14]
	  gui.position[0] = 0;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <main+0xe4>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
	  gui.position[1] = 0;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <main+0xe4>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
	  gui.position[2] = 0;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <main+0xe4>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
	  gui.position[3] = 0;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <main+0xe4>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
	  gui.velocity[0] = 0;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <main+0xe4>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
	  gui.velocity[1] = 0;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <main+0xe4>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
	  gui.velocity[2] = 0;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <main+0xe4>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
	  gui.velocity[3] = 0;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <main+0xe4>)
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c

	  SNEAK100_Display_Render();
 8001564:	f005 f92a 	bl	80067bc <SNEAK100_Display_Render>
	  HAL_GPIO_TogglePin(USER_LED_GREEN_GPIO_Port, USER_LED_GREEN_Pin);
 8001568:	e7b2      	b.n	80014d0 <main+0x44>
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400
 8001570:	200009d0 	.word	0x200009d0

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fd36 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <SystemClock_Config+0xcc>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <SystemClock_Config+0xd0>)
 80015be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <SystemClock_Config+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015e8:	23a8      	movs	r3, #168	; 0xa8
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 ff35 	bl	8004468 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001604:	f000 f832 	bl	800166c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2105      	movs	r1, #5
 8001626:	4618      	mov	r0, r3
 8001628:	f003 f996 	bl	8004958 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001632:	f000 f81b 	bl	800166c <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	; 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165a:	f000 ff03 	bl	8002464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	2036      	movs	r0, #54	; 0x36
 80016de:	f001 fbcf 	bl	8002e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016e2:	2036      	movs	r0, #54	; 0x36
 80016e4:	f001 fbe8 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_InitTick+0xa4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a1e      	ldr	r2, [pc, #120]	; (800176c <HAL_InitTick+0xa4>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_InitTick+0xa4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001704:	f107 0210 	add.w	r2, r7, #16
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fb1e 	bl	8004d50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001714:	f003 faf4 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8001718:	4603      	mov	r3, r0
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_InitTick+0xa8>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_InitTick+0xac>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_InitTick+0xb0>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_InitTick+0xac>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_InitTick+0xac>)
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_InitTick+0xac>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_InitTick+0xac>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <HAL_InitTick+0xac>)
 800174e:	f003 fb31 	bl	8004db4 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <HAL_InitTick+0xac>)
 800175a:	f003 fb85 	bl	8004e68 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	431bde83 	.word	0x431bde83
 8001774:	20000728 	.word	0x20000728
 8001778:	40001000 	.word	0x40001000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM6_DAC_IRQHandler+0x10>)
 80017da:	f003 fcaa 	bl	8005132 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000728 	.word	0x20000728

080017e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA2_Stream0_IRQHandler+0x10>)
 80017ee:	f001 fc77 	bl	80030e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000674 	.word	0x20000674

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_kill>:

int _kill(int pid, int sig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001816:	f005 fb9b 	bl	8006f50 <__errno>
 800181a:	4603      	mov	r3, r0
 800181c:	2216      	movs	r2, #22
 800181e:	601a      	str	r2, [r3, #0]
	return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_exit>:

void _exit (int status)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffe7 	bl	800180c <_kill>
	while (1) {}		/* Make sure we hang here */
 800183e:	e7fe      	b.n	800183e <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001852:	f005 fb3d 	bl	8006ed0 <__io_getchar>
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
	}

return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f005 fb07 	bl	8006ea8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
	}
	return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018da:	605a      	str	r2, [r3, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f005 fb00 	bl	8006f50 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20020000 	.word	0x20020000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000204 	.word	0x20000204
 8001984:	20000a10 	.word	0x20000a10

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b092      	sub	sp, #72	; 0x48
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2220      	movs	r2, #32
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f005 fb0c 	bl	8006ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <MX_TIM1_Init+0x14c>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e2:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019ee:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fc:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <MX_TIM1_Init+0x148>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a08:	483a      	ldr	r0, [pc, #232]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a0a:	f003 fa9d 	bl	8004f48 <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a14:	f7ff fe2a 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a24:	4619      	mov	r1, r3
 8001a26:	4833      	ldr	r0, [pc, #204]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a28:	f003 ffc6 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a32:	f7ff fe1b 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4826      	ldr	r0, [pc, #152]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a5c:	f003 fc72 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a66:	f7ff fe01 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4820      	ldr	r0, [pc, #128]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a74:	f003 fc66 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001a7e:	f7ff fdf5 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	2208      	movs	r2, #8
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481a      	ldr	r0, [pc, #104]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001a8c:	f003 fc5a 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001a96:	f7ff fde9 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4814      	ldr	r0, [pc, #80]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001aa4:	f003 fc4e 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001aae:	f7ff fddd 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001ad6:	f003 ffeb 	bl	8005ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001ae0:	f7ff fdc4 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MX_TIM1_Init+0x148>)
 8001ae6:	f000 fb3b 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001aea:	bf00      	nop
 8001aec:	3748      	adds	r7, #72	; 0x48
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000890 	.word	0x20000890
 8001af8:	40010000 	.word	0x40010000

08001afc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2224      	movs	r2, #36	; 0x24
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 fa72 	bl	8006ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b6c:	f003 fa3b 	bl	8004fe6 <HAL_TIM_Encoder_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b76:	f7ff fd79 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_TIM2_Init+0xa4>)
 8001b88:	f003 ff16 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b92:	f7ff fd6b 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3730      	adds	r7, #48	; 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200008d8 	.word	0x200008d8

08001ba4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 fa1e 	bl	8006ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <MX_TIM3_Init+0xa4>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001c12:	f003 f9e8 	bl	8004fe6 <HAL_TIM_Encoder_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c1c:	f7ff fd26 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_TIM3_Init+0xa0>)
 8001c2e:	f003 fec3 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c38:	f7ff fd18 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000848 	.word	0x20000848
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 f9ca 	bl	8006ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <MX_TIM4_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001cba:	f003 f994 	bl	8004fe6 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fcd2 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM4_Init+0xa0>)
 8001cd6:	f003 fe6f 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f7ff fcc4 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200007b8 	.word	0x200007b8
 8001cf0:	40000800 	.word	0x40000800

08001cf4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 f976 	bl	8006ff4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <MX_TIM5_Init+0xa4>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d62:	f003 f940 	bl	8004fe6 <HAL_TIM_Encoder_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f7ff fc7e 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM5_Init+0xa0>)
 8001d7e:	f003 fe1b 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001d88:	f7ff fc70 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000800 	.word	0x20000800
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b092      	sub	sp, #72	; 0x48
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 f914 	bl	8006ff4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001dce:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <MX_TIM8_Init+0x14c>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001df8:	483a      	ldr	r0, [pc, #232]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001dfa:	f003 f8a5 	bl	8004f48 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001e04:	f7ff fc32 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e14:	4619      	mov	r1, r3
 8001e16:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001e18:	f003 fdce 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001e22:	f7ff fc23 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	; 0x60
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4826      	ldr	r0, [pc, #152]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001e4c:	f003 fa7a 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001e56:	f7ff fc09 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001e64:	f003 fa6e 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001e6e:	f7ff fbfd 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	2208      	movs	r2, #8
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001e7c:	f003 fa62 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001e86:	f7ff fbf1 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	220c      	movs	r2, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001e94:	f003 fa56 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001e9e:	f7ff fbe5 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001ec6:	f003 fdf3 	bl	8005ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8001ed0:	f7ff fbcc 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <MX_TIM8_Init+0x148>)
 8001ed6:	f000 f943 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001eda:	bf00      	nop
 8001edc:	3748      	adds	r7, #72	; 0x48
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000770 	.word	0x20000770
 8001ee8:	40010400 	.word	0x40010400

08001eec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_TIM_PWM_MspInit+0x64>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f1a:	e012      	b.n	8001f42 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_TIM_PWM_MspInit+0x6c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10d      	bne.n	8001f42 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_TIM_PWM_MspInit+0x68>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b090      	sub	sp, #64	; 0x40
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d14b      	bne.n	8002016 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	4b71      	ldr	r3, [pc, #452]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a70      	ldr	r2, [pc, #448]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b6e      	ldr	r3, [pc, #440]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a62      	ldr	r2, [pc, #392]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_LF_A_Pin;
 8001fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR_LF_A_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	4857      	ldr	r0, [pc, #348]	; (800214c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001ff0:	f001 fae0 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_B_Pin;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002004:	2301      	movs	r3, #1
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MOTOR_LF_B_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200c:	4619      	mov	r1, r3
 800200e:	4850      	ldr	r0, [pc, #320]	; (8002150 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002010:	f001 fad0 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002014:	e094      	b.n	8002140 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d12c      	bne.n	800207a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a47      	ldr	r2, [pc, #284]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MOTOR_LB_A_Pin|MOTOR_LB_B_Pin;
 8002058:	2330      	movs	r3, #48	; 0x30
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002068:	2302      	movs	r3, #2
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002070:	4619      	mov	r1, r3
 8002072:	4837      	ldr	r0, [pc, #220]	; (8002150 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002074:	f001 fa9e 	bl	80035b4 <HAL_GPIO_Init>
}
 8002078:	e062      	b.n	8002140 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a36      	ldr	r2, [pc, #216]	; (8002158 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12c      	bne.n	80020de <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6313      	str	r3, [r2, #48]	; 0x30
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RF_A_Pin|MOTOR_RF_B_Pin;
 80020bc:	23c0      	movs	r3, #192	; 0xc0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020cc:	2302      	movs	r3, #2
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d4:	4619      	mov	r1, r3
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80020d8:	f001 fa6c 	bl	80035b4 <HAL_GPIO_Init>
}
 80020dc:	e030      	b.n	8002140 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_TIM_Encoder_MspInit+0x200>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d12b      	bne.n	8002140 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_RB_A_Pin|MOTOR_RB_B_Pin;
 8002120:	2303      	movs	r3, #3
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002130:	2302      	movs	r3, #2
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800213c:	f001 fa3a 	bl	80035b4 <HAL_GPIO_Init>
}
 8002140:	bf00      	nop
 8002142:	3740      	adds	r7, #64	; 0x40
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00

08002160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11f      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_LB_IN1_Pin|MOTOR_LB_IN2_Pin|MOTOR_LF_IN1_Pin|MOTOR_LF_IN2_Pin;
 800219e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4818      	ldr	r0, [pc, #96]	; (800221c <HAL_TIM_MspPostInit+0xbc>)
 80021bc:	f001 f9fa 	bl	80035b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021c0:	e023      	b.n	800220a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_TIM_MspPostInit+0xc0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d11e      	bne.n	800220a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_RB_IN1_Pin|MOTOR_RB_IN2_Pin|MOTOR_RF_IN1_Pin|MOTOR_RF_IN2_Pin;
 80021e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021fa:	2303      	movs	r3, #3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <HAL_TIM_MspPostInit+0xc4>)
 8002206:	f001 f9d5 	bl	80035b4 <HAL_GPIO_Init>
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000
 8002220:	40010400 	.word	0x40010400
 8002224:	40020800 	.word	0x40020800

08002228 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_USART2_UART_Init+0x50>)
 8002230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_USART2_UART_Init+0x4c>)
 8002260:	f003 fc8c 	bl	8005b7c <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800226a:	f7ff f9ff 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000964 	.word	0x20000964
 8002278:	40004400 	.word	0x40004400

0800227c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <MX_USART3_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART3_UART_Init+0x4c>)
 80022b4:	f003 fc62 	bl	8005b7c <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff f9d5 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000920 	.word	0x20000920
 80022cc:	40004800 	.word	0x40004800

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <HAL_UART_MspInit+0xe8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12c      	bne.n	800234c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_UART_MspInit+0xec>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a30      	ldr	r2, [pc, #192]	; (80023bc <HAL_UART_MspInit+0xec>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800232a:	230c      	movs	r3, #12
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800233a:	2307      	movs	r3, #7
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	481e      	ldr	r0, [pc, #120]	; (80023c0 <HAL_UART_MspInit+0xf0>)
 8002346:	f001 f935 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800234a:	e031      	b.n	80023b0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12c      	bne.n	80023b0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_UART_MspInit+0xec>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_UART_MspInit+0xec>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800238e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a0:	2307      	movs	r3, #7
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <HAL_UART_MspInit+0xf8>)
 80023ac:	f001 f902 	bl	80035b4 <HAL_GPIO_Init>
}
 80023b0:	bf00      	nop
 80023b2:	3730      	adds	r7, #48	; 0x30
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40004400 	.word	0x40004400
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40004800 	.word	0x40004800
 80023c8:	40020400 	.word	0x40020400

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f6:	f7ff fac7 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f004 fdc1 	bl	8006f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff f845 	bl	800148c <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002410:	0800c8f4 	.word	0x0800c8f4
  ldr r2, =_sbss
 8002414:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002418:	20000a10 	.word	0x20000a10

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 fd0e 	bl	8002e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff f93a 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff f910 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008
 8002488:	200009a8 	.word	0x200009a8

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200009a8 	.word	0x200009a8

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000008 	.word	0x20000008

080024ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e033      	b.n	800256a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fe06 	bl	800111c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002532:	f023 0302 	bic.w	r3, r3, #2
 8002536:	f043 0202 	orr.w	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa68 	bl	8002a14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
 800255a:	e001      	b.n	8002560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Start_DMA+0x1e>
 800258e:	2302      	movs	r3, #2
 8002590:	e0e9      	b.n	8002766 <HAL_ADC_Start_DMA+0x1f2>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d018      	beq.n	80025da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_ADC_Start_DMA+0x1fc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6d      	ldr	r2, [pc, #436]	; (8002774 <HAL_ADC_Start_DMA+0x200>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9a      	lsrs	r2, r3, #18
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d107      	bne.n	80025fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 80a1 	bne.w	800274c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	d106      	bne.n	8002658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f023 0206 	bic.w	r2, r3, #6
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
 8002656:	e002      	b.n	800265e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_ADC_Start_DMA+0x204>)
 8002668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	4a43      	ldr	r2, [pc, #268]	; (800277c <HAL_ADC_Start_DMA+0x208>)
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	4a42      	ldr	r2, [pc, #264]	; (8002780 <HAL_ADC_Start_DMA+0x20c>)
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	4a41      	ldr	r2, [pc, #260]	; (8002784 <HAL_ADC_Start_DMA+0x210>)
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800268a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800269a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	334c      	adds	r3, #76	; 0x4c
 80026b6:	4619      	mov	r1, r3
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f000 fcb8 	bl	8003030 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d12a      	bne.n	8002722 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <HAL_ADC_Start_DMA+0x214>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d015      	beq.n	8002702 <HAL_ADC_Start_DMA+0x18e>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2c      	ldr	r2, [pc, #176]	; (800278c <HAL_ADC_Start_DMA+0x218>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d105      	bne.n	80026ec <HAL_ADC_Start_DMA+0x178>
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_ADC_Start_DMA+0x204>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_ADC_Start_DMA+0x21c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d136      	bne.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_ADC_Start_DMA+0x204>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d130      	bne.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d129      	bne.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e020      	b.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_ADC_Start_DMA+0x214>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d11b      	bne.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d114      	bne.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	e00b      	b.n	8002764 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0210 	orr.w	r2, r3, #16
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83
 8002778:	40012300 	.word	0x40012300
 800277c:	08002c0d 	.word	0x08002c0d
 8002780:	08002cc7 	.word	0x08002cc7
 8002784:	08002ce3 	.word	0x08002ce3
 8002788:	40012000 	.word	0x40012000
 800278c:	40012100 	.word	0x40012100
 8002790:	40012200 	.word	0x40012200

08002794 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e105      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x228>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d925      	bls.n	8002848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3b1e      	subs	r3, #30
 8002812:	2207      	movs	r2, #7
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	4603      	mov	r3, r0
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4403      	add	r3, r0
 800283a:	3b1e      	subs	r3, #30
 800283c:	409a      	lsls	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e022      	b.n	800288e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	2207      	movs	r2, #7
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	4603      	mov	r3, r0
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b05      	subs	r3, #5
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b05      	subs	r3, #5
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
 80028de:	e04c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d824      	bhi.n	8002932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b23      	subs	r3, #35	; 0x23
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b23      	subs	r3, #35	; 0x23
 8002924:	fa00 f203 	lsl.w	r2, r0, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
 8002930:	e023      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	; 0x41
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b41      	subs	r3, #65	; 0x41
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_ADC_ConfigChannel+0x234>)
 800297c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <HAL_ADC_ConfigChannel+0x238>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d109      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1cc>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d105      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_ADC_ConfigChannel+0x238>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d123      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x21e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d003      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x1e6>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b11      	cmp	r3, #17
 80029b4:	d11b      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d111      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_ADC_ConfigChannel+0x23c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_ADC_ConfigChannel+0x240>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9a      	lsrs	r2, r3, #18
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f9      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012300 	.word	0x40012300
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <ADC_Init+0x1f0>)
 8002a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <ADC_Init+0x1f4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e00f      	b.n	8002b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0202 	bic.w	r2, r2, #2
 8002b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	035a      	lsls	r2, r3, #13
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e007      	b.n	8002b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	051a      	lsls	r2, r3, #20
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bca:	025a      	lsls	r2, r3, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	029a      	lsls	r2, r3, #10
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	0f000001 	.word	0x0f000001

08002c0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13c      	bne.n	8002ca0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12b      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d127      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0220 	bic.w	r2, r2, #32
 8002c72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fd7b 	bl	8002794 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c9e:	e00e      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fd85 	bl	80027bc <HAL_ADC_ErrorCallback>
}
 8002cb2:	e004      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fd67 	bl	80027a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fd5a 	bl	80027bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0b      	blt.n	8002d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <__NVIC_EnableIRQ+0x38>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	; (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff4c 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e92:	f7ff ff61 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f7ff ffb1 	bl	8002e04 <NVIC_EncodePriority>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff80 	bl	8002db0 <__NVIC_SetPriority>
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff54 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff fad4 	bl	800248c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e099      	b.n	8003024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f10:	e00f      	b.n	8002f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f12:	f7ff fabb 	bl	800248c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d908      	bls.n	8002f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e078      	b.n	8003024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e8      	bne.n	8002f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_DMA_Init+0x158>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4313      	orrs	r3, r2
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d117      	bne.n	8002ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa6f 	bl	80034bc <DMA_CheckFifoParam>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e016      	b.n	8003024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa26 	bl	8003450 <DMA_CalcBaseAndBitshift>
 8003004:	4603      	mov	r3, r0
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	223f      	movs	r2, #63	; 0x3f
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	f010803f 	.word	0xf010803f

08003030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_DMA_Start_IT+0x26>
 8003052:	2302      	movs	r3, #2
 8003054:	e040      	b.n	80030d8 <HAL_DMA_Start_IT+0xa8>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d12f      	bne.n	80030ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f9b8 	bl	80033f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0216 	orr.w	r2, r2, #22
 800309e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0208 	orr.w	r2, r2, #8
 80030b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e005      	b.n	80030d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030ec:	4b92      	ldr	r3, [pc, #584]	; (8003338 <HAL_DMA_IRQHandler+0x258>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a92      	ldr	r2, [pc, #584]	; (800333c <HAL_DMA_IRQHandler+0x25c>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2208      	movs	r2, #8
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01a      	beq.n	800314c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	2208      	movs	r2, #8
 800313a:	409a      	lsls	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	2201      	movs	r2, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	2204      	movs	r2, #4
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d012      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2204      	movs	r2, #4
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	2210      	movs	r2, #16
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d043      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d03c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2210      	movs	r2, #16
 80031dc:	409a      	lsls	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d024      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
 800320e:	e01f      	b.n	8003250 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
 8003220:	e016      	b.n	8003250 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0208 	bic.w	r2, r2, #8
 800323e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2220      	movs	r2, #32
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 808e 	beq.w	800337e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8086 	beq.w	800337e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	2220      	movs	r2, #32
 8003278:	409a      	lsls	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b05      	cmp	r3, #5
 8003288:	d136      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0216 	bic.w	r2, r2, #22
 8003298:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_DMA_IRQHandler+0x1da>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0208 	bic.w	r2, r2, #8
 80032c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d07d      	beq.n	80033ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
        }
        return;
 80032f6:	e078      	b.n	80033ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01c      	beq.n	8003340 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	2b00      	cmp	r3, #0
 800331a:	d030      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e02b      	b.n	800337e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d027      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e022      	b.n	800337e <HAL_DMA_IRQHandler+0x29e>
 8003338:	20000000 	.word	0x20000000
 800333c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0210 	bic.w	r2, r2, #16
 800335c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	2b00      	cmp	r3, #0
 8003384:	d032      	beq.n	80033ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d307      	bcc.n	80033c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f2      	bne.n	80033aa <HAL_DMA_IRQHandler+0x2ca>
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033c6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
 80033e8:	e000      	b.n	80033ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80033ea:	bf00      	nop
    }
  }
}
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003410:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d108      	bne.n	8003434 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003432:	e007      	b.n	8003444 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3b10      	subs	r3, #16
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <DMA_CalcBaseAndBitshift+0x68>)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d909      	bls.n	8003492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	659a      	str	r2, [r3, #88]	; 0x58
 8003490:	e007      	b.n	80034a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	aaaaaaab 	.word	0xaaaaaaab
 80034b8:	0800b8bc 	.word	0x0800b8bc

080034bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11f      	bne.n	8003516 <DMA_CheckFifoParam+0x5a>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d856      	bhi.n	800358a <DMA_CheckFifoParam+0xce>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <DMA_CheckFifoParam+0x28>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003507 	.word	0x08003507
 80034ec:	080034f5 	.word	0x080034f5
 80034f0:	0800358b 	.word	0x0800358b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d046      	beq.n	800358e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003504:	e043      	b.n	800358e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800350e:	d140      	bne.n	8003592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e03d      	b.n	8003592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351e:	d121      	bne.n	8003564 <DMA_CheckFifoParam+0xa8>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d837      	bhi.n	8003596 <DMA_CheckFifoParam+0xda>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <DMA_CheckFifoParam+0x70>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003543 	.word	0x08003543
 8003534:	0800353d 	.word	0x0800353d
 8003538:	08003555 	.word	0x08003555
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e030      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d025      	beq.n	800359a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e022      	b.n	800359a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355c:	d11f      	bne.n	800359e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003562:	e01c      	b.n	800359e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d903      	bls.n	8003572 <DMA_CheckFifoParam+0xb6>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d003      	beq.n	8003578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003570:	e018      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
      break;
 8003576:	e015      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e00b      	b.n	80035a2 <DMA_CheckFifoParam+0xe6>
      break;
 800358a:	bf00      	nop
 800358c:	e00a      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e008      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e006      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003596:	bf00      	nop
 8003598:	e004      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
    }
  } 
  
  return status; 
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop

080035b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e16b      	b.n	80038a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d0:	2201      	movs	r2, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f040 815a 	bne.w	80038a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d005      	beq.n	8003606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003602:	2b02      	cmp	r3, #2
 8003604:	d130      	bne.n	8003668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 0201 	and.w	r2, r3, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b03      	cmp	r3, #3
 8003672:	d017      	beq.n	80036a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2203      	movs	r2, #3
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d123      	bne.n	80036f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	08da      	lsrs	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3208      	adds	r2, #8
 80036b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	220f      	movs	r2, #15
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	08da      	lsrs	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3208      	adds	r2, #8
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80b4 	beq.w	80038a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <HAL_GPIO_Init+0x30c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <HAL_GPIO_Init+0x30c>)
 8003744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003748:	6453      	str	r3, [r2, #68]	; 0x44
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_GPIO_Init+0x30c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003756:	4a5b      	ldr	r2, [pc, #364]	; (80038c4 <HAL_GPIO_Init+0x310>)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	220f      	movs	r2, #15
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a52      	ldr	r2, [pc, #328]	; (80038c8 <HAL_GPIO_Init+0x314>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d02b      	beq.n	80037da <HAL_GPIO_Init+0x226>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a51      	ldr	r2, [pc, #324]	; (80038cc <HAL_GPIO_Init+0x318>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d025      	beq.n	80037d6 <HAL_GPIO_Init+0x222>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a50      	ldr	r2, [pc, #320]	; (80038d0 <HAL_GPIO_Init+0x31c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01f      	beq.n	80037d2 <HAL_GPIO_Init+0x21e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4f      	ldr	r2, [pc, #316]	; (80038d4 <HAL_GPIO_Init+0x320>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d019      	beq.n	80037ce <HAL_GPIO_Init+0x21a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a4e      	ldr	r2, [pc, #312]	; (80038d8 <HAL_GPIO_Init+0x324>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_GPIO_Init+0x216>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <HAL_GPIO_Init+0x328>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00d      	beq.n	80037c6 <HAL_GPIO_Init+0x212>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4c      	ldr	r2, [pc, #304]	; (80038e0 <HAL_GPIO_Init+0x32c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <HAL_GPIO_Init+0x20e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4b      	ldr	r2, [pc, #300]	; (80038e4 <HAL_GPIO_Init+0x330>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_GPIO_Init+0x20a>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00e      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037be:	2308      	movs	r3, #8
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037c2:	2306      	movs	r3, #6
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x228>
 80037da:	2300      	movs	r3, #0
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ec:	4935      	ldr	r1, [pc, #212]	; (80038c4 <HAL_GPIO_Init+0x310>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_GPIO_Init+0x334>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_GPIO_Init+0x334>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_GPIO_Init+0x334>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_GPIO_Init+0x334>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_GPIO_Init+0x334>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x334>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_GPIO_Init+0x334>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_GPIO_Init+0x334>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	f67f ae90 	bls.w	80035d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40021400 	.word	0x40021400
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40021c00 	.word	0x40021c00
 80038e8:	40013c00 	.word	0x40013c00

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003908:	e003      	b.n	8003912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4013      	ands	r3, r2
 8003936:	041a      	lsls	r2, r3, #16
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43d9      	mvns	r1, r3
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	400b      	ands	r3, r1
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	619a      	str	r2, [r3, #24]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e12b      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fd3e 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b8:	f001 f9a2 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a81      	ldr	r2, [pc, #516]	; (8003bc8 <HAL_I2C_Init+0x274>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d807      	bhi.n	80039d8 <HAL_I2C_Init+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_I2C_Init+0x278>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e006      	b.n	80039e6 <HAL_I2C_Init+0x92>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_I2C_Init+0x27c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0e7      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a78      	ldr	r2, [pc, #480]	; (8003bd4 <HAL_I2C_Init+0x280>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9b      	lsrs	r3, r3, #18
 80039f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d802      	bhi.n	8003a28 <HAL_I2C_Init+0xd4>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	e009      	b.n	8003a3c <HAL_I2C_Init+0xe8>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_I2C_Init+0x284>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	495c      	ldr	r1, [pc, #368]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d819      	bhi.n	8003a90 <HAL_I2C_Init+0x13c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e59      	subs	r1, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a70:	400b      	ands	r3, r1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_I2C_Init+0x138>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1e59      	subs	r1, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8a:	e051      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	e04f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <HAL_I2C_Init+0x168>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_I2C_Init+0x18e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x196>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <HAL_I2C_Init+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e58      	subs	r0, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	440b      	add	r3, r1
 8003b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	e00f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6809      	ldr	r1, [r1, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6911      	ldr	r1, [r2, #16]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	000186a0 	.word	0x000186a0
 8003bcc:	001e847f 	.word	0x001e847f
 8003bd0:	003d08ff 	.word	0x003d08ff
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7fe fc49 	bl	800248c <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80d9 	bne.w	8003dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	496d      	ldr	r1, [pc, #436]	; (8003dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fa9f 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Write+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0c5      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_I2C_Mem_Write+0x1f0>)
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f9be 	bl	800402c <I2C_RequestMemoryWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e081      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fb20 	bl	8004304 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x180>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1aa      	bne.n	8003cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fb0c 	bl	8004386 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7fe fb54 	bl	800248c <HAL_GetTick>
 8003de4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	f040 8111 	bne.w	800401a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2319      	movs	r3, #25
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4988      	ldr	r1, [pc, #544]	; (8004024 <HAL_I2C_IsDeviceReady+0x254>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f9a8 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e104      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2C_IsDeviceReady+0x50>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0fd      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d007      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a70      	ldr	r2, [pc, #448]	; (8004028 <HAL_I2C_IsDeviceReady+0x258>)
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f966 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea0:	d103      	bne.n	8003eaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b6      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eae:	897b      	ldrh	r3, [r7, #10]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ebc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fae5 	bl	800248c <HAL_GetTick>
 8003ec2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ef2:	e025      	b.n	8003f40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ef4:	f7fe faca 	bl	800248c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <HAL_I2C_IsDeviceReady+0x13a>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22a0      	movs	r2, #160	; 0xa0
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2ba0      	cmp	r3, #160	; 0xa0
 8003f4a:	d005      	beq.n	8003f58 <HAL_I2C_IsDeviceReady+0x188>
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_I2C_IsDeviceReady+0x188>
 8003f52:	7dbb      	ldrb	r3, [r7, #22]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0cd      	beq.n	8003ef4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d129      	bne.n	8003fc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4921      	ldr	r1, [pc, #132]	; (8004024 <HAL_I2C_IsDeviceReady+0x254>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8da 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e036      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e02c      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2319      	movs	r3, #25
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	490f      	ldr	r1, [pc, #60]	; (8004024 <HAL_I2C_IsDeviceReady+0x254>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8b6 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e012      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	f4ff af32 	bcc.w	8003e6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000

0800402c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2200      	movs	r2, #0
 800405e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f878 	bl	8004158 <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d103      	bne.n	8004086 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e05f      	b.n	800414a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	492d      	ldr	r1, [pc, #180]	; (8004154 <I2C_RequestMemoryWrite+0x128>)
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8b0 	bl	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e04c      	b.n	800414a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c8:	6a39      	ldr	r1, [r7, #32]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f91a 	bl	8004304 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00d      	beq.n	80040f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d107      	bne.n	80040ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e02b      	b.n	800414a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d105      	bne.n	8004104 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040f8:	893b      	ldrh	r3, [r7, #8]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	e021      	b.n	8004148 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	b29b      	uxth	r3, r3
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f8f4 	bl	8004304 <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e005      	b.n	800414a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800413e:	893b      	ldrh	r3, [r7, #8]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	00010002 	.word	0x00010002

08004158 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004168:	e025      	b.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004170:	d021      	beq.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004172:	f7fe f98b 	bl	800248c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d302      	bcc.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e023      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d10d      	bne.n	80041dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	43da      	mvns	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4013      	ands	r3, r2
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf0c      	ite	eq
 80041d2:	2301      	moveq	r3, #1
 80041d4:	2300      	movne	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	e00c      	b.n	80041f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0b6      	beq.n	800416a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004214:	e051      	b.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004224:	d123      	bne.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800423e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e046      	b.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004274:	d021      	beq.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fe f909 	bl	800248c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d116      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e020      	b.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d18d      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004310:	e02d      	b.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f878 	bl	8004408 <I2C_IsAcknowledgeFailed>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e02d      	b.n	800437e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004328:	d021      	beq.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432a:	f7fe f8af 	bl	800248c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d1ca      	bne.n	8004312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004392:	e02d      	b.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f837 	bl	8004408 <I2C_IsAcknowledgeFailed>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e02d      	b.n	8004400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043aa:	d021      	beq.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fe f86e 	bl	800248c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e007      	b.n	8004400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d1ca      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441e:	d11b      	bne.n	8004458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0204 	orr.w	r2, r3, #4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e264      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d075      	beq.n	8004572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004486:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b04      	cmp	r3, #4
 8004490:	d00c      	beq.n	80044ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004492:	4ba0      	ldr	r3, [pc, #640]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449a:	2b08      	cmp	r3, #8
 800449c:	d112      	bne.n	80044c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4b9d      	ldr	r3, [pc, #628]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044aa:	d10b      	bne.n	80044c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	4b99      	ldr	r3, [pc, #612]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05b      	beq.n	8004570 <HAL_RCC_OscConfig+0x108>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d157      	bne.n	8004570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e23f      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d106      	bne.n	80044dc <HAL_RCC_OscConfig+0x74>
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a90      	ldr	r2, [pc, #576]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a87      	ldr	r2, [pc, #540]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a83      	ldr	r2, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a80      	ldr	r2, [pc, #512]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd ffb4 	bl	800248c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd ffb0 	bl	800248c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e204      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xc0>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fd ffa0 	bl	800248c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd ff9c 	bl	800248c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1f0      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004562:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0xe8>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d063      	beq.n	8004646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004592:	2b08      	cmp	r3, #8
 8004594:	d11c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	4b5c      	ldr	r3, [pc, #368]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_RCC_OscConfig+0x152>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e1c4      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	4b56      	ldr	r3, [pc, #344]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4952      	ldr	r1, [pc, #328]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ce:	e03a      	b.n	8004646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d8:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045de:	f7fd ff55 	bl	800248c <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fd ff51 	bl	800248c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1a5      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f8:	4b46      	ldr	r3, [pc, #280]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004604:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4940      	ldr	r1, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
 8004618:	e015      	b.n	8004646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd ff34 	bl	800248c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004628:	f7fd ff30 	bl	800248c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e184      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d030      	beq.n	80046b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <HAL_RCC_OscConfig+0x2b4>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd ff14 	bl	800248c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd ff10 	bl	800248c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e164      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467a:	4b26      	ldr	r3, [pc, #152]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x200>
 8004686:	e015      	b.n	80046b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_OscConfig+0x2b4>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468e:	f7fd fefd 	bl	800248c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004696:	f7fd fef9 	bl	800248c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e14d      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a0 	beq.w	8004802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x2b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d121      	bne.n	8004742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_RCC_OscConfig+0x2b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a07      	ldr	r2, [pc, #28]	; (8004720 <HAL_RCC_OscConfig+0x2b8>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fd febf 	bl	800248c <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e011      	b.n	8004736 <HAL_RCC_OscConfig+0x2ce>
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
 8004720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7fd feb2 	bl	800248c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e106      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b85      	ldr	r3, [pc, #532]	; (800494c <HAL_RCC_OscConfig+0x4e4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d106      	bne.n	8004758 <HAL_RCC_OscConfig+0x2f0>
 800474a:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a80      	ldr	r2, [pc, #512]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
 8004756:	e01c      	b.n	8004792 <HAL_RCC_OscConfig+0x32a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d10c      	bne.n	800477a <HAL_RCC_OscConfig+0x312>
 8004760:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a7a      	ldr	r2, [pc, #488]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004766:	f043 0304 	orr.w	r3, r3, #4
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	4b78      	ldr	r3, [pc, #480]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a77      	ldr	r2, [pc, #476]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e00b      	b.n	8004792 <HAL_RCC_OscConfig+0x32a>
 800477a:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a74      	ldr	r2, [pc, #464]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	4b72      	ldr	r3, [pc, #456]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a71      	ldr	r2, [pc, #452]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d015      	beq.n	80047c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fd fe77 	bl	800248c <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a2:	f7fd fe73 	bl	800248c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e0c5      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b8:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ee      	beq.n	80047a2 <HAL_RCC_OscConfig+0x33a>
 80047c4:	e014      	b.n	80047f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c6:	f7fd fe61 	bl	800248c <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fd fe5d 	bl	800248c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e0af      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ee      	bne.n	80047ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d105      	bne.n	8004802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a55      	ldr	r2, [pc, #340]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80047fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 809b 	beq.w	8004942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480c:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d05c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d141      	bne.n	80048a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b4c      	ldr	r3, [pc, #304]	; (8004954 <HAL_RCC_OscConfig+0x4ec>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fd fe31 	bl	800248c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fd fe2d 	bl	800248c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e081      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	019b      	lsls	r3, r3, #6
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	3b01      	subs	r3, #1
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	4937      	ldr	r1, [pc, #220]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_OscConfig+0x4ec>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd fe06 	bl	800248c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd fe02 	bl	800248c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e056      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x41c>
 80048a2:	e04e      	b.n	8004942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a4:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_OscConfig+0x4ec>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fd fdef 	bl	800248c <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fd fdeb 	bl	800248c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e03f      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x44a>
 80048d0:	e037      	b.n	8004942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e032      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048de:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <HAL_RCC_OscConfig+0x4e8>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d028      	beq.n	800493e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d121      	bne.n	800493e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d11a      	bne.n	800493e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800490e:	4013      	ands	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004916:	4293      	cmp	r3, r2
 8004918:	d111      	bne.n	800493e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d107      	bne.n	800493e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40007000 	.word	0x40007000
 8004950:	40023800 	.word	0x40023800
 8004954:	42470060 	.word	0x42470060

08004958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0cc      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800496c:	4b68      	ldr	r3, [pc, #416]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d90c      	bls.n	8004994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b65      	ldr	r3, [pc, #404]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d044      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d119      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e06f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e067      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4934      	ldr	r1, [pc, #208]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a48:	f7fd fd20 	bl	800248c <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fd fd1c 	bl	800248c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e04f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d20c      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc fde2 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023c00 	.word	0x40023c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	0800b8a4 	.word	0x0800b8a4
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	20000004 	.word	0x20000004

08004b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b3c:	4b67      	ldr	r3, [pc, #412]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d00d      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x40>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	f200 80bd 	bhi.w	8004cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x34>
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b56:	e0b7      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b5a:	60bb      	str	r3, [r7, #8]
       break;
 8004b5c:	e0b7      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5e:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b60:	60bb      	str	r3, [r7, #8]
      break;
 8004b62:	e0b4      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b64:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d04d      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	ea02 0800 	and.w	r8, r2, r0
 8004b92:	ea03 0901 	and.w	r9, r3, r1
 8004b96:	4640      	mov	r0, r8
 8004b98:	4649      	mov	r1, r9
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	014b      	lsls	r3, r1, #5
 8004ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ba8:	0142      	lsls	r2, r0, #5
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	ebb0 0008 	subs.w	r0, r0, r8
 8004bb2:	eb61 0109 	sbc.w	r1, r1, r9
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	018b      	lsls	r3, r1, #6
 8004bc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bc4:	0182      	lsls	r2, r0, #6
 8004bc6:	1a12      	subs	r2, r2, r0
 8004bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8004bcc:	f04f 0000 	mov.w	r0, #0
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	00d9      	lsls	r1, r3, #3
 8004bd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bda:	00d0      	lsls	r0, r2, #3
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	eb12 0208 	adds.w	r2, r2, r8
 8004be4:	eb43 0309 	adc.w	r3, r3, r9
 8004be8:	f04f 0000 	mov.w	r0, #0
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	0259      	lsls	r1, r3, #9
 8004bf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004bf6:	0250      	lsls	r0, r2, #9
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f7fc f83e 	bl	8000c88 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e04a      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	ea02 0400 	and.w	r4, r2, r0
 8004c2e:	ea03 0501 	and.w	r5, r3, r1
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	014b      	lsls	r3, r1, #5
 8004c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c44:	0142      	lsls	r2, r0, #5
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	1b00      	subs	r0, r0, r4
 8004c4c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	018b      	lsls	r3, r1, #6
 8004c5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c5e:	0182      	lsls	r2, r0, #6
 8004c60:	1a12      	subs	r2, r2, r0
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	00d9      	lsls	r1, r3, #3
 8004c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c74:	00d0      	lsls	r0, r2, #3
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	1912      	adds	r2, r2, r4
 8004c7c:	eb45 0303 	adc.w	r3, r5, r3
 8004c80:	f04f 0000 	mov.w	r0, #0
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	0299      	lsls	r1, r3, #10
 8004c8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c8e:	0290      	lsls	r0, r2, #10
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	f7fb fff2 	bl	8000c88 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	0c1b      	lsrs	r3, r3, #16
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	60bb      	str	r3, [r7, #8]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cca:	60bb      	str	r3, [r7, #8]
      break;
 8004ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cce:	68bb      	ldr	r3, [r7, #8]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000000 	.word	0x20000000

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4903      	ldr	r1, [pc, #12]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	0800b8b4 	.word	0x0800b8b4

08004d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d2c:	f7ff ffdc 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d30:	4602      	mov	r2, r0
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	0b5b      	lsrs	r3, r3, #13
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	4903      	ldr	r1, [pc, #12]	; (8004d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3e:	5ccb      	ldrb	r3, [r1, r3]
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	0800b8b4 	.word	0x0800b8b4

08004d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_RCC_GetClockConfig+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40023c00 	.word	0x40023c00

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e041      	b.n	8004e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f839 	bl	8004e52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fb90 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d001      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e04e      	b.n	8004f1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x80>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d111      	bne.n	8004f0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d010      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	e007      	b.n	8004f1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40001800 	.word	0x40001800

08004f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e041      	b.n	8004fde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc ffbc 	bl	8001eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fac6 	bl	8005518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e097      	b.n	800512a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc ffa4 	bl	8001f5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fa6c 	bl	8005518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	4313      	orrs	r3, r2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005086:	f023 030c 	bic.w	r3, r3, #12
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	4313      	orrs	r3, r2
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	4313      	orrs	r3, r2
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	4313      	orrs	r3, r2
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d122      	bne.n	800518e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d11b      	bne.n	800518e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0202 	mvn.w	r2, #2
 800515e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9b1 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 800517a:	e005      	b.n	8005188 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9a3 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9b4 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d122      	bne.n	80051e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d11b      	bne.n	80051e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0204 	mvn.w	r2, #4
 80051b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f987 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 80051ce:	e005      	b.n	80051dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f979 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f98a 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d122      	bne.n	8005236 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d11b      	bne.n	8005236 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0208 	mvn.w	r2, #8
 8005206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f95d 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 8005222:	e005      	b.n	8005230 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f94f 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f960 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b10      	cmp	r3, #16
 8005242:	d122      	bne.n	800528a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b10      	cmp	r3, #16
 8005250:	d11b      	bne.n	800528a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0210 	mvn.w	r2, #16
 800525a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2208      	movs	r2, #8
 8005260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f933 	bl	80054dc <HAL_TIM_IC_CaptureCallback>
 8005276:	e005      	b.n	8005284 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f925 	bl	80054c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f936 	bl	80054f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10e      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f06f 0201 	mvn.w	r2, #1
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fc f9c9 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d10e      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d107      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fc43 	bl	8005b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d10e      	bne.n	800530e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d107      	bne.n	800530e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f8fb 	bl	8005504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b20      	cmp	r3, #32
 800531a:	d10e      	bne.n	800533a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d107      	bne.n	800533a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0220 	mvn.w	r2, #32
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fc0d 	bl	8005b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800535e:	2302      	movs	r3, #2
 8005360:	e0ae      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b0c      	cmp	r3, #12
 800536e:	f200 809f 	bhi.w	80054b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053ad 	.word	0x080053ad
 800537c:	080054b1 	.word	0x080054b1
 8005380:	080054b1 	.word	0x080054b1
 8005384:	080054b1 	.word	0x080054b1
 8005388:	080053ed 	.word	0x080053ed
 800538c:	080054b1 	.word	0x080054b1
 8005390:	080054b1 	.word	0x080054b1
 8005394:	080054b1 	.word	0x080054b1
 8005398:	0800542f 	.word	0x0800542f
 800539c:	080054b1 	.word	0x080054b1
 80053a0:	080054b1 	.word	0x080054b1
 80053a4:	080054b1 	.word	0x080054b1
 80053a8:	0800546f 	.word	0x0800546f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f950 	bl	8005658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
      break;
 80053ea:	e064      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f9a0 	bl	8005738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
      break;
 800542c:	e043      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f9f5 	bl	8005824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0208 	orr.w	r2, r2, #8
 8005448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0204 	bic.w	r2, r2, #4
 8005458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      break;
 800546c:	e023      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fa49 	bl	800590c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
      break;
 80054ae:	e002      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a40      	ldr	r2, [pc, #256]	; (800562c <TIM_Base_SetConfig+0x114>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005536:	d00f      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3d      	ldr	r2, [pc, #244]	; (8005630 <TIM_Base_SetConfig+0x118>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3c      	ldr	r2, [pc, #240]	; (8005634 <TIM_Base_SetConfig+0x11c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3b      	ldr	r2, [pc, #236]	; (8005638 <TIM_Base_SetConfig+0x120>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3a      	ldr	r2, [pc, #232]	; (800563c <TIM_Base_SetConfig+0x124>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2f      	ldr	r2, [pc, #188]	; (800562c <TIM_Base_SetConfig+0x114>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d027      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <TIM_Base_SetConfig+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d023      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <TIM_Base_SetConfig+0x11c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <TIM_Base_SetConfig+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a29      	ldr	r2, [pc, #164]	; (800563c <TIM_Base_SetConfig+0x124>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a28      	ldr	r2, [pc, #160]	; (8005640 <TIM_Base_SetConfig+0x128>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <TIM_Base_SetConfig+0x12c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <TIM_Base_SetConfig+0x130>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_Base_SetConfig+0x134>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <TIM_Base_SetConfig+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <TIM_Base_SetConfig+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d108      	bne.n	80055dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0a      	ldr	r2, [pc, #40]	; (800562c <TIM_Base_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a0c      	ldr	r2, [pc, #48]	; (800563c <TIM_Base_SetConfig+0x124>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d103      	bne.n	8005618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	615a      	str	r2, [r3, #20]
}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800
 800564c:	40001800 	.word	0x40001800
 8005650:	40001c00 	.word	0x40001c00
 8005654:	40002000 	.word	0x40002000

08005658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0302 	bic.w	r3, r3, #2
 80056a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a20      	ldr	r2, [pc, #128]	; (8005730 <TIM_OC1_SetConfig+0xd8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC1_SetConfig+0x64>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <TIM_OC1_SetConfig+0xdc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d10c      	bne.n	80056d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0308 	bic.w	r3, r3, #8
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <TIM_OC1_SetConfig+0xd8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC1_SetConfig+0x8e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a14      	ldr	r2, [pc, #80]	; (8005734 <TIM_OC1_SetConfig+0xdc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d111      	bne.n	800570a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40010000 	.word	0x40010000
 8005734:	40010400 	.word	0x40010400

08005738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0210 	bic.w	r2, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0320 	bic.w	r3, r3, #32
 8005782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <TIM_OC2_SetConfig+0xe4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC2_SetConfig+0x68>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <TIM_OC2_SetConfig+0xe8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10d      	bne.n	80057bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <TIM_OC2_SetConfig+0xe4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC2_SetConfig+0x94>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a16      	ldr	r2, [pc, #88]	; (8005820 <TIM_OC2_SetConfig+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d113      	bne.n	80057f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400

08005824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <TIM_OC3_SetConfig+0xe0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x66>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a20      	ldr	r2, [pc, #128]	; (8005908 <TIM_OC3_SetConfig+0xe4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10d      	bne.n	80058a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a16      	ldr	r2, [pc, #88]	; (8005904 <TIM_OC3_SetConfig+0xe0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC3_SetConfig+0x92>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <TIM_OC3_SetConfig+0xe4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d113      	bne.n	80058de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400

0800590c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	031b      	lsls	r3, r3, #12
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <TIM_OC4_SetConfig+0xa4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC4_SetConfig+0x68>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <TIM_OC4_SetConfig+0xa8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d109      	bne.n	8005988 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800597a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	019b      	lsls	r3, r3, #6
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e05a      	b.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d022      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d01d      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d018      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d00e      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d004      	beq.n	8005a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10c      	bne.n	8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40010000 	.word	0x40010000
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40010400 	.word	0x40010400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40001800 	.word	0x40001800

08005ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e03d      	b.n	8005b48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e03f      	b.n	8005c0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fc fb94 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	; 0x24
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9cb 	bl	8005f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08a      	sub	sp, #40	; 0x28
 8005c1a:	af02      	add	r7, sp, #8
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d17c      	bne.n	8005d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_Transmit+0x2c>
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e075      	b.n	8005d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Transmit+0x3e>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e06e      	b.n	8005d32 <HAL_UART_Transmit+0x11c>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2221      	movs	r2, #33	; 0x21
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6a:	f7fc fc0f 	bl	800248c <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c84:	d108      	bne.n	8005c98 <HAL_UART_Transmit+0x82>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d104      	bne.n	8005c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e003      	b.n	8005ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ca8:	e02a      	b.n	8005d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2180      	movs	r1, #128	; 0x80
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f8e2 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e036      	b.n	8005d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	3302      	adds	r3, #2
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e007      	b.n	8005cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1cf      	bne.n	8005caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2140      	movs	r1, #64	; 0x40
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f8b2 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e006      	b.n	8005d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08a      	sub	sp, #40	; 0x28
 8005d3e:	af02      	add	r7, sp, #8
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	f040 808c 	bne.w	8005e74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_UART_Receive+0x2e>
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e084      	b.n	8005e76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Receive+0x40>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e07d      	b.n	8005e76 <HAL_UART_Receive+0x13c>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2222      	movs	r2, #34	; 0x22
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d96:	f7fc fb79 	bl	800248c <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d108      	bne.n	8005dc4 <HAL_UART_Receive+0x8a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e003      	b.n	8005dcc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005dd4:	e043      	b.n	8005e5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2120      	movs	r1, #32
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f84c 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e042      	b.n	8005e76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10c      	bne.n	8005e10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e01f      	b.n	8005e50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e18:	d007      	beq.n	8005e2a <HAL_UART_Receive+0xf0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <HAL_UART_Receive+0xfe>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e008      	b.n	8005e4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1b6      	bne.n	8005dd6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b090      	sub	sp, #64	; 0x40
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	e050      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e96:	d04c      	beq.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0x30>
 8005e9e:	f7fc faf5 	bl	800248c <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d241      	bcs.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ece:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e5      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f02:	623a      	str	r2, [r7, #32]
 8005f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e00f      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d09f      	beq.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3740      	adds	r7, #64	; 0x40
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	b09f      	sub	sp, #124	; 0x7c
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	68d9      	ldr	r1, [r3, #12]
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	ea40 0301 	orr.w	r3, r0, r1
 8005f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fa0:	f021 010c 	bic.w	r1, r1, #12
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005faa:	430b      	orrs	r3, r1
 8005fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fba:	6999      	ldr	r1, [r3, #24]
 8005fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	ea40 0301 	orr.w	r3, r0, r1
 8005fc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4bc5      	ldr	r3, [pc, #788]	; (80062e0 <UART_SetConfig+0x384>)
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d004      	beq.n	8005fda <UART_SetConfig+0x7e>
 8005fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	4bc3      	ldr	r3, [pc, #780]	; (80062e4 <UART_SetConfig+0x388>)
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d103      	bne.n	8005fe2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fda:	f7fe fea5 	bl	8004d28 <HAL_RCC_GetPCLK2Freq>
 8005fde:	6778      	str	r0, [r7, #116]	; 0x74
 8005fe0:	e002      	b.n	8005fe8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe2:	f7fe fe8d 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005fe6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff0:	f040 80b6 	bne.w	8006160 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	f04f 0500 	mov.w	r5, #0
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	1891      	adds	r1, r2, r2
 8006002:	6439      	str	r1, [r7, #64]	; 0x40
 8006004:	415b      	adcs	r3, r3
 8006006:	647b      	str	r3, [r7, #68]	; 0x44
 8006008:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800600c:	1912      	adds	r2, r2, r4
 800600e:	eb45 0303 	adc.w	r3, r5, r3
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	00d9      	lsls	r1, r3, #3
 800601c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006020:	00d0      	lsls	r0, r2, #3
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	1911      	adds	r1, r2, r4
 8006028:	6639      	str	r1, [r7, #96]	; 0x60
 800602a:	416b      	adcs	r3, r5
 800602c:	667b      	str	r3, [r7, #100]	; 0x64
 800602e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	461a      	mov	r2, r3
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	1891      	adds	r1, r2, r2
 800603a:	63b9      	str	r1, [r7, #56]	; 0x38
 800603c:	415b      	adcs	r3, r3
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006044:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006048:	f7fa fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4ba5      	ldr	r3, [pc, #660]	; (80062e8 <UART_SetConfig+0x38c>)
 8006052:	fba3 2302 	umull	r2, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	011e      	lsls	r6, r3, #4
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	461c      	mov	r4, r3
 800605e:	f04f 0500 	mov.w	r5, #0
 8006062:	4622      	mov	r2, r4
 8006064:	462b      	mov	r3, r5
 8006066:	1891      	adds	r1, r2, r2
 8006068:	6339      	str	r1, [r7, #48]	; 0x30
 800606a:	415b      	adcs	r3, r3
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
 800606e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006072:	1912      	adds	r2, r2, r4
 8006074:	eb45 0303 	adc.w	r3, r5, r3
 8006078:	f04f 0000 	mov.w	r0, #0
 800607c:	f04f 0100 	mov.w	r1, #0
 8006080:	00d9      	lsls	r1, r3, #3
 8006082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006086:	00d0      	lsls	r0, r2, #3
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	1911      	adds	r1, r2, r4
 800608e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006090:	416b      	adcs	r3, r5
 8006092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	461a      	mov	r2, r3
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	1891      	adds	r1, r2, r2
 80060a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80060a2:	415b      	adcs	r3, r3
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80060ae:	f7fa fdeb 	bl	8000c88 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4b8c      	ldr	r3, [pc, #560]	; (80062e8 <UART_SetConfig+0x38c>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a87      	ldr	r2, [pc, #540]	; (80062e8 <UART_SetConfig+0x38c>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060d8:	441e      	add	r6, r3
 80060da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060dc:	4618      	mov	r0, r3
 80060de:	f04f 0100 	mov.w	r1, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	1894      	adds	r4, r2, r2
 80060e8:	623c      	str	r4, [r7, #32]
 80060ea:	415b      	adcs	r3, r3
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060f2:	1812      	adds	r2, r2, r0
 80060f4:	eb41 0303 	adc.w	r3, r1, r3
 80060f8:	f04f 0400 	mov.w	r4, #0
 80060fc:	f04f 0500 	mov.w	r5, #0
 8006100:	00dd      	lsls	r5, r3, #3
 8006102:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006106:	00d4      	lsls	r4, r2, #3
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	1814      	adds	r4, r2, r0
 800610e:	653c      	str	r4, [r7, #80]	; 0x50
 8006110:	414b      	adcs	r3, r1
 8006112:	657b      	str	r3, [r7, #84]	; 0x54
 8006114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	461a      	mov	r2, r3
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	1891      	adds	r1, r2, r2
 8006120:	61b9      	str	r1, [r7, #24]
 8006122:	415b      	adcs	r3, r3
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800612a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800612e:	f7fa fdab 	bl	8000c88 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <UART_SetConfig+0x38c>)
 8006138:	fba3 1302 	umull	r1, r3, r3, r2
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	2164      	movs	r1, #100	; 0x64
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	3332      	adds	r3, #50	; 0x32
 800614a:	4a67      	ldr	r2, [pc, #412]	; (80062e8 <UART_SetConfig+0x38c>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f003 0207 	and.w	r2, r3, #7
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4432      	add	r2, r6
 800615c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800615e:	e0b9      	b.n	80062d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006162:	461c      	mov	r4, r3
 8006164:	f04f 0500 	mov.w	r5, #0
 8006168:	4622      	mov	r2, r4
 800616a:	462b      	mov	r3, r5
 800616c:	1891      	adds	r1, r2, r2
 800616e:	6139      	str	r1, [r7, #16]
 8006170:	415b      	adcs	r3, r3
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006178:	1912      	adds	r2, r2, r4
 800617a:	eb45 0303 	adc.w	r3, r5, r3
 800617e:	f04f 0000 	mov.w	r0, #0
 8006182:	f04f 0100 	mov.w	r1, #0
 8006186:	00d9      	lsls	r1, r3, #3
 8006188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800618c:	00d0      	lsls	r0, r2, #3
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	eb12 0804 	adds.w	r8, r2, r4
 8006196:	eb43 0905 	adc.w	r9, r3, r5
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4618      	mov	r0, r3
 80061a0:	f04f 0100 	mov.w	r1, #0
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	008b      	lsls	r3, r1, #2
 80061ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061b2:	0082      	lsls	r2, r0, #2
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f7fa fd66 	bl	8000c88 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <UART_SetConfig+0x38c>)
 80061c2:	fba3 2302 	umull	r2, r3, r3, r2
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	011e      	lsls	r6, r3, #4
 80061ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061cc:	4618      	mov	r0, r3
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	1894      	adds	r4, r2, r2
 80061d8:	60bc      	str	r4, [r7, #8]
 80061da:	415b      	adcs	r3, r3
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061e2:	1812      	adds	r2, r2, r0
 80061e4:	eb41 0303 	adc.w	r3, r1, r3
 80061e8:	f04f 0400 	mov.w	r4, #0
 80061ec:	f04f 0500 	mov.w	r5, #0
 80061f0:	00dd      	lsls	r5, r3, #3
 80061f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061f6:	00d4      	lsls	r4, r2, #3
 80061f8:	4622      	mov	r2, r4
 80061fa:	462b      	mov	r3, r5
 80061fc:	1814      	adds	r4, r2, r0
 80061fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006200:	414b      	adcs	r3, r1
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	f04f 0100 	mov.w	r1, #0
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	008b      	lsls	r3, r1, #2
 8006218:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800621c:	0082      	lsls	r2, r0, #2
 800621e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006222:	f7fa fd31 	bl	8000c88 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <UART_SetConfig+0x38c>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <UART_SetConfig+0x38c>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800624a:	441e      	add	r6, r3
 800624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624e:	4618      	mov	r0, r3
 8006250:	f04f 0100 	mov.w	r1, #0
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	1894      	adds	r4, r2, r2
 800625a:	603c      	str	r4, [r7, #0]
 800625c:	415b      	adcs	r3, r3
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006264:	1812      	adds	r2, r2, r0
 8006266:	eb41 0303 	adc.w	r3, r1, r3
 800626a:	f04f 0400 	mov.w	r4, #0
 800626e:	f04f 0500 	mov.w	r5, #0
 8006272:	00dd      	lsls	r5, r3, #3
 8006274:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006278:	00d4      	lsls	r4, r2, #3
 800627a:	4622      	mov	r2, r4
 800627c:	462b      	mov	r3, r5
 800627e:	eb12 0a00 	adds.w	sl, r2, r0
 8006282:	eb43 0b01 	adc.w	fp, r3, r1
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4618      	mov	r0, r3
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	008b      	lsls	r3, r1, #2
 800629a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800629e:	0082      	lsls	r2, r0, #2
 80062a0:	4650      	mov	r0, sl
 80062a2:	4659      	mov	r1, fp
 80062a4:	f7fa fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <UART_SetConfig+0x38c>)
 80062ae:	fba3 1302 	umull	r1, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2164      	movs	r1, #100	; 0x64
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	; 0x32
 80062c0:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <UART_SetConfig+0x38c>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4432      	add	r2, r6
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	377c      	adds	r7, #124	; 0x7c
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	bf00      	nop
 80062e0:	40011000 	.word	0x40011000
 80062e4:	40011400 	.word	0x40011400
 80062e8:	51eb851f 	.word	0x51eb851f

080062ec <Display_Init>:
 *      Author: ermoz
 */

#include "display.h"

void Display_Init(Display_StructTypeDef *display, I2C_HandleTypeDef *hi2c) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	display->hi2c = hi2c;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]

	if(HAL_I2C_IsDeviceReady(display->hi2c, SSD1306_I2C_ADDR, 1, 100)!=HAL_OK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	2364      	movs	r3, #100	; 0x64
 8006302:	2201      	movs	r2, #1
 8006304:	2178      	movs	r1, #120	; 0x78
 8006306:	f7fd fd63 	bl	8003dd0 <HAL_I2C_IsDeviceReady>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <Display_Init+0x2c>
		Display_ErrorHandler(__FILE__, __LINE__);
 8006310:	210e      	movs	r1, #14
 8006312:	4806      	ldr	r0, [pc, #24]	; (800632c <Display_Init+0x40>)
 8006314:	f000 fa32 	bl	800677c <Display_ErrorHandler>

	ssd1306_Init(display->hi2c);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fad9 	bl	80068d4 <ssd1306_Init>
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	0800b800 	.word	0x0800b800

08006330 <Display_Update>:

void Display_Update(Display_StructTypeDef *display) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_IsDeviceReady(display->hi2c, SSD1306_I2C_ADDR, 1, 10)!=HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	230a      	movs	r3, #10
 800633e:	2201      	movs	r2, #1
 8006340:	2178      	movs	r1, #120	; 0x78
 8006342:	f7fd fd45 	bl	8003dd0 <HAL_I2C_IsDeviceReady>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <Display_Update+0x24>
		Display_ErrorHandler(__FILE__, __LINE__);
 800634c:	2115      	movs	r1, #21
 800634e:	4806      	ldr	r0, [pc, #24]	; (8006368 <Display_Update+0x38>)
 8006350:	f000 fa14 	bl	800677c <Display_ErrorHandler>

	ssd1306_UpdateScreen(display->hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fbff 	bl	8006b5c <ssd1306_UpdateScreen>
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	0800b800 	.word	0x0800b800

0800636c <Display_DrawBitmap>:

void Display_DrawBitmap(Display_StructTypeDef *display, uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t w, uint16_t h) {
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b087      	sub	sp, #28
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	607b      	str	r3, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	817b      	strh	r3, [r7, #10]
 800637a:	4613      	mov	r3, r2
 800637c:	813b      	strh	r3, [r7, #8]
	ssd1306_DrawBitmap(x, y, bitmap, w, h, White);
 800637e:	897b      	ldrh	r3, [r7, #10]
 8006380:	b2d8      	uxtb	r0, r3
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	b2d9      	uxtb	r1, r3
 8006386:	8c3b      	ldrh	r3, [r7, #32]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2401      	movs	r4, #1
 8006390:	9401      	str	r4, [sp, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	f000 fd12 	bl	8006dc0 <ssd1306_DrawBitmap>
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd90      	pop	{r4, r7, pc}

080063a4 <Display_DrawLine>:

void Display_DrawLine(Display_StructTypeDef *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	4608      	mov	r0, r1
 80063ae:	4611      	mov	r1, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	817b      	strh	r3, [r7, #10]
 80063b6:	460b      	mov	r3, r1
 80063b8:	813b      	strh	r3, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80063be:	897b      	ldrh	r3, [r7, #10]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d901      	bls.n	80063c8 <Display_DrawLine+0x24>
		x0 = SSD1306_WIDTH - 1;
 80063c4:	237f      	movs	r3, #127	; 0x7f
 80063c6:	817b      	strh	r3, [r7, #10]
	}
	if (x1 >= SSD1306_WIDTH) {
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	2b7f      	cmp	r3, #127	; 0x7f
 80063cc:	d901      	bls.n	80063d2 <Display_DrawLine+0x2e>
		x1 = SSD1306_WIDTH - 1;
 80063ce:	237f      	movs	r3, #127	; 0x7f
 80063d0:	80fb      	strh	r3, [r7, #6]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	2b3f      	cmp	r3, #63	; 0x3f
 80063d6:	d901      	bls.n	80063dc <Display_DrawLine+0x38>
		y0 = SSD1306_HEIGHT - 1;
 80063d8:	233f      	movs	r3, #63	; 0x3f
 80063da:	813b      	strh	r3, [r7, #8]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80063dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063de:	2b3f      	cmp	r3, #63	; 0x3f
 80063e0:	d901      	bls.n	80063e6 <Display_DrawLine+0x42>
		y1 = SSD1306_HEIGHT - 1;
 80063e2:	233f      	movs	r3, #63	; 0x3f
 80063e4:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80063e6:	897a      	ldrh	r2, [r7, #10]
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d205      	bcs.n	80063fa <Display_DrawLine+0x56>
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	897b      	ldrh	r3, [r7, #10]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	e004      	b.n	8006404 <Display_DrawLine+0x60>
 80063fa:	897a      	ldrh	r2, [r7, #10]
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	b29b      	uxth	r3, r3
 8006402:	b21b      	sxth	r3, r3
 8006404:	837b      	strh	r3, [r7, #26]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8006406:	893a      	ldrh	r2, [r7, #8]
 8006408:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800640a:	429a      	cmp	r2, r3
 800640c:	d205      	bcs.n	800641a <Display_DrawLine+0x76>
 800640e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006410:	893b      	ldrh	r3, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	b29b      	uxth	r3, r3
 8006416:	b21b      	sxth	r3, r3
 8006418:	e004      	b.n	8006424 <Display_DrawLine+0x80>
 800641a:	893a      	ldrh	r2, [r7, #8]
 800641c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	b29b      	uxth	r3, r3
 8006422:	b21b      	sxth	r3, r3
 8006424:	833b      	strh	r3, [r7, #24]
	sx = (x0 < x1) ? 1 : -1;
 8006426:	897a      	ldrh	r2, [r7, #10]
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	429a      	cmp	r2, r3
 800642c:	d201      	bcs.n	8006432 <Display_DrawLine+0x8e>
 800642e:	2301      	movs	r3, #1
 8006430:	e001      	b.n	8006436 <Display_DrawLine+0x92>
 8006432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006436:	82fb      	strh	r3, [r7, #22]
	sy = (y0 < y1) ? 1 : -1;
 8006438:	893a      	ldrh	r2, [r7, #8]
 800643a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800643c:	429a      	cmp	r2, r3
 800643e:	d201      	bcs.n	8006444 <Display_DrawLine+0xa0>
 8006440:	2301      	movs	r3, #1
 8006442:	e001      	b.n	8006448 <Display_DrawLine+0xa4>
 8006444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006448:	82bb      	strh	r3, [r7, #20]
	err = ((dx > dy) ? dx : -dy) / 2;
 800644a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800644e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006452:	429a      	cmp	r2, r3
 8006454:	dd06      	ble.n	8006464 <Display_DrawLine+0xc0>
 8006456:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800645a:	0fda      	lsrs	r2, r3, #31
 800645c:	4413      	add	r3, r2
 800645e:	105b      	asrs	r3, r3, #1
 8006460:	b21b      	sxth	r3, r3
 8006462:	e006      	b.n	8006472 <Display_DrawLine+0xce>
 8006464:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006468:	0fda      	lsrs	r2, r3, #31
 800646a:	4413      	add	r3, r2
 800646c:	105b      	asrs	r3, r3, #1
 800646e:	425b      	negs	r3, r3
 8006470:	b21b      	sxth	r3, r3
 8006472:	83fb      	strh	r3, [r7, #30]

	if (dx == 0) {
 8006474:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d12a      	bne.n	80064d2 <Display_DrawLine+0x12e>
		if (y1 < y0) {
 800647c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800647e:	893b      	ldrh	r3, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d205      	bcs.n	8006490 <Display_DrawLine+0xec>
			tmp = y1;
 8006484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006486:	823b      	strh	r3, [r7, #16]
			y1 = y0;
 8006488:	893b      	ldrh	r3, [r7, #8]
 800648a:	853b      	strh	r3, [r7, #40]	; 0x28
			y0 = tmp;
 800648c:	8a3b      	ldrh	r3, [r7, #16]
 800648e:	813b      	strh	r3, [r7, #8]
		}

		if (x1 < x0) {
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	897b      	ldrh	r3, [r7, #10]
 8006494:	429a      	cmp	r2, r3
 8006496:	d205      	bcs.n	80064a4 <Display_DrawLine+0x100>
			tmp = x1;
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	823b      	strh	r3, [r7, #16]
			x1 = x0;
 800649c:	897b      	ldrh	r3, [r7, #10]
 800649e:	80fb      	strh	r3, [r7, #6]
			x0 = tmp;
 80064a0:	8a3b      	ldrh	r3, [r7, #16]
 80064a2:	817b      	strh	r3, [r7, #10]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80064a4:	893b      	ldrh	r3, [r7, #8]
 80064a6:	83bb      	strh	r3, [r7, #28]
 80064a8:	e00d      	b.n	80064c6 <Display_DrawLine+0x122>
			ssd1306_DrawPixel(x0, i, White);
 80064aa:	897b      	ldrh	r3, [r7, #10]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	8bba      	ldrh	r2, [r7, #28]
 80064b0:	b2d1      	uxtb	r1, r2
 80064b2:	2201      	movs	r2, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb7d 	bl	8006bb4 <ssd1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80064ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3301      	adds	r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	83bb      	strh	r3, [r7, #28]
 80064c6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80064ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064cc:	429a      	cmp	r2, r3
 80064ce:	ddec      	ble.n	80064aa <Display_DrawLine+0x106>
		}

		/* Return from function */
		return;
 80064d0:	e061      	b.n	8006596 <Display_DrawLine+0x1f2>
	}

	if (dy == 0) {
 80064d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d12a      	bne.n	8006530 <Display_DrawLine+0x18c>
		if (y1 < y0) {
 80064da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80064dc:	893b      	ldrh	r3, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d205      	bcs.n	80064ee <Display_DrawLine+0x14a>
			tmp = y1;
 80064e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064e4:	823b      	strh	r3, [r7, #16]
			y1 = y0;
 80064e6:	893b      	ldrh	r3, [r7, #8]
 80064e8:	853b      	strh	r3, [r7, #40]	; 0x28
			y0 = tmp;
 80064ea:	8a3b      	ldrh	r3, [r7, #16]
 80064ec:	813b      	strh	r3, [r7, #8]
		}

		if (x1 < x0) {
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	897b      	ldrh	r3, [r7, #10]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d205      	bcs.n	8006502 <Display_DrawLine+0x15e>
			tmp = x1;
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	823b      	strh	r3, [r7, #16]
			x1 = x0;
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	80fb      	strh	r3, [r7, #6]
			x0 = tmp;
 80064fe:	8a3b      	ldrh	r3, [r7, #16]
 8006500:	817b      	strh	r3, [r7, #10]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	83bb      	strh	r3, [r7, #28]
 8006506:	e00d      	b.n	8006524 <Display_DrawLine+0x180>
			ssd1306_DrawPixel(i, y0, White);
 8006508:	8bbb      	ldrh	r3, [r7, #28]
 800650a:	b2db      	uxtb	r3, r3
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	b2d1      	uxtb	r1, r2
 8006510:	2201      	movs	r2, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fb4e 	bl	8006bb4 <ssd1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8006518:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800651c:	b29b      	uxth	r3, r3
 800651e:	3301      	adds	r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	83bb      	strh	r3, [r7, #28]
 8006524:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	429a      	cmp	r2, r3
 800652c:	ddec      	ble.n	8006508 <Display_DrawLine+0x164>
		}

		/* Return from function */
		return;
 800652e:	e032      	b.n	8006596 <Display_DrawLine+0x1f2>
	}

	while(1) {
		ssd1306_DrawPixel(x0, y0, White);
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	893a      	ldrh	r2, [r7, #8]
 8006536:	b2d1      	uxtb	r1, r2
 8006538:	2201      	movs	r2, #1
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fb3a 	bl	8006bb4 <ssd1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8006540:	897a      	ldrh	r2, [r7, #10]
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	429a      	cmp	r2, r3
 8006546:	d103      	bne.n	8006550 <Display_DrawLine+0x1ac>
 8006548:	893a      	ldrh	r2, [r7, #8]
 800654a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800654c:	429a      	cmp	r2, r3
 800654e:	d021      	beq.n	8006594 <Display_DrawLine+0x1f0>
			break;
		}
		e2 = err;
 8006550:	8bfb      	ldrh	r3, [r7, #30]
 8006552:	827b      	strh	r3, [r7, #18]
		if (e2 > -dx) {
 8006554:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006558:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800655c:	425b      	negs	r3, r3
 800655e:	429a      	cmp	r2, r3
 8006560:	dd08      	ble.n	8006574 <Display_DrawLine+0x1d0>
			err -= dy;
 8006562:	8bfa      	ldrh	r2, [r7, #30]
 8006564:	8b3b      	ldrh	r3, [r7, #24]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	b29b      	uxth	r3, r3
 800656a:	83fb      	strh	r3, [r7, #30]
			x0 += sx;
 800656c:	8afa      	ldrh	r2, [r7, #22]
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	4413      	add	r3, r2
 8006572:	817b      	strh	r3, [r7, #10]
		}
		if (e2 < dy) {
 8006574:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006578:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800657c:	429a      	cmp	r2, r3
 800657e:	dad7      	bge.n	8006530 <Display_DrawLine+0x18c>
			err += dx;
 8006580:	8bfa      	ldrh	r2, [r7, #30]
 8006582:	8b7b      	ldrh	r3, [r7, #26]
 8006584:	4413      	add	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	83fb      	strh	r3, [r7, #30]
			y0 += sy;
 800658a:	8aba      	ldrh	r2, [r7, #20]
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	4413      	add	r3, r2
 8006590:	813b      	strh	r3, [r7, #8]
		ssd1306_DrawPixel(x0, y0, White);
 8006592:	e7cd      	b.n	8006530 <Display_DrawLine+0x18c>
			break;
 8006594:	bf00      	nop
		}
	}

}
 8006596:	3720      	adds	r7, #32
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <Display_WriteString>:

void Display_WriteString(Display_StructTypeDef *display, uint16_t x, uint16_t y, FontDef font, char *str) {
 800659c:	b082      	sub	sp, #8
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	460b      	mov	r3, r1
 80065aa:	807b      	strh	r3, [r7, #2]
 80065ac:	4613      	mov	r3, r2
 80065ae:	803b      	strh	r3, [r7, #0]
	ssd1306_SetCursor(x, y);
 80065b0:	887b      	ldrh	r3, [r7, #2]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	883a      	ldrh	r2, [r7, #0]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fc5c 	bl	8006e78 <ssd1306_SetCursor>
	ssd1306_WriteString(str, font, White);
 80065c0:	2301      	movs	r3, #1
 80065c2:	f107 0214 	add.w	r2, r7, #20
 80065c6:	ca06      	ldmia	r2, {r1, r2}
 80065c8:	69f8      	ldr	r0, [r7, #28]
 80065ca:	f000 fbd3 	bl	8006d74 <ssd1306_WriteString>
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d8:	b002      	add	sp, #8
 80065da:	4770      	bx	lr

080065dc <Line_Init>:
 *      Author: ermoz
 */

#include "line.h"

void Line_Init(LineSensor_StructTypeDef *line, uint16_t *read_src, uint16_t threshold) {
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	80fb      	strh	r3, [r7, #6]
	line->read_src = read_src;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	601a      	str	r2, [r3, #0]
	line->threshold = threshold;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	809a      	strh	r2, [r3, #4]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <SNEAK100_ADC_Init>:
LineSensor_StructTypeDef lineLL;
LineSensor_StructTypeDef lineLM;
LineSensor_StructTypeDef lineRM;
LineSensor_StructTypeDef lineRR;

void SNEAK100_ADC_Init() {
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_dma_buffer, 6);
 8006608:	2206      	movs	r2, #6
 800660a:	490f      	ldr	r1, [pc, #60]	; (8006648 <SNEAK100_ADC_Init+0x44>)
 800660c:	480f      	ldr	r0, [pc, #60]	; (800664c <SNEAK100_ADC_Init+0x48>)
 800660e:	f7fb ffb1 	bl	8002574 <HAL_ADC_Start_DMA>

	Line_Init(&lineLL, &adc_dma_buffer[3], LINE_THRESHOLD);
 8006612:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006616:	490e      	ldr	r1, [pc, #56]	; (8006650 <SNEAK100_ADC_Init+0x4c>)
 8006618:	480e      	ldr	r0, [pc, #56]	; (8006654 <SNEAK100_ADC_Init+0x50>)
 800661a:	f7ff ffdf 	bl	80065dc <Line_Init>
	Line_Init(&lineLM, &adc_dma_buffer[2], LINE_THRESHOLD);
 800661e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006622:	490d      	ldr	r1, [pc, #52]	; (8006658 <SNEAK100_ADC_Init+0x54>)
 8006624:	480d      	ldr	r0, [pc, #52]	; (800665c <SNEAK100_ADC_Init+0x58>)
 8006626:	f7ff ffd9 	bl	80065dc <Line_Init>
	Line_Init(&lineRM, &adc_dma_buffer[1], LINE_THRESHOLD);
 800662a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800662e:	490c      	ldr	r1, [pc, #48]	; (8006660 <SNEAK100_ADC_Init+0x5c>)
 8006630:	480c      	ldr	r0, [pc, #48]	; (8006664 <SNEAK100_ADC_Init+0x60>)
 8006632:	f7ff ffd3 	bl	80065dc <Line_Init>
	Line_Init(&lineRR, &adc_dma_buffer[0], LINE_THRESHOLD);
 8006636:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800663a:	4903      	ldr	r1, [pc, #12]	; (8006648 <SNEAK100_ADC_Init+0x44>)
 800663c:	480a      	ldr	r0, [pc, #40]	; (8006668 <SNEAK100_ADC_Init+0x64>)
 800663e:	f7ff ffcd 	bl	80065dc <Line_Init>
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000208 	.word	0x20000208
 800664c:	2000062c 	.word	0x2000062c
 8006650:	2000020e 	.word	0x2000020e
 8006654:	200009b4 	.word	0x200009b4
 8006658:	2000020c 	.word	0x2000020c
 800665c:	200009ac 	.word	0x200009ac
 8006660:	2000020a 	.word	0x2000020a
 8006664:	200009bc 	.word	0x200009bc
 8006668:	200009c4 	.word	0x200009c4

0800666c <__SNEAK100_ADC_ConvertToVoltage>:

static float __SNEAK100_ADC_ConvertToVoltage(uint16_t read_raw) {
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	80fb      	strh	r3, [r7, #6]
	return ((float)read_raw/4095.f)*3.3f;
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006680:	eddf 6a07 	vldr	s13, [pc, #28]	; 80066a0 <__SNEAK100_ADC_ConvertToVoltage+0x34>
 8006684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006688:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80066a4 <__SNEAK100_ADC_ConvertToVoltage+0x38>
 800668c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006690:	eeb0 0a67 	vmov.f32	s0, s15
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	457ff000 	.word	0x457ff000
 80066a4:	40533333 	.word	0x40533333

080066a8 <SNEAK100_ADC_GetSupplyVoltage>:

float SNEAK100_ADC_GetSupplyVoltage() {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	const uint16_t raw = adc_dma_buffer[4];
 80066ae:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <SNEAK100_ADC_GetSupplyVoltage+0x30>)
 80066b0:	891b      	ldrh	r3, [r3, #8]
 80066b2:	80fb      	strh	r3, [r7, #6]
	const float scale = (SUPPLY_VOLTAGE_DIVIDER_R1 + SUPPLY_VOLTAGE_DIVIDER_R2)/SUPPLY_VOLTAGE_DIVIDER_R2;
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <SNEAK100_ADC_GetSupplyVoltage+0x34>)
 80066b6:	603b      	str	r3, [r7, #0]
	return __SNEAK100_ADC_ConvertToVoltage(raw)*scale;
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ffd6 	bl	800666c <__SNEAK100_ADC_ConvertToVoltage>
 80066c0:	eeb0 7a40 	vmov.f32	s14, s0
 80066c4:	edd7 7a00 	vldr	s15, [r7]
 80066c8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80066cc:	eeb0 0a67 	vmov.f32	s0, s15
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000208 	.word	0x20000208
 80066dc:	40333333 	.word	0x40333333

080066e0 <SNEAK100_ADC_GetTemperature>:

float SNEAK100_ADC_GetTemperature() {
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	return __LL_ADC_CALC_TEMPERATURE(3270, adc_dma_buffer[5], LL_ADC_RESOLUTION_12B);
 80066e4:	4b13      	ldr	r3, [pc, #76]	; (8006734 <SNEAK100_ADC_GetTemperature+0x54>)
 80066e6:	895b      	ldrh	r3, [r3, #10]
 80066e8:	461a      	mov	r2, r3
 80066ea:	f640 43c6 	movw	r3, #3270	; 0xcc6
 80066ee:	fb03 f302 	mul.w	r3, r3, r2
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	4a10      	ldr	r2, [pc, #64]	; (8006738 <SNEAK100_ADC_GetTemperature+0x58>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <SNEAK100_ADC_GetTemperature+0x5c>)
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	461a      	mov	r2, r3
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <SNEAK100_ADC_GetTemperature+0x60>)
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <SNEAK100_ADC_GetTemperature+0x5c>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	1acb      	subs	r3, r1, r3
 800671a:	fb92 f3f3 	sdiv	r3, r2, r3
 800671e:	331e      	adds	r3, #30
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8006728:	eeb0 0a67 	vmov.f32	s0, s15
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20000208 	.word	0x20000208
 8006738:	09ee009f 	.word	0x09ee009f
 800673c:	1fff7a2c 	.word	0x1fff7a2c
 8006740:	1fff7a2e 	.word	0x1fff7a2e

08006744 <ssd1306_Write>:
#include "sprites.h"

Display_StructTypeDef oled;
Sneak100_GUI_StructTypeDef gui;

HAL_StatusTypeDef ssd1306_Write(uint16_t address, void *data, uint16_t len) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af04      	add	r7, sp, #16
 800674a:	4603      	mov	r3, r0
 800674c:	6039      	str	r1, [r7, #0]
 800674e:	80fb      	strh	r3, [r7, #6]
 8006750:	4613      	mov	r3, r2
 8006752:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, address, 1, data, len, 10);
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	230a      	movs	r3, #10
 8006758:	9302      	str	r3, [sp, #8]
 800675a:	88bb      	ldrh	r3, [r7, #4]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	2301      	movs	r3, #1
 8006764:	2178      	movs	r1, #120	; 0x78
 8006766:	4804      	ldr	r0, [pc, #16]	; (8006778 <ssd1306_Write+0x34>)
 8006768:	f7fd fa38 	bl	8003bdc <HAL_I2C_Mem_Write>
 800676c:	4603      	mov	r3, r0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200006d4 	.word	0x200006d4

0800677c <Display_ErrorHandler>:

void Display_ErrorHandler(const char *file, uint16_t line) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
	printf("Error in %s: %u\n", file, line);
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	461a      	mov	r2, r3
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4804      	ldr	r0, [pc, #16]	; (80067a0 <Display_ErrorHandler+0x24>)
 8006790:	f001 fcb6 	bl	8008100 <iprintf>
	Error_Handler();
 8006794:	f7fa ff6a 	bl	800166c <Error_Handler>
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	0800b864 	.word	0x0800b864

080067a4 <SNEAK100_Display_Init>:

void SNEAK100_Display_Init() {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
	Display_Init(&oled, &hi2c1);
 80067a8:	4902      	ldr	r1, [pc, #8]	; (80067b4 <SNEAK100_Display_Init+0x10>)
 80067aa:	4803      	ldr	r0, [pc, #12]	; (80067b8 <SNEAK100_Display_Init+0x14>)
 80067ac:	f7ff fd9e 	bl	80062ec <Display_Init>
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	200006d4 	.word	0x200006d4
 80067b8:	200009cc 	.word	0x200009cc

080067bc <SNEAK100_Display_Render>:
	Display_WriteString(&oled, 92, 42, Font_7x10, buffer);
	sprintf(buffer, "%+.2f", gui.velocity[3]);
	Display_WriteString(&oled, 92, 53, Font_7x10, buffer);
}

void SNEAK100_Display_Render() {
 80067bc:	b5b0      	push	{r4, r5, r7, lr}
 80067be:	b092      	sub	sp, #72	; 0x48
 80067c0:	af02      	add	r7, sp, #8
	Display_DrawBitmap(&oled, 0, 0, bitmap_sneak100_128_64, 128, 64);
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4b33      	ldr	r3, [pc, #204]	; (8006898 <SNEAK100_Display_Render+0xdc>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	4832      	ldr	r0, [pc, #200]	; (800689c <SNEAK100_Display_Render+0xe0>)
 80067d2:	f7ff fdcb 	bl	800636c <Display_DrawBitmap>

	char top_bar[32] = {0};
 80067d6:	2300      	movs	r3, #0
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	609a      	str	r2, [r3, #8]
 80067e6:	60da      	str	r2, [r3, #12]
 80067e8:	611a      	str	r2, [r3, #16]
 80067ea:	615a      	str	r2, [r3, #20]
 80067ec:	619a      	str	r2, [r3, #24]
	char bot_bar[32] = {0};
 80067ee:	2300      	movs	r3, #0
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	609a      	str	r2, [r3, #8]
 80067fc:	60da      	str	r2, [r3, #12]
 80067fe:	611a      	str	r2, [r3, #16]
 8006800:	615a      	str	r2, [r3, #20]
 8006802:	619a      	str	r2, [r3, #24]

	sprintf(top_bar, "%1.2fV         %2.f*C", gui.battery_voltage, gui.temperature);
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <SNEAK100_Display_Render+0xe4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f7f9 fe9d 	bl	8000548 <__aeabi_f2d>
 800680e:	4604      	mov	r4, r0
 8006810:	460d      	mov	r5, r1
 8006812:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <SNEAK100_Display_Render+0xe4>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f7f9 fe96 	bl	8000548 <__aeabi_f2d>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	f107 0020 	add.w	r0, r7, #32
 8006824:	e9cd 2300 	strd	r2, r3, [sp]
 8006828:	4622      	mov	r2, r4
 800682a:	462b      	mov	r3, r5
 800682c:	491d      	ldr	r1, [pc, #116]	; (80068a4 <SNEAK100_Display_Render+0xe8>)
 800682e:	f001 fc95 	bl	800815c <siprintf>
	sprintf(bot_bar, "menu");
 8006832:	463b      	mov	r3, r7
 8006834:	491c      	ldr	r1, [pc, #112]	; (80068a8 <SNEAK100_Display_Render+0xec>)
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fc90 	bl	800815c <siprintf>

	Display_WriteString(&oled, 0, 0, Font_7x10, top_bar);
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <SNEAK100_Display_Render+0xf0>)
 800683e:	f107 0220 	add.w	r2, r7, #32
 8006842:	9201      	str	r2, [sp, #4]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	9200      	str	r2, [sp, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	2100      	movs	r1, #0
 800684e:	4813      	ldr	r0, [pc, #76]	; (800689c <SNEAK100_Display_Render+0xe0>)
 8006850:	f7ff fea4 	bl	800659c <Display_WriteString>
	Display_DrawLine(&oled, 0, 10, 127, 10);
 8006854:	230a      	movs	r3, #10
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	237f      	movs	r3, #127	; 0x7f
 800685a:	220a      	movs	r2, #10
 800685c:	2100      	movs	r1, #0
 800685e:	480f      	ldr	r0, [pc, #60]	; (800689c <SNEAK100_Display_Render+0xe0>)
 8006860:	f7ff fda0 	bl	80063a4 <Display_DrawLine>



	Display_WriteString(&oled, 0, 53, Font_7x10, bot_bar);
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <SNEAK100_Display_Render+0xf0>)
 8006866:	463a      	mov	r2, r7
 8006868:	9201      	str	r2, [sp, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	9200      	str	r2, [sp, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2235      	movs	r2, #53	; 0x35
 8006872:	2100      	movs	r1, #0
 8006874:	4809      	ldr	r0, [pc, #36]	; (800689c <SNEAK100_Display_Render+0xe0>)
 8006876:	f7ff fe91 	bl	800659c <Display_WriteString>
	Display_DrawLine(&oled, 0, 53, 127, 53);
 800687a:	2335      	movs	r3, #53	; 0x35
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	237f      	movs	r3, #127	; 0x7f
 8006880:	2235      	movs	r2, #53	; 0x35
 8006882:	2100      	movs	r1, #0
 8006884:	4805      	ldr	r0, [pc, #20]	; (800689c <SNEAK100_Display_Render+0xe0>)
 8006886:	f7ff fd8d 	bl	80063a4 <Display_DrawLine>

	//live_values();

	Display_Update(&oled);
 800688a:	4804      	ldr	r0, [pc, #16]	; (800689c <SNEAK100_Display_Render+0xe0>)
 800688c:	f7ff fd50 	bl	8006330 <Display_Update>
}
 8006890:	bf00      	nop
 8006892:	3740      	adds	r7, #64	; 0x40
 8006894:	46bd      	mov	sp, r7
 8006896:	bdb0      	pop	{r4, r5, r7, pc}
 8006898:	0800b8c4 	.word	0x0800b8c4
 800689c:	200009cc 	.word	0x200009cc
 80068a0:	200009d0 	.word	0x200009d0
 80068a4:	0800b884 	.word	0x0800b884
 80068a8:	0800b89c 	.word	0x0800b89c
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
	//return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
	return ssd1306_Write(0x00, &command, 1);
 80068bc:	1cfb      	adds	r3, r7, #3
 80068be:	2201      	movs	r2, #1
 80068c0:	4619      	mov	r1, r3
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7ff ff3e 	bl	8006744 <ssd1306_Write>
 80068c8:	4603      	mov	r3, r0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80068dc:	2064      	movs	r0, #100	; 0x64
 80068de:	f7fb fde1 	bl	80024a4 <HAL_Delay>
    int status = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80068e6:	21ae      	movs	r1, #174	; 0xae
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ffe1 	bl	80068b0 <ssd1306_WriteCommand>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80068f8:	2120      	movs	r1, #32
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffd8 	bl	80068b0 <ssd1306_WriteCommand>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800690a:	2110      	movs	r1, #16
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ffcf 	bl	80068b0 <ssd1306_WriteCommand>
 8006912:	4603      	mov	r3, r0
 8006914:	461a      	mov	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800691c:	21b0      	movs	r1, #176	; 0xb0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff ffc6 	bl	80068b0 <ssd1306_WriteCommand>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800692e:	21c8      	movs	r1, #200	; 0xc8
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ffbd 	bl	80068b0 <ssd1306_WriteCommand>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ffb4 	bl	80068b0 <ssd1306_WriteCommand>
 8006948:	4603      	mov	r3, r0
 800694a:	461a      	mov	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8006952:	2110      	movs	r1, #16
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ffab 	bl	80068b0 <ssd1306_WriteCommand>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ffa2 	bl	80068b0 <ssd1306_WriteCommand>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8006976:	2181      	movs	r1, #129	; 0x81
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff ff99 	bl	80068b0 <ssd1306_WriteCommand>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8006988:	21ff      	movs	r1, #255	; 0xff
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ff90 	bl	80068b0 <ssd1306_WriteCommand>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800699a:	21a1      	movs	r1, #161	; 0xa1
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff87 	bl	80068b0 <ssd1306_WriteCommand>
 80069a2:	4603      	mov	r3, r0
 80069a4:	461a      	mov	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80069ac:	21a6      	movs	r1, #166	; 0xa6
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff ff7e 	bl	80068b0 <ssd1306_WriteCommand>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80069be:	21a8      	movs	r1, #168	; 0xa8
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff75 	bl	80068b0 <ssd1306_WriteCommand>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80069d0:	213f      	movs	r1, #63	; 0x3f
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff6c 	bl	80068b0 <ssd1306_WriteCommand>
 80069d8:	4603      	mov	r3, r0
 80069da:	461a      	mov	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80069e2:	21a4      	movs	r1, #164	; 0xa4
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff63 	bl	80068b0 <ssd1306_WriteCommand>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80069f4:	21d3      	movs	r1, #211	; 0xd3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff5a 	bl	80068b0 <ssd1306_WriteCommand>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff51 	bl	80068b0 <ssd1306_WriteCommand>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	461a      	mov	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8006a18:	21d5      	movs	r1, #213	; 0xd5
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ff48 	bl	80068b0 <ssd1306_WriteCommand>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8006a2a:	21f0      	movs	r1, #240	; 0xf0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff3f 	bl	80068b0 <ssd1306_WriteCommand>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8006a3c:	21d9      	movs	r1, #217	; 0xd9
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff36 	bl	80068b0 <ssd1306_WriteCommand>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8006a4e:	2122      	movs	r1, #34	; 0x22
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ff2d 	bl	80068b0 <ssd1306_WriteCommand>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8006a60:	21da      	movs	r1, #218	; 0xda
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff ff24 	bl	80068b0 <ssd1306_WriteCommand>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8006a72:	2112      	movs	r1, #18
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff1b 	bl	80068b0 <ssd1306_WriteCommand>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8006a84:	21db      	movs	r1, #219	; 0xdb
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ff12 	bl	80068b0 <ssd1306_WriteCommand>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8006a96:	2120      	movs	r1, #32
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff ff09 	bl	80068b0 <ssd1306_WriteCommand>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8006aa8:	218d      	movs	r1, #141	; 0x8d
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff ff00 	bl	80068b0 <ssd1306_WriteCommand>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8006aba:	2114      	movs	r1, #20
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fef7 	bl	80068b0 <ssd1306_WriteCommand>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8006acc:	21af      	movs	r1, #175	; 0xaf
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff feee 	bl	80068b0 <ssd1306_WriteCommand>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <ssd1306_Init+0x214>
        return 1;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e00f      	b.n	8006b08 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f000 f813 	bl	8006b14 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f834 	bl	8006b5c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <ssd1306_Init+0x23c>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <ssd1306_Init+0x23c>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8006b00:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <ssd1306_Init+0x23c>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	715a      	strb	r2, [r3, #5]

    return 0;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000614 	.word	0x20000614

08006b14 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e00d      	b.n	8006b40 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <ssd1306_Fill+0x1a>
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	e000      	b.n	8006b30 <ssd1306_Fill+0x1c>
 8006b2e:	21ff      	movs	r1, #255	; 0xff
 8006b30:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <ssd1306_Fill+0x44>)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	460a      	mov	r2, r1
 8006b38:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b46:	d3ed      	bcc.n	8006b24 <ssd1306_Fill+0x10>
    }
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000214 	.word	0x20000214

08006b5c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
 8006b68:	e01a      	b.n	8006ba0 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3b50      	subs	r3, #80	; 0x50
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fe9c 	bl	80068b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fe98 	bl	80068b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8006b80:	2110      	movs	r1, #16
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fe94 	bl	80068b0 <ssd1306_WriteCommand>

        //HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
        ssd1306_Write(0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <ssd1306_UpdateScreen+0x54>)
 8006b8e:	4413      	add	r3, r2
 8006b90:	2280      	movs	r2, #128	; 0x80
 8006b92:	4619      	mov	r1, r3
 8006b94:	2040      	movs	r0, #64	; 0x40
 8006b96:	f7ff fdd5 	bl	8006744 <ssd1306_Write>
    for (i = 0; i < 8; i++) {
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	2b07      	cmp	r3, #7
 8006ba4:	d9e1      	bls.n	8006b6a <ssd1306_UpdateScreen+0xe>
    }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000214 	.word	0x20000214

08006bb4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	71bb      	strb	r3, [r7, #6]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8006bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db48      	blt.n	8006c60 <ssd1306_DrawPixel+0xac>
 8006bce:	79bb      	ldrb	r3, [r7, #6]
 8006bd0:	2b3f      	cmp	r3, #63	; 0x3f
 8006bd2:	d845      	bhi.n	8006c60 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8006bd4:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <ssd1306_DrawPixel+0xb8>)
 8006bd6:	791b      	ldrb	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8006bdc:	797b      	ldrb	r3, [r7, #5]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8006bea:	797b      	ldrb	r3, [r7, #5]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d11a      	bne.n	8006c26 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006bf0:	79fa      	ldrb	r2, [r7, #7]
 8006bf2:	79bb      	ldrb	r3, [r7, #6]
 8006bf4:	08db      	lsrs	r3, r3, #3
 8006bf6:	b2d8      	uxtb	r0, r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	01db      	lsls	r3, r3, #7
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <ssd1306_DrawPixel+0xbc>)
 8006c00:	5cd3      	ldrb	r3, [r2, r3]
 8006c02:	b25a      	sxtb	r2, r3
 8006c04:	79bb      	ldrb	r3, [r7, #6]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c10:	b25b      	sxtb	r3, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	b259      	sxtb	r1, r3
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	4603      	mov	r3, r0
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	b2c9      	uxtb	r1, r1
 8006c20:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <ssd1306_DrawPixel+0xbc>)
 8006c22:	54d1      	strb	r1, [r2, r3]
 8006c24:	e01d      	b.n	8006c62 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006c26:	79fa      	ldrb	r2, [r7, #7]
 8006c28:	79bb      	ldrb	r3, [r7, #6]
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	b2d8      	uxtb	r0, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	01db      	lsls	r3, r3, #7
 8006c32:	4413      	add	r3, r2
 8006c34:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <ssd1306_DrawPixel+0xbc>)
 8006c36:	5cd3      	ldrb	r3, [r2, r3]
 8006c38:	b25a      	sxtb	r2, r3
 8006c3a:	79bb      	ldrb	r3, [r7, #6]
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	2101      	movs	r1, #1
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	b259      	sxtb	r1, r3
 8006c50:	79fa      	ldrb	r2, [r7, #7]
 8006c52:	4603      	mov	r3, r0
 8006c54:	01db      	lsls	r3, r3, #7
 8006c56:	4413      	add	r3, r2
 8006c58:	b2c9      	uxtb	r1, r1
 8006c5a:	4a05      	ldr	r2, [pc, #20]	; (8006c70 <ssd1306_DrawPixel+0xbc>)
 8006c5c:	54d1      	strb	r1, [r2, r3]
 8006c5e:	e000      	b.n	8006c62 <ssd1306_DrawPixel+0xae>
        return;
 8006c60:	bf00      	nop
    }
}
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000614 	.word	0x20000614
 8006c70:	20000214 	.word	0x20000214

08006c74 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b089      	sub	sp, #36	; 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	1d38      	adds	r0, r7, #4
 8006c7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006c82:	461a      	mov	r2, r3
 8006c84:	4623      	mov	r3, r4
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006c8c:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	793b      	ldrb	r3, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	2b7f      	cmp	r3, #127	; 0x7f
 8006c98:	dc06      	bgt.n	8006ca8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006c9c:	885b      	ldrh	r3, [r3, #2]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	797b      	ldrb	r3, [r7, #5]
 8006ca2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8006ca4:	2b3f      	cmp	r3, #63	; 0x3f
 8006ca6:	dd01      	ble.n	8006cac <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e05d      	b.n	8006d68 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e04c      	b.n	8006d4c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	3b20      	subs	r3, #32
 8006cb8:	7979      	ldrb	r1, [r7, #5]
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	440b      	add	r3, r1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e034      	b.n	8006d3c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d012      	beq.n	8006d08 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	b2d8      	uxtb	r0, r3
 8006cf0:	4b1f      	ldr	r3, [pc, #124]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006cf2:	885b      	ldrh	r3, [r3, #2]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	7bba      	ldrb	r2, [r7, #14]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f7ff ff57 	bl	8006bb4 <ssd1306_DrawPixel>
 8006d06:	e016      	b.n	8006d36 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006d08:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	b2d8      	uxtb	r0, r3
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006d18:	885b      	ldrh	r3, [r3, #2]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	4413      	add	r3, r2
 8006d22:	b2d9      	uxtb	r1, r3
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	bf0c      	ite	eq
 8006d2a:	2301      	moveq	r3, #1
 8006d2c:	2300      	movne	r3, #0
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	f7ff ff3f 	bl	8006bb4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	793b      	ldrb	r3, [r7, #4]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d3c5      	bcc.n	8006cd2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	797b      	ldrb	r3, [r7, #5]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d3ad      	bcc.n	8006cb2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006d56:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006d58:	881a      	ldrh	r2, [r3, #0]
 8006d5a:	793b      	ldrb	r3, [r7, #4]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <ssd1306_WriteChar+0xfc>)
 8006d64:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}
 8006d70:	20000614 	.word	0x20000614

08006d74 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	1d38      	adds	r0, r7, #4
 8006d7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006d82:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8006d84:	e012      	b.n	8006dac <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	7818      	ldrb	r0, [r3, #0]
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	1d3a      	adds	r2, r7, #4
 8006d8e:	ca06      	ldmia	r2, {r1, r2}
 8006d90:	f7ff ff70 	bl	8006c74 <ssd1306_WriteChar>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d002      	beq.n	8006da6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	e008      	b.n	8006db8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
    while (*str)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e8      	bne.n	8006d86 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	781b      	ldrb	r3, [r3, #0]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <ssd1306_DrawBitmap>:

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	603a      	str	r2, [r7, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	71bb      	strb	r3, [r7, #6]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8006dd6:	797b      	ldrb	r3, [r7, #5]
 8006dd8:	3307      	adds	r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da00      	bge.n	8006de0 <ssd1306_DrawBitmap+0x20>
 8006dde:	3307      	adds	r3, #7
 8006de0:	10db      	asrs	r3, r3, #3
 8006de2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db3e      	blt.n	8006e6e <ssd1306_DrawBitmap+0xae>
 8006df0:	79bb      	ldrb	r3, [r7, #6]
 8006df2:	2b3f      	cmp	r3, #63	; 0x3f
 8006df4:	d83b      	bhi.n	8006e6e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8006df6:	2300      	movs	r3, #0
 8006df8:	73bb      	strb	r3, [r7, #14]
 8006dfa:	e033      	b.n	8006e64 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	737b      	strb	r3, [r7, #13]
 8006e00:	e026      	b.n	8006e50 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e00d      	b.n	8006e30 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8006e14:	7bbb      	ldrb	r3, [r7, #14]
 8006e16:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	7b7a      	ldrb	r2, [r7, #13]
 8006e20:	08d2      	lsrs	r2, r2, #3
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	4413      	add	r3, r2
 8006e26:	461a      	mov	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8006e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da08      	bge.n	8006e4a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8006e38:	79fa      	ldrb	r2, [r7, #7]
 8006e3a:	7b7b      	ldrb	r3, [r7, #13]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	7f3a      	ldrb	r2, [r7, #28]
 8006e42:	79b9      	ldrb	r1, [r7, #6]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff feb5 	bl	8006bb4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8006e4a:	7b7b      	ldrb	r3, [r7, #13]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	737b      	strb	r3, [r7, #13]
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	797b      	ldrb	r3, [r7, #5]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3d4      	bcc.n	8006e02 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	73bb      	strb	r3, [r7, #14]
 8006e5e:	79bb      	ldrb	r3, [r7, #6]
 8006e60:	3301      	adds	r3, #1
 8006e62:	71bb      	strb	r3, [r7, #6]
 8006e64:	7bba      	ldrb	r2, [r7, #14]
 8006e66:	7e3b      	ldrb	r3, [r7, #24]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d3c7      	bcc.n	8006dfc <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8006e6c:	e000      	b.n	8006e70 <ssd1306_DrawBitmap+0xb0>
        return;
 8006e6e:	bf00      	nop
}
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460a      	mov	r2, r1
 8006e82:	71fb      	strb	r3, [r7, #7]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <ssd1306_SetCursor+0x2c>)
 8006e8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006e90:	79bb      	ldrb	r3, [r7, #6]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <ssd1306_SetCursor+0x2c>)
 8006e96:	805a      	strh	r2, [r3, #2]
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000614 	.word	0x20000614

08006ea8 <__io_putchar>:
#include "uart.h"

static UART_HandleTypeDef *uart_stdin;
static UART_HandleTypeDef *uart_stdout;

int __io_putchar(int ch) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(uart_stdout, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <__io_putchar+0x24>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	1d39      	adds	r1, r7, #4
 8006eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f7fe feab 	bl	8005c16 <HAL_UART_Transmit>
	return ch;
 8006ec0:	687b      	ldr	r3, [r7, #4]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000620 	.word	0x20000620

08006ed0 <__io_getchar>:

int __io_getchar() {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
	__HAL_UART_CLEAR_OREFLAG(uart_stdin);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <__io_getchar+0x40>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <__io_getchar+0x40>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]

	uint8_t ch = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(uart_stdin, &ch, 1, HAL_MAX_DELAY);
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <__io_getchar+0x40>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	1df9      	adds	r1, r7, #7
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006efe:	2201      	movs	r2, #1
 8006f00:	f7fe ff1b 	bl	8005d3a <HAL_UART_Receive>
	return ch;
 8006f04:	79fb      	ldrb	r3, [r7, #7]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000061c 	.word	0x2000061c

08006f14 <__assert_func>:
 8006f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f16:	4614      	mov	r4, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <__assert_func+0x2c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	68d8      	ldr	r0, [r3, #12]
 8006f22:	b14c      	cbz	r4, 8006f38 <__assert_func+0x24>
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <__assert_func+0x30>)
 8006f26:	9100      	str	r1, [sp, #0]
 8006f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f2c:	4906      	ldr	r1, [pc, #24]	; (8006f48 <__assert_func+0x34>)
 8006f2e:	462b      	mov	r3, r5
 8006f30:	f000 f814 	bl	8006f5c <fiprintf>
 8006f34:	f002 f8b6 	bl	80090a4 <abort>
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <__assert_func+0x38>)
 8006f3a:	461c      	mov	r4, r3
 8006f3c:	e7f3      	b.n	8006f26 <__assert_func+0x12>
 8006f3e:	bf00      	nop
 8006f40:	20000014 	.word	0x20000014
 8006f44:	0800c430 	.word	0x0800c430
 8006f48:	0800c43d 	.word	0x0800c43d
 8006f4c:	0800c46b 	.word	0x0800c46b

08006f50 <__errno>:
 8006f50:	4b01      	ldr	r3, [pc, #4]	; (8006f58 <__errno+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000014 	.word	0x20000014

08006f5c <fiprintf>:
 8006f5c:	b40e      	push	{r1, r2, r3}
 8006f5e:	b503      	push	{r0, r1, lr}
 8006f60:	4601      	mov	r1, r0
 8006f62:	ab03      	add	r3, sp, #12
 8006f64:	4805      	ldr	r0, [pc, #20]	; (8006f7c <fiprintf+0x20>)
 8006f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	f000 f91d 	bl	80071ac <_vfiprintf_r>
 8006f72:	b002      	add	sp, #8
 8006f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f78:	b003      	add	sp, #12
 8006f7a:	4770      	bx	lr
 8006f7c:	20000014 	.word	0x20000014

08006f80 <__libc_init_array>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4d0d      	ldr	r5, [pc, #52]	; (8006fb8 <__libc_init_array+0x38>)
 8006f84:	4c0d      	ldr	r4, [pc, #52]	; (8006fbc <__libc_init_array+0x3c>)
 8006f86:	1b64      	subs	r4, r4, r5
 8006f88:	10a4      	asrs	r4, r4, #2
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	d109      	bne.n	8006fa4 <__libc_init_array+0x24>
 8006f90:	4d0b      	ldr	r5, [pc, #44]	; (8006fc0 <__libc_init_array+0x40>)
 8006f92:	4c0c      	ldr	r4, [pc, #48]	; (8006fc4 <__libc_init_array+0x44>)
 8006f94:	f004 fc28 	bl	800b7e8 <_init>
 8006f98:	1b64      	subs	r4, r4, r5
 8006f9a:	10a4      	asrs	r4, r4, #2
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	42a6      	cmp	r6, r4
 8006fa0:	d105      	bne.n	8006fae <__libc_init_array+0x2e>
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa8:	4798      	blx	r3
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7ee      	b.n	8006f8c <__libc_init_array+0xc>
 8006fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb2:	4798      	blx	r3
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	e7f2      	b.n	8006f9e <__libc_init_array+0x1e>
 8006fb8:	0800c8ec 	.word	0x0800c8ec
 8006fbc:	0800c8ec 	.word	0x0800c8ec
 8006fc0:	0800c8ec 	.word	0x0800c8ec
 8006fc4:	0800c8f0 	.word	0x0800c8f0

08006fc8 <malloc>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <malloc+0xc>)
 8006fca:	4601      	mov	r1, r0
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f000 b869 	b.w	80070a4 <_malloc_r>
 8006fd2:	bf00      	nop
 8006fd4:	20000014 	.word	0x20000014

08006fd8 <memcpy>:
 8006fd8:	440a      	add	r2, r1
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fe0:	d100      	bne.n	8006fe4 <memcpy+0xc>
 8006fe2:	4770      	bx	lr
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fee:	4291      	cmp	r1, r2
 8006ff0:	d1f9      	bne.n	8006fe6 <memcpy+0xe>
 8006ff2:	bd10      	pop	{r4, pc}

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <_free_r>:
 8007004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007006:	2900      	cmp	r1, #0
 8007008:	d048      	beq.n	800709c <_free_r+0x98>
 800700a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700e:	9001      	str	r0, [sp, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f1a1 0404 	sub.w	r4, r1, #4
 8007016:	bfb8      	it	lt
 8007018:	18e4      	addlt	r4, r4, r3
 800701a:	f003 fc7f 	bl	800a91c <__malloc_lock>
 800701e:	4a20      	ldr	r2, [pc, #128]	; (80070a0 <_free_r+0x9c>)
 8007020:	9801      	ldr	r0, [sp, #4]
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	4615      	mov	r5, r2
 8007026:	b933      	cbnz	r3, 8007036 <_free_r+0x32>
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	6014      	str	r4, [r2, #0]
 800702c:	b003      	add	sp, #12
 800702e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007032:	f003 bc79 	b.w	800a928 <__malloc_unlock>
 8007036:	42a3      	cmp	r3, r4
 8007038:	d90b      	bls.n	8007052 <_free_r+0x4e>
 800703a:	6821      	ldr	r1, [r4, #0]
 800703c:	1862      	adds	r2, r4, r1
 800703e:	4293      	cmp	r3, r2
 8007040:	bf04      	itt	eq
 8007042:	681a      	ldreq	r2, [r3, #0]
 8007044:	685b      	ldreq	r3, [r3, #4]
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	bf04      	itt	eq
 800704a:	1852      	addeq	r2, r2, r1
 800704c:	6022      	streq	r2, [r4, #0]
 800704e:	602c      	str	r4, [r5, #0]
 8007050:	e7ec      	b.n	800702c <_free_r+0x28>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x58>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x4e>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1855      	adds	r5, r2, r1
 8007060:	42a5      	cmp	r5, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x78>
 8007064:	6824      	ldr	r4, [r4, #0]
 8007066:	4421      	add	r1, r4
 8007068:	1854      	adds	r4, r2, r1
 800706a:	42a3      	cmp	r3, r4
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1dd      	bne.n	800702c <_free_r+0x28>
 8007070:	681c      	ldr	r4, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	4421      	add	r1, r4
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	e7d7      	b.n	800702c <_free_r+0x28>
 800707c:	d902      	bls.n	8007084 <_free_r+0x80>
 800707e:	230c      	movs	r3, #12
 8007080:	6003      	str	r3, [r0, #0]
 8007082:	e7d3      	b.n	800702c <_free_r+0x28>
 8007084:	6825      	ldr	r5, [r4, #0]
 8007086:	1961      	adds	r1, r4, r5
 8007088:	428b      	cmp	r3, r1
 800708a:	bf04      	itt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1949      	addeq	r1, r1, r5
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	6054      	str	r4, [r2, #4]
 800709a:	e7c7      	b.n	800702c <_free_r+0x28>
 800709c:	b003      	add	sp, #12
 800709e:	bd30      	pop	{r4, r5, pc}
 80070a0:	20000624 	.word	0x20000624

080070a4 <_malloc_r>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	1ccd      	adds	r5, r1, #3
 80070a8:	f025 0503 	bic.w	r5, r5, #3
 80070ac:	3508      	adds	r5, #8
 80070ae:	2d0c      	cmp	r5, #12
 80070b0:	bf38      	it	cc
 80070b2:	250c      	movcc	r5, #12
 80070b4:	2d00      	cmp	r5, #0
 80070b6:	4606      	mov	r6, r0
 80070b8:	db01      	blt.n	80070be <_malloc_r+0x1a>
 80070ba:	42a9      	cmp	r1, r5
 80070bc:	d903      	bls.n	80070c6 <_malloc_r+0x22>
 80070be:	230c      	movs	r3, #12
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	2000      	movs	r0, #0
 80070c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c6:	f003 fc29 	bl	800a91c <__malloc_lock>
 80070ca:	4921      	ldr	r1, [pc, #132]	; (8007150 <_malloc_r+0xac>)
 80070cc:	680a      	ldr	r2, [r1, #0]
 80070ce:	4614      	mov	r4, r2
 80070d0:	b99c      	cbnz	r4, 80070fa <_malloc_r+0x56>
 80070d2:	4f20      	ldr	r7, [pc, #128]	; (8007154 <_malloc_r+0xb0>)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	b923      	cbnz	r3, 80070e2 <_malloc_r+0x3e>
 80070d8:	4621      	mov	r1, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	f001 f828 	bl	8008130 <_sbrk_r>
 80070e0:	6038      	str	r0, [r7, #0]
 80070e2:	4629      	mov	r1, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	f001 f823 	bl	8008130 <_sbrk_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	d123      	bne.n	8007136 <_malloc_r+0x92>
 80070ee:	230c      	movs	r3, #12
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	4630      	mov	r0, r6
 80070f4:	f003 fc18 	bl	800a928 <__malloc_unlock>
 80070f8:	e7e3      	b.n	80070c2 <_malloc_r+0x1e>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	1b5b      	subs	r3, r3, r5
 80070fe:	d417      	bmi.n	8007130 <_malloc_r+0x8c>
 8007100:	2b0b      	cmp	r3, #11
 8007102:	d903      	bls.n	800710c <_malloc_r+0x68>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	441c      	add	r4, r3
 8007108:	6025      	str	r5, [r4, #0]
 800710a:	e004      	b.n	8007116 <_malloc_r+0x72>
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	42a2      	cmp	r2, r4
 8007110:	bf0c      	ite	eq
 8007112:	600b      	streq	r3, [r1, #0]
 8007114:	6053      	strne	r3, [r2, #4]
 8007116:	4630      	mov	r0, r6
 8007118:	f003 fc06 	bl	800a928 <__malloc_unlock>
 800711c:	f104 000b 	add.w	r0, r4, #11
 8007120:	1d23      	adds	r3, r4, #4
 8007122:	f020 0007 	bic.w	r0, r0, #7
 8007126:	1ac2      	subs	r2, r0, r3
 8007128:	d0cc      	beq.n	80070c4 <_malloc_r+0x20>
 800712a:	1a1b      	subs	r3, r3, r0
 800712c:	50a3      	str	r3, [r4, r2]
 800712e:	e7c9      	b.n	80070c4 <_malloc_r+0x20>
 8007130:	4622      	mov	r2, r4
 8007132:	6864      	ldr	r4, [r4, #4]
 8007134:	e7cc      	b.n	80070d0 <_malloc_r+0x2c>
 8007136:	1cc4      	adds	r4, r0, #3
 8007138:	f024 0403 	bic.w	r4, r4, #3
 800713c:	42a0      	cmp	r0, r4
 800713e:	d0e3      	beq.n	8007108 <_malloc_r+0x64>
 8007140:	1a21      	subs	r1, r4, r0
 8007142:	4630      	mov	r0, r6
 8007144:	f000 fff4 	bl	8008130 <_sbrk_r>
 8007148:	3001      	adds	r0, #1
 800714a:	d1dd      	bne.n	8007108 <_malloc_r+0x64>
 800714c:	e7cf      	b.n	80070ee <_malloc_r+0x4a>
 800714e:	bf00      	nop
 8007150:	20000624 	.word	0x20000624
 8007154:	20000628 	.word	0x20000628

08007158 <__sfputc_r>:
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	b410      	push	{r4}
 8007160:	6093      	str	r3, [r2, #8]
 8007162:	da08      	bge.n	8007176 <__sfputc_r+0x1e>
 8007164:	6994      	ldr	r4, [r2, #24]
 8007166:	42a3      	cmp	r3, r4
 8007168:	db01      	blt.n	800716e <__sfputc_r+0x16>
 800716a:	290a      	cmp	r1, #10
 800716c:	d103      	bne.n	8007176 <__sfputc_r+0x1e>
 800716e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007172:	f001 bed7 	b.w	8008f24 <__swbuf_r>
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	1c58      	adds	r0, r3, #1
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	7019      	strb	r1, [r3, #0]
 800717e:	4608      	mov	r0, r1
 8007180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007184:	4770      	bx	lr

08007186 <__sfputs_r>:
 8007186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4614      	mov	r4, r2
 800718e:	18d5      	adds	r5, r2, r3
 8007190:	42ac      	cmp	r4, r5
 8007192:	d101      	bne.n	8007198 <__sfputs_r+0x12>
 8007194:	2000      	movs	r0, #0
 8007196:	e007      	b.n	80071a8 <__sfputs_r+0x22>
 8007198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719c:	463a      	mov	r2, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffda 	bl	8007158 <__sfputc_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d1f3      	bne.n	8007190 <__sfputs_r+0xa>
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ac <_vfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	b09d      	sub	sp, #116	; 0x74
 80071b4:	4614      	mov	r4, r2
 80071b6:	4698      	mov	r8, r3
 80071b8:	4606      	mov	r6, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_vfiprintf_r+0x18>
 80071bc:	6983      	ldr	r3, [r0, #24]
 80071be:	b90b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x18>
 80071c0:	f002 ff08 	bl	8009fd4 <__sinit>
 80071c4:	4b89      	ldr	r3, [pc, #548]	; (80073ec <_vfiprintf_r+0x240>)
 80071c6:	429d      	cmp	r5, r3
 80071c8:	d11b      	bne.n	8007202 <_vfiprintf_r+0x56>
 80071ca:	6875      	ldr	r5, [r6, #4]
 80071cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ce:	07d9      	lsls	r1, r3, #31
 80071d0:	d405      	bmi.n	80071de <_vfiprintf_r+0x32>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	059a      	lsls	r2, r3, #22
 80071d6:	d402      	bmi.n	80071de <_vfiprintf_r+0x32>
 80071d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071da:	f003 fb0c 	bl	800a7f6 <__retarget_lock_acquire_recursive>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	071b      	lsls	r3, r3, #28
 80071e2:	d501      	bpl.n	80071e8 <_vfiprintf_r+0x3c>
 80071e4:	692b      	ldr	r3, [r5, #16]
 80071e6:	b9eb      	cbnz	r3, 8007224 <_vfiprintf_r+0x78>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4630      	mov	r0, r6
 80071ec:	f001 feec 	bl	8008fc8 <__swsetup_r>
 80071f0:	b1c0      	cbz	r0, 8007224 <_vfiprintf_r+0x78>
 80071f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f4:	07dc      	lsls	r4, r3, #31
 80071f6:	d50e      	bpl.n	8007216 <_vfiprintf_r+0x6a>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fc:	b01d      	add	sp, #116	; 0x74
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	4b7b      	ldr	r3, [pc, #492]	; (80073f0 <_vfiprintf_r+0x244>)
 8007204:	429d      	cmp	r5, r3
 8007206:	d101      	bne.n	800720c <_vfiprintf_r+0x60>
 8007208:	68b5      	ldr	r5, [r6, #8]
 800720a:	e7df      	b.n	80071cc <_vfiprintf_r+0x20>
 800720c:	4b79      	ldr	r3, [pc, #484]	; (80073f4 <_vfiprintf_r+0x248>)
 800720e:	429d      	cmp	r5, r3
 8007210:	bf08      	it	eq
 8007212:	68f5      	ldreq	r5, [r6, #12]
 8007214:	e7da      	b.n	80071cc <_vfiprintf_r+0x20>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	0598      	lsls	r0, r3, #22
 800721a:	d4ed      	bmi.n	80071f8 <_vfiprintf_r+0x4c>
 800721c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721e:	f003 faeb 	bl	800a7f8 <__retarget_lock_release_recursive>
 8007222:	e7e9      	b.n	80071f8 <_vfiprintf_r+0x4c>
 8007224:	2300      	movs	r3, #0
 8007226:	9309      	str	r3, [sp, #36]	; 0x24
 8007228:	2320      	movs	r3, #32
 800722a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800722e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007232:	2330      	movs	r3, #48	; 0x30
 8007234:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073f8 <_vfiprintf_r+0x24c>
 8007238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800723c:	f04f 0901 	mov.w	r9, #1
 8007240:	4623      	mov	r3, r4
 8007242:	469a      	mov	sl, r3
 8007244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007248:	b10a      	cbz	r2, 800724e <_vfiprintf_r+0xa2>
 800724a:	2a25      	cmp	r2, #37	; 0x25
 800724c:	d1f9      	bne.n	8007242 <_vfiprintf_r+0x96>
 800724e:	ebba 0b04 	subs.w	fp, sl, r4
 8007252:	d00b      	beq.n	800726c <_vfiprintf_r+0xc0>
 8007254:	465b      	mov	r3, fp
 8007256:	4622      	mov	r2, r4
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f7ff ff93 	bl	8007186 <__sfputs_r>
 8007260:	3001      	adds	r0, #1
 8007262:	f000 80aa 	beq.w	80073ba <_vfiprintf_r+0x20e>
 8007266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007268:	445a      	add	r2, fp
 800726a:	9209      	str	r2, [sp, #36]	; 0x24
 800726c:	f89a 3000 	ldrb.w	r3, [sl]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80a2 	beq.w	80073ba <_vfiprintf_r+0x20e>
 8007276:	2300      	movs	r3, #0
 8007278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800727c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007280:	f10a 0a01 	add.w	sl, sl, #1
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	9307      	str	r3, [sp, #28]
 8007288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800728c:	931a      	str	r3, [sp, #104]	; 0x68
 800728e:	4654      	mov	r4, sl
 8007290:	2205      	movs	r2, #5
 8007292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007296:	4858      	ldr	r0, [pc, #352]	; (80073f8 <_vfiprintf_r+0x24c>)
 8007298:	f7f8 ffa2 	bl	80001e0 <memchr>
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	b9d8      	cbnz	r0, 80072d8 <_vfiprintf_r+0x12c>
 80072a0:	06d1      	lsls	r1, r2, #27
 80072a2:	bf44      	itt	mi
 80072a4:	2320      	movmi	r3, #32
 80072a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072aa:	0713      	lsls	r3, r2, #28
 80072ac:	bf44      	itt	mi
 80072ae:	232b      	movmi	r3, #43	; 0x2b
 80072b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b4:	f89a 3000 	ldrb.w	r3, [sl]
 80072b8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ba:	d015      	beq.n	80072e8 <_vfiprintf_r+0x13c>
 80072bc:	9a07      	ldr	r2, [sp, #28]
 80072be:	4654      	mov	r4, sl
 80072c0:	2000      	movs	r0, #0
 80072c2:	f04f 0c0a 	mov.w	ip, #10
 80072c6:	4621      	mov	r1, r4
 80072c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072cc:	3b30      	subs	r3, #48	; 0x30
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d94e      	bls.n	8007370 <_vfiprintf_r+0x1c4>
 80072d2:	b1b0      	cbz	r0, 8007302 <_vfiprintf_r+0x156>
 80072d4:	9207      	str	r2, [sp, #28]
 80072d6:	e014      	b.n	8007302 <_vfiprintf_r+0x156>
 80072d8:	eba0 0308 	sub.w	r3, r0, r8
 80072dc:	fa09 f303 	lsl.w	r3, r9, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	46a2      	mov	sl, r4
 80072e6:	e7d2      	b.n	800728e <_vfiprintf_r+0xe2>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	1d19      	adds	r1, r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	9103      	str	r1, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bfbb      	ittet	lt
 80072f4:	425b      	neglt	r3, r3
 80072f6:	f042 0202 	orrlt.w	r2, r2, #2
 80072fa:	9307      	strge	r3, [sp, #28]
 80072fc:	9307      	strlt	r3, [sp, #28]
 80072fe:	bfb8      	it	lt
 8007300:	9204      	strlt	r2, [sp, #16]
 8007302:	7823      	ldrb	r3, [r4, #0]
 8007304:	2b2e      	cmp	r3, #46	; 0x2e
 8007306:	d10c      	bne.n	8007322 <_vfiprintf_r+0x176>
 8007308:	7863      	ldrb	r3, [r4, #1]
 800730a:	2b2a      	cmp	r3, #42	; 0x2a
 800730c:	d135      	bne.n	800737a <_vfiprintf_r+0x1ce>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	9203      	str	r2, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfb8      	it	lt
 800731a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800731e:	3402      	adds	r4, #2
 8007320:	9305      	str	r3, [sp, #20]
 8007322:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007408 <_vfiprintf_r+0x25c>
 8007326:	7821      	ldrb	r1, [r4, #0]
 8007328:	2203      	movs	r2, #3
 800732a:	4650      	mov	r0, sl
 800732c:	f7f8 ff58 	bl	80001e0 <memchr>
 8007330:	b140      	cbz	r0, 8007344 <_vfiprintf_r+0x198>
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	eba0 000a 	sub.w	r0, r0, sl
 8007338:	fa03 f000 	lsl.w	r0, r3, r0
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	4303      	orrs	r3, r0
 8007340:	3401      	adds	r4, #1
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007348:	482c      	ldr	r0, [pc, #176]	; (80073fc <_vfiprintf_r+0x250>)
 800734a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800734e:	2206      	movs	r2, #6
 8007350:	f7f8 ff46 	bl	80001e0 <memchr>
 8007354:	2800      	cmp	r0, #0
 8007356:	d03f      	beq.n	80073d8 <_vfiprintf_r+0x22c>
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <_vfiprintf_r+0x254>)
 800735a:	bb1b      	cbnz	r3, 80073a4 <_vfiprintf_r+0x1f8>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	3307      	adds	r3, #7
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	3308      	adds	r3, #8
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	443b      	add	r3, r7
 800736c:	9309      	str	r3, [sp, #36]	; 0x24
 800736e:	e767      	b.n	8007240 <_vfiprintf_r+0x94>
 8007370:	fb0c 3202 	mla	r2, ip, r2, r3
 8007374:	460c      	mov	r4, r1
 8007376:	2001      	movs	r0, #1
 8007378:	e7a5      	b.n	80072c6 <_vfiprintf_r+0x11a>
 800737a:	2300      	movs	r3, #0
 800737c:	3401      	adds	r4, #1
 800737e:	9305      	str	r3, [sp, #20]
 8007380:	4619      	mov	r1, r3
 8007382:	f04f 0c0a 	mov.w	ip, #10
 8007386:	4620      	mov	r0, r4
 8007388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800738c:	3a30      	subs	r2, #48	; 0x30
 800738e:	2a09      	cmp	r2, #9
 8007390:	d903      	bls.n	800739a <_vfiprintf_r+0x1ee>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0c5      	beq.n	8007322 <_vfiprintf_r+0x176>
 8007396:	9105      	str	r1, [sp, #20]
 8007398:	e7c3      	b.n	8007322 <_vfiprintf_r+0x176>
 800739a:	fb0c 2101 	mla	r1, ip, r1, r2
 800739e:	4604      	mov	r4, r0
 80073a0:	2301      	movs	r3, #1
 80073a2:	e7f0      	b.n	8007386 <_vfiprintf_r+0x1da>
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <_vfiprintf_r+0x258>)
 80073ac:	a904      	add	r1, sp, #16
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 f8cc 	bl	800754c <_printf_float>
 80073b4:	4607      	mov	r7, r0
 80073b6:	1c78      	adds	r0, r7, #1
 80073b8:	d1d6      	bne.n	8007368 <_vfiprintf_r+0x1bc>
 80073ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d405      	bmi.n	80073cc <_vfiprintf_r+0x220>
 80073c0:	89ab      	ldrh	r3, [r5, #12]
 80073c2:	059a      	lsls	r2, r3, #22
 80073c4:	d402      	bmi.n	80073cc <_vfiprintf_r+0x220>
 80073c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073c8:	f003 fa16 	bl	800a7f8 <__retarget_lock_release_recursive>
 80073cc:	89ab      	ldrh	r3, [r5, #12]
 80073ce:	065b      	lsls	r3, r3, #25
 80073d0:	f53f af12 	bmi.w	80071f8 <_vfiprintf_r+0x4c>
 80073d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d6:	e711      	b.n	80071fc <_vfiprintf_r+0x50>
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	462a      	mov	r2, r5
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <_vfiprintf_r+0x258>)
 80073e0:	a904      	add	r1, sp, #16
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 fb56 	bl	8007a94 <_printf_i>
 80073e8:	e7e4      	b.n	80073b4 <_vfiprintf_r+0x208>
 80073ea:	bf00      	nop
 80073ec:	0800c6c8 	.word	0x0800c6c8
 80073f0:	0800c6e8 	.word	0x0800c6e8
 80073f4:	0800c6a8 	.word	0x0800c6a8
 80073f8:	0800c470 	.word	0x0800c470
 80073fc:	0800c47a 	.word	0x0800c47a
 8007400:	0800754d 	.word	0x0800754d
 8007404:	08007187 	.word	0x08007187
 8007408:	0800c476 	.word	0x0800c476

0800740c <__cvt>:
 800740c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	ec55 4b10 	vmov	r4, r5, d0
 8007414:	2d00      	cmp	r5, #0
 8007416:	460e      	mov	r6, r1
 8007418:	4619      	mov	r1, r3
 800741a:	462b      	mov	r3, r5
 800741c:	bfbb      	ittet	lt
 800741e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007422:	461d      	movlt	r5, r3
 8007424:	2300      	movge	r3, #0
 8007426:	232d      	movlt	r3, #45	; 0x2d
 8007428:	700b      	strb	r3, [r1, #0]
 800742a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800742c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007430:	4691      	mov	r9, r2
 8007432:	f023 0820 	bic.w	r8, r3, #32
 8007436:	bfbc      	itt	lt
 8007438:	4622      	movlt	r2, r4
 800743a:	4614      	movlt	r4, r2
 800743c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007440:	d005      	beq.n	800744e <__cvt+0x42>
 8007442:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007446:	d100      	bne.n	800744a <__cvt+0x3e>
 8007448:	3601      	adds	r6, #1
 800744a:	2102      	movs	r1, #2
 800744c:	e000      	b.n	8007450 <__cvt+0x44>
 800744e:	2103      	movs	r1, #3
 8007450:	ab03      	add	r3, sp, #12
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	ab02      	add	r3, sp, #8
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	ec45 4b10 	vmov	d0, r4, r5
 800745c:	4653      	mov	r3, sl
 800745e:	4632      	mov	r2, r6
 8007460:	f001 feb2 	bl	80091c8 <_dtoa_r>
 8007464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007468:	4607      	mov	r7, r0
 800746a:	d102      	bne.n	8007472 <__cvt+0x66>
 800746c:	f019 0f01 	tst.w	r9, #1
 8007470:	d022      	beq.n	80074b8 <__cvt+0xac>
 8007472:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007476:	eb07 0906 	add.w	r9, r7, r6
 800747a:	d110      	bne.n	800749e <__cvt+0x92>
 800747c:	783b      	ldrb	r3, [r7, #0]
 800747e:	2b30      	cmp	r3, #48	; 0x30
 8007480:	d10a      	bne.n	8007498 <__cvt+0x8c>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f7f9 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800748e:	b918      	cbnz	r0, 8007498 <__cvt+0x8c>
 8007490:	f1c6 0601 	rsb	r6, r6, #1
 8007494:	f8ca 6000 	str.w	r6, [sl]
 8007498:	f8da 3000 	ldr.w	r3, [sl]
 800749c:	4499      	add	r9, r3
 800749e:	2200      	movs	r2, #0
 80074a0:	2300      	movs	r3, #0
 80074a2:	4620      	mov	r0, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7f9 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80074aa:	b108      	cbz	r0, 80074b0 <__cvt+0xa4>
 80074ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80074b0:	2230      	movs	r2, #48	; 0x30
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	454b      	cmp	r3, r9
 80074b6:	d307      	bcc.n	80074c8 <__cvt+0xbc>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074bc:	1bdb      	subs	r3, r3, r7
 80074be:	4638      	mov	r0, r7
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	b004      	add	sp, #16
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	9103      	str	r1, [sp, #12]
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e7f0      	b.n	80074b2 <__cvt+0xa6>

080074d0 <__exponent>:
 80074d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074d2:	4603      	mov	r3, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	bfb8      	it	lt
 80074d8:	4249      	neglt	r1, r1
 80074da:	f803 2b02 	strb.w	r2, [r3], #2
 80074de:	bfb4      	ite	lt
 80074e0:	222d      	movlt	r2, #45	; 0x2d
 80074e2:	222b      	movge	r2, #43	; 0x2b
 80074e4:	2909      	cmp	r1, #9
 80074e6:	7042      	strb	r2, [r0, #1]
 80074e8:	dd2a      	ble.n	8007540 <__exponent+0x70>
 80074ea:	f10d 0407 	add.w	r4, sp, #7
 80074ee:	46a4      	mov	ip, r4
 80074f0:	270a      	movs	r7, #10
 80074f2:	46a6      	mov	lr, r4
 80074f4:	460a      	mov	r2, r1
 80074f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80074fa:	fb07 1516 	mls	r5, r7, r6, r1
 80074fe:	3530      	adds	r5, #48	; 0x30
 8007500:	2a63      	cmp	r2, #99	; 0x63
 8007502:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007506:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800750a:	4631      	mov	r1, r6
 800750c:	dcf1      	bgt.n	80074f2 <__exponent+0x22>
 800750e:	3130      	adds	r1, #48	; 0x30
 8007510:	f1ae 0502 	sub.w	r5, lr, #2
 8007514:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007518:	1c44      	adds	r4, r0, #1
 800751a:	4629      	mov	r1, r5
 800751c:	4561      	cmp	r1, ip
 800751e:	d30a      	bcc.n	8007536 <__exponent+0x66>
 8007520:	f10d 0209 	add.w	r2, sp, #9
 8007524:	eba2 020e 	sub.w	r2, r2, lr
 8007528:	4565      	cmp	r5, ip
 800752a:	bf88      	it	hi
 800752c:	2200      	movhi	r2, #0
 800752e:	4413      	add	r3, r2
 8007530:	1a18      	subs	r0, r3, r0
 8007532:	b003      	add	sp, #12
 8007534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800753e:	e7ed      	b.n	800751c <__exponent+0x4c>
 8007540:	2330      	movs	r3, #48	; 0x30
 8007542:	3130      	adds	r1, #48	; 0x30
 8007544:	7083      	strb	r3, [r0, #2]
 8007546:	70c1      	strb	r1, [r0, #3]
 8007548:	1d03      	adds	r3, r0, #4
 800754a:	e7f1      	b.n	8007530 <__exponent+0x60>

0800754c <_printf_float>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	ed2d 8b02 	vpush	{d8}
 8007554:	b08d      	sub	sp, #52	; 0x34
 8007556:	460c      	mov	r4, r1
 8007558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800755c:	4616      	mov	r6, r2
 800755e:	461f      	mov	r7, r3
 8007560:	4605      	mov	r5, r0
 8007562:	f003 f943 	bl	800a7ec <_localeconv_r>
 8007566:	f8d0 a000 	ldr.w	sl, [r0]
 800756a:	4650      	mov	r0, sl
 800756c:	f7f8 fe30 	bl	80001d0 <strlen>
 8007570:	2300      	movs	r3, #0
 8007572:	930a      	str	r3, [sp, #40]	; 0x28
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	9305      	str	r3, [sp, #20]
 8007578:	f8d8 3000 	ldr.w	r3, [r8]
 800757c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007580:	3307      	adds	r3, #7
 8007582:	f023 0307 	bic.w	r3, r3, #7
 8007586:	f103 0208 	add.w	r2, r3, #8
 800758a:	f8c8 2000 	str.w	r2, [r8]
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007596:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800759a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80075a4:	ee08 0a10 	vmov	s16, r0
 80075a8:	4b9f      	ldr	r3, [pc, #636]	; (8007828 <_printf_float+0x2dc>)
 80075aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	f7f9 fabb 	bl	8000b2c <__aeabi_dcmpun>
 80075b6:	bb88      	cbnz	r0, 800761c <_printf_float+0xd0>
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	4b9a      	ldr	r3, [pc, #616]	; (8007828 <_printf_float+0x2dc>)
 80075be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075c2:	f7f9 fa95 	bl	8000af0 <__aeabi_dcmple>
 80075c6:	bb48      	cbnz	r0, 800761c <_printf_float+0xd0>
 80075c8:	2200      	movs	r2, #0
 80075ca:	2300      	movs	r3, #0
 80075cc:	4640      	mov	r0, r8
 80075ce:	4649      	mov	r1, r9
 80075d0:	f7f9 fa84 	bl	8000adc <__aeabi_dcmplt>
 80075d4:	b110      	cbz	r0, 80075dc <_printf_float+0x90>
 80075d6:	232d      	movs	r3, #45	; 0x2d
 80075d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075dc:	4b93      	ldr	r3, [pc, #588]	; (800782c <_printf_float+0x2e0>)
 80075de:	4894      	ldr	r0, [pc, #592]	; (8007830 <_printf_float+0x2e4>)
 80075e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075e4:	bf94      	ite	ls
 80075e6:	4698      	movls	r8, r3
 80075e8:	4680      	movhi	r8, r0
 80075ea:	2303      	movs	r3, #3
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	f023 0204 	bic.w	r2, r3, #4
 80075f4:	6022      	str	r2, [r4, #0]
 80075f6:	f04f 0900 	mov.w	r9, #0
 80075fa:	9700      	str	r7, [sp, #0]
 80075fc:	4633      	mov	r3, r6
 80075fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007600:	4621      	mov	r1, r4
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f9d8 	bl	80079b8 <_printf_common>
 8007608:	3001      	adds	r0, #1
 800760a:	f040 8090 	bne.w	800772e <_printf_float+0x1e2>
 800760e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007612:	b00d      	add	sp, #52	; 0x34
 8007614:	ecbd 8b02 	vpop	{d8}
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761c:	4642      	mov	r2, r8
 800761e:	464b      	mov	r3, r9
 8007620:	4640      	mov	r0, r8
 8007622:	4649      	mov	r1, r9
 8007624:	f7f9 fa82 	bl	8000b2c <__aeabi_dcmpun>
 8007628:	b140      	cbz	r0, 800763c <_printf_float+0xf0>
 800762a:	464b      	mov	r3, r9
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbc      	itt	lt
 8007630:	232d      	movlt	r3, #45	; 0x2d
 8007632:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007636:	487f      	ldr	r0, [pc, #508]	; (8007834 <_printf_float+0x2e8>)
 8007638:	4b7f      	ldr	r3, [pc, #508]	; (8007838 <_printf_float+0x2ec>)
 800763a:	e7d1      	b.n	80075e0 <_printf_float+0x94>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007642:	9206      	str	r2, [sp, #24]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	d13f      	bne.n	80076c8 <_printf_float+0x17c>
 8007648:	2306      	movs	r3, #6
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	6861      	ldr	r1, [r4, #4]
 8007650:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007654:	2300      	movs	r3, #0
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	ab0a      	add	r3, sp, #40	; 0x28
 800765a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800765e:	ab09      	add	r3, sp, #36	; 0x24
 8007660:	ec49 8b10 	vmov	d0, r8, r9
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800766c:	4628      	mov	r0, r5
 800766e:	f7ff fecd 	bl	800740c <__cvt>
 8007672:	9b06      	ldr	r3, [sp, #24]
 8007674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007676:	2b47      	cmp	r3, #71	; 0x47
 8007678:	4680      	mov	r8, r0
 800767a:	d108      	bne.n	800768e <_printf_float+0x142>
 800767c:	1cc8      	adds	r0, r1, #3
 800767e:	db02      	blt.n	8007686 <_printf_float+0x13a>
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	4299      	cmp	r1, r3
 8007684:	dd41      	ble.n	800770a <_printf_float+0x1be>
 8007686:	f1ab 0b02 	sub.w	fp, fp, #2
 800768a:	fa5f fb8b 	uxtb.w	fp, fp
 800768e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007692:	d820      	bhi.n	80076d6 <_printf_float+0x18a>
 8007694:	3901      	subs	r1, #1
 8007696:	465a      	mov	r2, fp
 8007698:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800769c:	9109      	str	r1, [sp, #36]	; 0x24
 800769e:	f7ff ff17 	bl	80074d0 <__exponent>
 80076a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a4:	1813      	adds	r3, r2, r0
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	4681      	mov	r9, r0
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	dc02      	bgt.n	80076b4 <_printf_float+0x168>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d2      	lsls	r2, r2, #31
 80076b2:	d501      	bpl.n	80076b8 <_printf_float+0x16c>
 80076b4:	3301      	adds	r3, #1
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d09c      	beq.n	80075fa <_printf_float+0xae>
 80076c0:	232d      	movs	r3, #45	; 0x2d
 80076c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c6:	e798      	b.n	80075fa <_printf_float+0xae>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	2a47      	cmp	r2, #71	; 0x47
 80076cc:	d1be      	bne.n	800764c <_printf_float+0x100>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1bc      	bne.n	800764c <_printf_float+0x100>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7b9      	b.n	800764a <_printf_float+0xfe>
 80076d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076da:	d118      	bne.n	800770e <_printf_float+0x1c2>
 80076dc:	2900      	cmp	r1, #0
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	dd0b      	ble.n	80076fa <_printf_float+0x1ae>
 80076e2:	6121      	str	r1, [r4, #16]
 80076e4:	b913      	cbnz	r3, 80076ec <_printf_float+0x1a0>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	07d0      	lsls	r0, r2, #31
 80076ea:	d502      	bpl.n	80076f2 <_printf_float+0x1a6>
 80076ec:	3301      	adds	r3, #1
 80076ee:	440b      	add	r3, r1
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80076f4:	f04f 0900 	mov.w	r9, #0
 80076f8:	e7de      	b.n	80076b8 <_printf_float+0x16c>
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x1b6>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d2      	lsls	r2, r2, #31
 8007700:	d501      	bpl.n	8007706 <_printf_float+0x1ba>
 8007702:	3302      	adds	r3, #2
 8007704:	e7f4      	b.n	80076f0 <_printf_float+0x1a4>
 8007706:	2301      	movs	r3, #1
 8007708:	e7f2      	b.n	80076f0 <_printf_float+0x1a4>
 800770a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007710:	4299      	cmp	r1, r3
 8007712:	db05      	blt.n	8007720 <_printf_float+0x1d4>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6121      	str	r1, [r4, #16]
 8007718:	07d8      	lsls	r0, r3, #31
 800771a:	d5ea      	bpl.n	80076f2 <_printf_float+0x1a6>
 800771c:	1c4b      	adds	r3, r1, #1
 800771e:	e7e7      	b.n	80076f0 <_printf_float+0x1a4>
 8007720:	2900      	cmp	r1, #0
 8007722:	bfd4      	ite	le
 8007724:	f1c1 0202 	rsble	r2, r1, #2
 8007728:	2201      	movgt	r2, #1
 800772a:	4413      	add	r3, r2
 800772c:	e7e0      	b.n	80076f0 <_printf_float+0x1a4>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	055a      	lsls	r2, r3, #21
 8007732:	d407      	bmi.n	8007744 <_printf_float+0x1f8>
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	4642      	mov	r2, r8
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	d12c      	bne.n	800779c <_printf_float+0x250>
 8007742:	e764      	b.n	800760e <_printf_float+0xc2>
 8007744:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007748:	f240 80e0 	bls.w	800790c <_printf_float+0x3c0>
 800774c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	f7f9 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d034      	beq.n	80077c6 <_printf_float+0x27a>
 800775c:	4a37      	ldr	r2, [pc, #220]	; (800783c <_printf_float+0x2f0>)
 800775e:	2301      	movs	r3, #1
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f af51 	beq.w	800760e <_printf_float+0xc2>
 800776c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007770:	429a      	cmp	r2, r3
 8007772:	db02      	blt.n	800777a <_printf_float+0x22e>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07d8      	lsls	r0, r3, #31
 8007778:	d510      	bpl.n	800779c <_printf_float+0x250>
 800777a:	ee18 3a10 	vmov	r3, s16
 800777e:	4652      	mov	r2, sl
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af41 	beq.w	800760e <_printf_float+0xc2>
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	f104 091a 	add.w	r9, r4, #26
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	4543      	cmp	r3, r8
 800779a:	dc09      	bgt.n	80077b0 <_printf_float+0x264>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	079b      	lsls	r3, r3, #30
 80077a0:	f100 8105 	bmi.w	80079ae <_printf_float+0x462>
 80077a4:	68e0      	ldr	r0, [r4, #12]
 80077a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a8:	4298      	cmp	r0, r3
 80077aa:	bfb8      	it	lt
 80077ac:	4618      	movlt	r0, r3
 80077ae:	e730      	b.n	8007612 <_printf_float+0xc6>
 80077b0:	2301      	movs	r3, #1
 80077b2:	464a      	mov	r2, r9
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af27 	beq.w	800760e <_printf_float+0xc2>
 80077c0:	f108 0801 	add.w	r8, r8, #1
 80077c4:	e7e6      	b.n	8007794 <_printf_float+0x248>
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc39      	bgt.n	8007840 <_printf_float+0x2f4>
 80077cc:	4a1b      	ldr	r2, [pc, #108]	; (800783c <_printf_float+0x2f0>)
 80077ce:	2301      	movs	r3, #1
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af19 	beq.w	800760e <_printf_float+0xc2>
 80077dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e0:	4313      	orrs	r3, r2
 80077e2:	d102      	bne.n	80077ea <_printf_float+0x29e>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d5d8      	bpl.n	800779c <_printf_float+0x250>
 80077ea:	ee18 3a10 	vmov	r3, s16
 80077ee:	4652      	mov	r2, sl
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af09 	beq.w	800760e <_printf_float+0xc2>
 80077fc:	f04f 0900 	mov.w	r9, #0
 8007800:	f104 0a1a 	add.w	sl, r4, #26
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	425b      	negs	r3, r3
 8007808:	454b      	cmp	r3, r9
 800780a:	dc01      	bgt.n	8007810 <_printf_float+0x2c4>
 800780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780e:	e792      	b.n	8007736 <_printf_float+0x1ea>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f aef7 	beq.w	800760e <_printf_float+0xc2>
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	e7ee      	b.n	8007804 <_printf_float+0x2b8>
 8007826:	bf00      	nop
 8007828:	7fefffff 	.word	0x7fefffff
 800782c:	0800c481 	.word	0x0800c481
 8007830:	0800c485 	.word	0x0800c485
 8007834:	0800c48d 	.word	0x0800c48d
 8007838:	0800c489 	.word	0x0800c489
 800783c:	0800c491 	.word	0x0800c491
 8007840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007844:	429a      	cmp	r2, r3
 8007846:	bfa8      	it	ge
 8007848:	461a      	movge	r2, r3
 800784a:	2a00      	cmp	r2, #0
 800784c:	4691      	mov	r9, r2
 800784e:	dc37      	bgt.n	80078c0 <_printf_float+0x374>
 8007850:	f04f 0b00 	mov.w	fp, #0
 8007854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007858:	f104 021a 	add.w	r2, r4, #26
 800785c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	eba3 0309 	sub.w	r3, r3, r9
 8007864:	455b      	cmp	r3, fp
 8007866:	dc33      	bgt.n	80078d0 <_printf_float+0x384>
 8007868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786c:	429a      	cmp	r2, r3
 800786e:	db3b      	blt.n	80078e8 <_printf_float+0x39c>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d438      	bmi.n	80078e8 <_printf_float+0x39c>
 8007876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007878:	9b05      	ldr	r3, [sp, #20]
 800787a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	eba2 0901 	sub.w	r9, r2, r1
 8007882:	4599      	cmp	r9, r3
 8007884:	bfa8      	it	ge
 8007886:	4699      	movge	r9, r3
 8007888:	f1b9 0f00 	cmp.w	r9, #0
 800788c:	dc35      	bgt.n	80078fa <_printf_float+0x3ae>
 800788e:	f04f 0800 	mov.w	r8, #0
 8007892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007896:	f104 0a1a 	add.w	sl, r4, #26
 800789a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	eba3 0309 	sub.w	r3, r3, r9
 80078a4:	4543      	cmp	r3, r8
 80078a6:	f77f af79 	ble.w	800779c <_printf_float+0x250>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4652      	mov	r2, sl
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f aeaa 	beq.w	800760e <_printf_float+0xc2>
 80078ba:	f108 0801 	add.w	r8, r8, #1
 80078be:	e7ec      	b.n	800789a <_printf_float+0x34e>
 80078c0:	4613      	mov	r3, r2
 80078c2:	4631      	mov	r1, r6
 80078c4:	4642      	mov	r2, r8
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	d1c0      	bne.n	8007850 <_printf_float+0x304>
 80078ce:	e69e      	b.n	800760e <_printf_float+0xc2>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	9205      	str	r2, [sp, #20]
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f ae97 	beq.w	800760e <_printf_float+0xc2>
 80078e0:	9a05      	ldr	r2, [sp, #20]
 80078e2:	f10b 0b01 	add.w	fp, fp, #1
 80078e6:	e7b9      	b.n	800785c <_printf_float+0x310>
 80078e8:	ee18 3a10 	vmov	r3, s16
 80078ec:	4652      	mov	r2, sl
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1be      	bne.n	8007876 <_printf_float+0x32a>
 80078f8:	e689      	b.n	800760e <_printf_float+0xc2>
 80078fa:	9a05      	ldr	r2, [sp, #20]
 80078fc:	464b      	mov	r3, r9
 80078fe:	4442      	add	r2, r8
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	d1c1      	bne.n	800788e <_printf_float+0x342>
 800790a:	e680      	b.n	800760e <_printf_float+0xc2>
 800790c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800790e:	2a01      	cmp	r2, #1
 8007910:	dc01      	bgt.n	8007916 <_printf_float+0x3ca>
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d538      	bpl.n	8007988 <_printf_float+0x43c>
 8007916:	2301      	movs	r3, #1
 8007918:	4642      	mov	r2, r8
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f ae74 	beq.w	800760e <_printf_float+0xc2>
 8007926:	ee18 3a10 	vmov	r3, s16
 800792a:	4652      	mov	r2, sl
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f ae6b 	beq.w	800760e <_printf_float+0xc2>
 8007938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800793c:	2200      	movs	r2, #0
 800793e:	2300      	movs	r3, #0
 8007940:	f7f9 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007944:	b9d8      	cbnz	r0, 800797e <_printf_float+0x432>
 8007946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007948:	f108 0201 	add.w	r2, r8, #1
 800794c:	3b01      	subs	r3, #1
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	d10e      	bne.n	8007976 <_printf_float+0x42a>
 8007958:	e659      	b.n	800760e <_printf_float+0xc2>
 800795a:	2301      	movs	r3, #1
 800795c:	4652      	mov	r2, sl
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	f43f ae52 	beq.w	800760e <_printf_float+0xc2>
 800796a:	f108 0801 	add.w	r8, r8, #1
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	3b01      	subs	r3, #1
 8007972:	4543      	cmp	r3, r8
 8007974:	dcf1      	bgt.n	800795a <_printf_float+0x40e>
 8007976:	464b      	mov	r3, r9
 8007978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800797c:	e6dc      	b.n	8007738 <_printf_float+0x1ec>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f104 0a1a 	add.w	sl, r4, #26
 8007986:	e7f2      	b.n	800796e <_printf_float+0x422>
 8007988:	2301      	movs	r3, #1
 800798a:	4642      	mov	r2, r8
 800798c:	e7df      	b.n	800794e <_printf_float+0x402>
 800798e:	2301      	movs	r3, #1
 8007990:	464a      	mov	r2, r9
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae38 	beq.w	800760e <_printf_float+0xc2>
 800799e:	f108 0801 	add.w	r8, r8, #1
 80079a2:	68e3      	ldr	r3, [r4, #12]
 80079a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079a6:	1a5b      	subs	r3, r3, r1
 80079a8:	4543      	cmp	r3, r8
 80079aa:	dcf0      	bgt.n	800798e <_printf_float+0x442>
 80079ac:	e6fa      	b.n	80077a4 <_printf_float+0x258>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	f104 0919 	add.w	r9, r4, #25
 80079b6:	e7f4      	b.n	80079a2 <_printf_float+0x456>

080079b8 <_printf_common>:
 80079b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	4616      	mov	r6, r2
 80079be:	4699      	mov	r9, r3
 80079c0:	688a      	ldr	r2, [r1, #8]
 80079c2:	690b      	ldr	r3, [r1, #16]
 80079c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bfb8      	it	lt
 80079cc:	4613      	movlt	r3, r2
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d4:	4607      	mov	r7, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b10a      	cbz	r2, 80079de <_printf_common+0x26>
 80079da:	3301      	adds	r3, #1
 80079dc:	6033      	str	r3, [r6, #0]
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	0699      	lsls	r1, r3, #26
 80079e2:	bf42      	ittt	mi
 80079e4:	6833      	ldrmi	r3, [r6, #0]
 80079e6:	3302      	addmi	r3, #2
 80079e8:	6033      	strmi	r3, [r6, #0]
 80079ea:	6825      	ldr	r5, [r4, #0]
 80079ec:	f015 0506 	ands.w	r5, r5, #6
 80079f0:	d106      	bne.n	8007a00 <_printf_common+0x48>
 80079f2:	f104 0a19 	add.w	sl, r4, #25
 80079f6:	68e3      	ldr	r3, [r4, #12]
 80079f8:	6832      	ldr	r2, [r6, #0]
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	dc26      	bgt.n	8007a4e <_printf_common+0x96>
 8007a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a04:	1e13      	subs	r3, r2, #0
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	bf18      	it	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	0692      	lsls	r2, r2, #26
 8007a0e:	d42b      	bmi.n	8007a68 <_printf_common+0xb0>
 8007a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a14:	4649      	mov	r1, r9
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c0      	blx	r8
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d01e      	beq.n	8007a5c <_printf_common+0xa4>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	68e5      	ldr	r5, [r4, #12]
 8007a22:	6832      	ldr	r2, [r6, #0]
 8007a24:	f003 0306 	and.w	r3, r3, #6
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	bf08      	it	eq
 8007a2c:	1aad      	subeq	r5, r5, r2
 8007a2e:	68a3      	ldr	r3, [r4, #8]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	bf0c      	ite	eq
 8007a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a38:	2500      	movne	r5, #0
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bfc4      	itt	gt
 8007a3e:	1a9b      	subgt	r3, r3, r2
 8007a40:	18ed      	addgt	r5, r5, r3
 8007a42:	2600      	movs	r6, #0
 8007a44:	341a      	adds	r4, #26
 8007a46:	42b5      	cmp	r5, r6
 8007a48:	d11a      	bne.n	8007a80 <_printf_common+0xc8>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e008      	b.n	8007a60 <_printf_common+0xa8>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4652      	mov	r2, sl
 8007a52:	4649      	mov	r1, r9
 8007a54:	4638      	mov	r0, r7
 8007a56:	47c0      	blx	r8
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d103      	bne.n	8007a64 <_printf_common+0xac>
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a64:	3501      	adds	r5, #1
 8007a66:	e7c6      	b.n	80079f6 <_printf_common+0x3e>
 8007a68:	18e1      	adds	r1, r4, r3
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	2030      	movs	r0, #48	; 0x30
 8007a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a72:	4422      	add	r2, r4
 8007a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	e7c7      	b.n	8007a10 <_printf_common+0x58>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4622      	mov	r2, r4
 8007a84:	4649      	mov	r1, r9
 8007a86:	4638      	mov	r0, r7
 8007a88:	47c0      	blx	r8
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d0e6      	beq.n	8007a5c <_printf_common+0xa4>
 8007a8e:	3601      	adds	r6, #1
 8007a90:	e7d9      	b.n	8007a46 <_printf_common+0x8e>
	...

08007a94 <_printf_i>:
 8007a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	460c      	mov	r4, r1
 8007a9a:	4691      	mov	r9, r2
 8007a9c:	7e27      	ldrb	r7, [r4, #24]
 8007a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007aa0:	2f78      	cmp	r7, #120	; 0x78
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	469a      	mov	sl, r3
 8007aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aaa:	d807      	bhi.n	8007abc <_printf_i+0x28>
 8007aac:	2f62      	cmp	r7, #98	; 0x62
 8007aae:	d80a      	bhi.n	8007ac6 <_printf_i+0x32>
 8007ab0:	2f00      	cmp	r7, #0
 8007ab2:	f000 80d8 	beq.w	8007c66 <_printf_i+0x1d2>
 8007ab6:	2f58      	cmp	r7, #88	; 0x58
 8007ab8:	f000 80a3 	beq.w	8007c02 <_printf_i+0x16e>
 8007abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ac4:	e03a      	b.n	8007b3c <_printf_i+0xa8>
 8007ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aca:	2b15      	cmp	r3, #21
 8007acc:	d8f6      	bhi.n	8007abc <_printf_i+0x28>
 8007ace:	a001      	add	r0, pc, #4	; (adr r0, 8007ad4 <_printf_i+0x40>)
 8007ad0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007abd 	.word	0x08007abd
 8007ae0:	08007abd 	.word	0x08007abd
 8007ae4:	08007abd 	.word	0x08007abd
 8007ae8:	08007abd 	.word	0x08007abd
 8007aec:	08007b41 	.word	0x08007b41
 8007af0:	08007abd 	.word	0x08007abd
 8007af4:	08007abd 	.word	0x08007abd
 8007af8:	08007abd 	.word	0x08007abd
 8007afc:	08007abd 	.word	0x08007abd
 8007b00:	08007c4d 	.word	0x08007c4d
 8007b04:	08007b71 	.word	0x08007b71
 8007b08:	08007c2f 	.word	0x08007c2f
 8007b0c:	08007abd 	.word	0x08007abd
 8007b10:	08007abd 	.word	0x08007abd
 8007b14:	08007c6f 	.word	0x08007c6f
 8007b18:	08007abd 	.word	0x08007abd
 8007b1c:	08007b71 	.word	0x08007b71
 8007b20:	08007abd 	.word	0x08007abd
 8007b24:	08007abd 	.word	0x08007abd
 8007b28:	08007c37 	.word	0x08007c37
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	600a      	str	r2, [r1, #0]
 8007b34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0a3      	b.n	8007c88 <_printf_i+0x1f4>
 8007b40:	6825      	ldr	r5, [r4, #0]
 8007b42:	6808      	ldr	r0, [r1, #0]
 8007b44:	062e      	lsls	r6, r5, #24
 8007b46:	f100 0304 	add.w	r3, r0, #4
 8007b4a:	d50a      	bpl.n	8007b62 <_printf_i+0xce>
 8007b4c:	6805      	ldr	r5, [r0, #0]
 8007b4e:	600b      	str	r3, [r1, #0]
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	da03      	bge.n	8007b5c <_printf_i+0xc8>
 8007b54:	232d      	movs	r3, #45	; 0x2d
 8007b56:	426d      	negs	r5, r5
 8007b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b5c:	485e      	ldr	r0, [pc, #376]	; (8007cd8 <_printf_i+0x244>)
 8007b5e:	230a      	movs	r3, #10
 8007b60:	e019      	b.n	8007b96 <_printf_i+0x102>
 8007b62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b66:	6805      	ldr	r5, [r0, #0]
 8007b68:	600b      	str	r3, [r1, #0]
 8007b6a:	bf18      	it	ne
 8007b6c:	b22d      	sxthne	r5, r5
 8007b6e:	e7ef      	b.n	8007b50 <_printf_i+0xbc>
 8007b70:	680b      	ldr	r3, [r1, #0]
 8007b72:	6825      	ldr	r5, [r4, #0]
 8007b74:	1d18      	adds	r0, r3, #4
 8007b76:	6008      	str	r0, [r1, #0]
 8007b78:	0628      	lsls	r0, r5, #24
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0xec>
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <_printf_i+0xf2>
 8007b80:	0669      	lsls	r1, r5, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0xe8>
 8007b84:	881d      	ldrh	r5, [r3, #0]
 8007b86:	4854      	ldr	r0, [pc, #336]	; (8007cd8 <_printf_i+0x244>)
 8007b88:	2f6f      	cmp	r7, #111	; 0x6f
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2308      	moveq	r3, #8
 8007b8e:	230a      	movne	r3, #10
 8007b90:	2100      	movs	r1, #0
 8007b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b96:	6866      	ldr	r6, [r4, #4]
 8007b98:	60a6      	str	r6, [r4, #8]
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	bfa2      	ittt	ge
 8007b9e:	6821      	ldrge	r1, [r4, #0]
 8007ba0:	f021 0104 	bicge.w	r1, r1, #4
 8007ba4:	6021      	strge	r1, [r4, #0]
 8007ba6:	b90d      	cbnz	r5, 8007bac <_printf_i+0x118>
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	d04d      	beq.n	8007c48 <_printf_i+0x1b4>
 8007bac:	4616      	mov	r6, r2
 8007bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8007bb6:	5dc7      	ldrb	r7, [r0, r7]
 8007bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bbc:	462f      	mov	r7, r5
 8007bbe:	42bb      	cmp	r3, r7
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	d9f4      	bls.n	8007bae <_printf_i+0x11a>
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d10b      	bne.n	8007be0 <_printf_i+0x14c>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	07df      	lsls	r7, r3, #31
 8007bcc:	d508      	bpl.n	8007be0 <_printf_i+0x14c>
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	6861      	ldr	r1, [r4, #4]
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	bfde      	ittt	le
 8007bd6:	2330      	movle	r3, #48	; 0x30
 8007bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bdc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007be0:	1b92      	subs	r2, r2, r6
 8007be2:	6122      	str	r2, [r4, #16]
 8007be4:	f8cd a000 	str.w	sl, [sp]
 8007be8:	464b      	mov	r3, r9
 8007bea:	aa03      	add	r2, sp, #12
 8007bec:	4621      	mov	r1, r4
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7ff fee2 	bl	80079b8 <_printf_common>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d14c      	bne.n	8007c92 <_printf_i+0x1fe>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bfc:	b004      	add	sp, #16
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	4835      	ldr	r0, [pc, #212]	; (8007cd8 <_printf_i+0x244>)
 8007c04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	680e      	ldr	r6, [r1, #0]
 8007c0c:	061f      	lsls	r7, r3, #24
 8007c0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c12:	600e      	str	r6, [r1, #0]
 8007c14:	d514      	bpl.n	8007c40 <_printf_i+0x1ac>
 8007c16:	07d9      	lsls	r1, r3, #31
 8007c18:	bf44      	itt	mi
 8007c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c1e:	6023      	strmi	r3, [r4, #0]
 8007c20:	b91d      	cbnz	r5, 8007c2a <_printf_i+0x196>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	e7b0      	b.n	8007b90 <_printf_i+0xfc>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	f043 0320 	orr.w	r3, r3, #32
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	2378      	movs	r3, #120	; 0x78
 8007c38:	4828      	ldr	r0, [pc, #160]	; (8007cdc <_printf_i+0x248>)
 8007c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c3e:	e7e3      	b.n	8007c08 <_printf_i+0x174>
 8007c40:	065e      	lsls	r6, r3, #25
 8007c42:	bf48      	it	mi
 8007c44:	b2ad      	uxthmi	r5, r5
 8007c46:	e7e6      	b.n	8007c16 <_printf_i+0x182>
 8007c48:	4616      	mov	r6, r2
 8007c4a:	e7bb      	b.n	8007bc4 <_printf_i+0x130>
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	6826      	ldr	r6, [r4, #0]
 8007c50:	6960      	ldr	r0, [r4, #20]
 8007c52:	1d1d      	adds	r5, r3, #4
 8007c54:	600d      	str	r5, [r1, #0]
 8007c56:	0635      	lsls	r5, r6, #24
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	d501      	bpl.n	8007c60 <_printf_i+0x1cc>
 8007c5c:	6018      	str	r0, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <_printf_i+0x1d2>
 8007c60:	0671      	lsls	r1, r6, #25
 8007c62:	d5fb      	bpl.n	8007c5c <_printf_i+0x1c8>
 8007c64:	8018      	strh	r0, [r3, #0]
 8007c66:	2300      	movs	r3, #0
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	4616      	mov	r6, r2
 8007c6c:	e7ba      	b.n	8007be4 <_printf_i+0x150>
 8007c6e:	680b      	ldr	r3, [r1, #0]
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	600a      	str	r2, [r1, #0]
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	6862      	ldr	r2, [r4, #4]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7f8 fab0 	bl	80001e0 <memchr>
 8007c80:	b108      	cbz	r0, 8007c86 <_printf_i+0x1f2>
 8007c82:	1b80      	subs	r0, r0, r6
 8007c84:	6060      	str	r0, [r4, #4]
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c90:	e7a8      	b.n	8007be4 <_printf_i+0x150>
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	4632      	mov	r2, r6
 8007c96:	4649      	mov	r1, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	47d0      	blx	sl
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d0ab      	beq.n	8007bf8 <_printf_i+0x164>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	079b      	lsls	r3, r3, #30
 8007ca4:	d413      	bmi.n	8007cce <_printf_i+0x23a>
 8007ca6:	68e0      	ldr	r0, [r4, #12]
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	4298      	cmp	r0, r3
 8007cac:	bfb8      	it	lt
 8007cae:	4618      	movlt	r0, r3
 8007cb0:	e7a4      	b.n	8007bfc <_printf_i+0x168>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	47d0      	blx	sl
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d09b      	beq.n	8007bf8 <_printf_i+0x164>
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	68e3      	ldr	r3, [r4, #12]
 8007cc4:	9903      	ldr	r1, [sp, #12]
 8007cc6:	1a5b      	subs	r3, r3, r1
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	dcf2      	bgt.n	8007cb2 <_printf_i+0x21e>
 8007ccc:	e7eb      	b.n	8007ca6 <_printf_i+0x212>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	f104 0619 	add.w	r6, r4, #25
 8007cd4:	e7f5      	b.n	8007cc2 <_printf_i+0x22e>
 8007cd6:	bf00      	nop
 8007cd8:	0800c493 	.word	0x0800c493
 8007cdc:	0800c4a4 	.word	0x0800c4a4

08007ce0 <_scanf_float>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	4617      	mov	r7, r2
 8007ce8:	9303      	str	r3, [sp, #12]
 8007cea:	688b      	ldr	r3, [r1, #8]
 8007cec:	1e5a      	subs	r2, r3, #1
 8007cee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cf2:	bf83      	ittte	hi
 8007cf4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cf8:	195b      	addhi	r3, r3, r5
 8007cfa:	9302      	strhi	r3, [sp, #8]
 8007cfc:	2300      	movls	r3, #0
 8007cfe:	bf86      	itte	hi
 8007d00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d04:	608b      	strhi	r3, [r1, #8]
 8007d06:	9302      	strls	r3, [sp, #8]
 8007d08:	680b      	ldr	r3, [r1, #0]
 8007d0a:	468b      	mov	fp, r1
 8007d0c:	2500      	movs	r5, #0
 8007d0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d12:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	465e      	mov	r6, fp
 8007d20:	46aa      	mov	sl, r5
 8007d22:	46a9      	mov	r9, r5
 8007d24:	9501      	str	r5, [sp, #4]
 8007d26:	68a2      	ldr	r2, [r4, #8]
 8007d28:	b152      	cbz	r2, 8007d40 <_scanf_float+0x60>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b4e      	cmp	r3, #78	; 0x4e
 8007d30:	d864      	bhi.n	8007dfc <_scanf_float+0x11c>
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d83c      	bhi.n	8007db0 <_scanf_float+0xd0>
 8007d36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d3a:	b2c8      	uxtb	r0, r1
 8007d3c:	280e      	cmp	r0, #14
 8007d3e:	d93a      	bls.n	8007db6 <_scanf_float+0xd6>
 8007d40:	f1b9 0f00 	cmp.w	r9, #0
 8007d44:	d003      	beq.n	8007d4e <_scanf_float+0x6e>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007d52:	f1ba 0f01 	cmp.w	sl, #1
 8007d56:	f200 8113 	bhi.w	8007f80 <_scanf_float+0x2a0>
 8007d5a:	455e      	cmp	r6, fp
 8007d5c:	f200 8105 	bhi.w	8007f6a <_scanf_float+0x28a>
 8007d60:	2501      	movs	r5, #1
 8007d62:	4628      	mov	r0, r5
 8007d64:	b007      	add	sp, #28
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d6e:	2a0d      	cmp	r2, #13
 8007d70:	d8e6      	bhi.n	8007d40 <_scanf_float+0x60>
 8007d72:	a101      	add	r1, pc, #4	; (adr r1, 8007d78 <_scanf_float+0x98>)
 8007d74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d78:	08007eb7 	.word	0x08007eb7
 8007d7c:	08007d41 	.word	0x08007d41
 8007d80:	08007d41 	.word	0x08007d41
 8007d84:	08007d41 	.word	0x08007d41
 8007d88:	08007f17 	.word	0x08007f17
 8007d8c:	08007eef 	.word	0x08007eef
 8007d90:	08007d41 	.word	0x08007d41
 8007d94:	08007d41 	.word	0x08007d41
 8007d98:	08007ec5 	.word	0x08007ec5
 8007d9c:	08007d41 	.word	0x08007d41
 8007da0:	08007d41 	.word	0x08007d41
 8007da4:	08007d41 	.word	0x08007d41
 8007da8:	08007d41 	.word	0x08007d41
 8007dac:	08007e7d 	.word	0x08007e7d
 8007db0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007db4:	e7db      	b.n	8007d6e <_scanf_float+0x8e>
 8007db6:	290e      	cmp	r1, #14
 8007db8:	d8c2      	bhi.n	8007d40 <_scanf_float+0x60>
 8007dba:	a001      	add	r0, pc, #4	; (adr r0, 8007dc0 <_scanf_float+0xe0>)
 8007dbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007dc0:	08007e6f 	.word	0x08007e6f
 8007dc4:	08007d41 	.word	0x08007d41
 8007dc8:	08007e6f 	.word	0x08007e6f
 8007dcc:	08007f03 	.word	0x08007f03
 8007dd0:	08007d41 	.word	0x08007d41
 8007dd4:	08007e1d 	.word	0x08007e1d
 8007dd8:	08007e59 	.word	0x08007e59
 8007ddc:	08007e59 	.word	0x08007e59
 8007de0:	08007e59 	.word	0x08007e59
 8007de4:	08007e59 	.word	0x08007e59
 8007de8:	08007e59 	.word	0x08007e59
 8007dec:	08007e59 	.word	0x08007e59
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007e59 	.word	0x08007e59
 8007df8:	08007e59 	.word	0x08007e59
 8007dfc:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfe:	d809      	bhi.n	8007e14 <_scanf_float+0x134>
 8007e00:	2b60      	cmp	r3, #96	; 0x60
 8007e02:	d8b2      	bhi.n	8007d6a <_scanf_float+0x8a>
 8007e04:	2b54      	cmp	r3, #84	; 0x54
 8007e06:	d077      	beq.n	8007ef8 <_scanf_float+0x218>
 8007e08:	2b59      	cmp	r3, #89	; 0x59
 8007e0a:	d199      	bne.n	8007d40 <_scanf_float+0x60>
 8007e0c:	2d07      	cmp	r5, #7
 8007e0e:	d197      	bne.n	8007d40 <_scanf_float+0x60>
 8007e10:	2508      	movs	r5, #8
 8007e12:	e029      	b.n	8007e68 <_scanf_float+0x188>
 8007e14:	2b74      	cmp	r3, #116	; 0x74
 8007e16:	d06f      	beq.n	8007ef8 <_scanf_float+0x218>
 8007e18:	2b79      	cmp	r3, #121	; 0x79
 8007e1a:	e7f6      	b.n	8007e0a <_scanf_float+0x12a>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	05c8      	lsls	r0, r1, #23
 8007e20:	d51a      	bpl.n	8007e58 <_scanf_float+0x178>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e28:	6021      	str	r1, [r4, #0]
 8007e2a:	f109 0901 	add.w	r9, r9, #1
 8007e2e:	b11b      	cbz	r3, 8007e38 <_scanf_float+0x158>
 8007e30:	3b01      	subs	r3, #1
 8007e32:	3201      	adds	r2, #1
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	60a2      	str	r2, [r4, #8]
 8007e38:	68a3      	ldr	r3, [r4, #8]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	60a3      	str	r3, [r4, #8]
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	3301      	adds	r3, #1
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	f340 8084 	ble.w	8007f58 <_scanf_float+0x278>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	603b      	str	r3, [r7, #0]
 8007e56:	e766      	b.n	8007d26 <_scanf_float+0x46>
 8007e58:	eb1a 0f05 	cmn.w	sl, r5
 8007e5c:	f47f af70 	bne.w	8007d40 <_scanf_float+0x60>
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	f806 3b01 	strb.w	r3, [r6], #1
 8007e6c:	e7e4      	b.n	8007e38 <_scanf_float+0x158>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	0610      	lsls	r0, r2, #24
 8007e72:	f57f af65 	bpl.w	8007d40 <_scanf_float+0x60>
 8007e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e7a:	e7f4      	b.n	8007e66 <_scanf_float+0x186>
 8007e7c:	f1ba 0f00 	cmp.w	sl, #0
 8007e80:	d10e      	bne.n	8007ea0 <_scanf_float+0x1c0>
 8007e82:	f1b9 0f00 	cmp.w	r9, #0
 8007e86:	d10e      	bne.n	8007ea6 <_scanf_float+0x1c6>
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e92:	d108      	bne.n	8007ea6 <_scanf_float+0x1c6>
 8007e94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	f04f 0a01 	mov.w	sl, #1
 8007e9e:	e7e3      	b.n	8007e68 <_scanf_float+0x188>
 8007ea0:	f1ba 0f02 	cmp.w	sl, #2
 8007ea4:	d055      	beq.n	8007f52 <_scanf_float+0x272>
 8007ea6:	2d01      	cmp	r5, #1
 8007ea8:	d002      	beq.n	8007eb0 <_scanf_float+0x1d0>
 8007eaa:	2d04      	cmp	r5, #4
 8007eac:	f47f af48 	bne.w	8007d40 <_scanf_float+0x60>
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	b2ed      	uxtb	r5, r5
 8007eb4:	e7d8      	b.n	8007e68 <_scanf_float+0x188>
 8007eb6:	f1ba 0f01 	cmp.w	sl, #1
 8007eba:	f47f af41 	bne.w	8007d40 <_scanf_float+0x60>
 8007ebe:	f04f 0a02 	mov.w	sl, #2
 8007ec2:	e7d1      	b.n	8007e68 <_scanf_float+0x188>
 8007ec4:	b97d      	cbnz	r5, 8007ee6 <_scanf_float+0x206>
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	f47f af3c 	bne.w	8007d46 <_scanf_float+0x66>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ed4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ed8:	f47f af39 	bne.w	8007d4e <_scanf_float+0x6e>
 8007edc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	2501      	movs	r5, #1
 8007ee4:	e7c0      	b.n	8007e68 <_scanf_float+0x188>
 8007ee6:	2d03      	cmp	r5, #3
 8007ee8:	d0e2      	beq.n	8007eb0 <_scanf_float+0x1d0>
 8007eea:	2d05      	cmp	r5, #5
 8007eec:	e7de      	b.n	8007eac <_scanf_float+0x1cc>
 8007eee:	2d02      	cmp	r5, #2
 8007ef0:	f47f af26 	bne.w	8007d40 <_scanf_float+0x60>
 8007ef4:	2503      	movs	r5, #3
 8007ef6:	e7b7      	b.n	8007e68 <_scanf_float+0x188>
 8007ef8:	2d06      	cmp	r5, #6
 8007efa:	f47f af21 	bne.w	8007d40 <_scanf_float+0x60>
 8007efe:	2507      	movs	r5, #7
 8007f00:	e7b2      	b.n	8007e68 <_scanf_float+0x188>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	0591      	lsls	r1, r2, #22
 8007f06:	f57f af1b 	bpl.w	8007d40 <_scanf_float+0x60>
 8007f0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f14:	e7a8      	b.n	8007e68 <_scanf_float+0x188>
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f20:	d006      	beq.n	8007f30 <_scanf_float+0x250>
 8007f22:	0550      	lsls	r0, r2, #21
 8007f24:	f57f af0c 	bpl.w	8007d40 <_scanf_float+0x60>
 8007f28:	f1b9 0f00 	cmp.w	r9, #0
 8007f2c:	f43f af0f 	beq.w	8007d4e <_scanf_float+0x6e>
 8007f30:	0591      	lsls	r1, r2, #22
 8007f32:	bf58      	it	pl
 8007f34:	9901      	ldrpl	r1, [sp, #4]
 8007f36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f3a:	bf58      	it	pl
 8007f3c:	eba9 0101 	subpl.w	r1, r9, r1
 8007f40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f44:	bf58      	it	pl
 8007f46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	f04f 0900 	mov.w	r9, #0
 8007f50:	e78a      	b.n	8007e68 <_scanf_float+0x188>
 8007f52:	f04f 0a03 	mov.w	sl, #3
 8007f56:	e787      	b.n	8007e68 <_scanf_float+0x188>
 8007f58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4798      	blx	r3
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f43f aedf 	beq.w	8007d26 <_scanf_float+0x46>
 8007f68:	e6ea      	b.n	8007d40 <_scanf_float+0x60>
 8007f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f72:	463a      	mov	r2, r7
 8007f74:	4640      	mov	r0, r8
 8007f76:	4798      	blx	r3
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	e6ec      	b.n	8007d5a <_scanf_float+0x7a>
 8007f80:	1e6b      	subs	r3, r5, #1
 8007f82:	2b06      	cmp	r3, #6
 8007f84:	d825      	bhi.n	8007fd2 <_scanf_float+0x2f2>
 8007f86:	2d02      	cmp	r5, #2
 8007f88:	d836      	bhi.n	8007ff8 <_scanf_float+0x318>
 8007f8a:	455e      	cmp	r6, fp
 8007f8c:	f67f aee8 	bls.w	8007d60 <_scanf_float+0x80>
 8007f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f98:	463a      	mov	r2, r7
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4798      	blx	r3
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	e7f1      	b.n	8007f8a <_scanf_float+0x2aa>
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007fb0:	9002      	str	r0, [sp, #8]
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4798      	blx	r3
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fc2:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc6:	f1ba 0f02 	cmp.w	sl, #2
 8007fca:	d1ec      	bne.n	8007fa6 <_scanf_float+0x2c6>
 8007fcc:	3d03      	subs	r5, #3
 8007fce:	b2ed      	uxtb	r5, r5
 8007fd0:	1b76      	subs	r6, r6, r5
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	05da      	lsls	r2, r3, #23
 8007fd6:	d52f      	bpl.n	8008038 <_scanf_float+0x358>
 8007fd8:	055b      	lsls	r3, r3, #21
 8007fda:	d510      	bpl.n	8007ffe <_scanf_float+0x31e>
 8007fdc:	455e      	cmp	r6, fp
 8007fde:	f67f aebf 	bls.w	8007d60 <_scanf_float+0x80>
 8007fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fea:	463a      	mov	r2, r7
 8007fec:	4640      	mov	r0, r8
 8007fee:	4798      	blx	r3
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	e7f1      	b.n	8007fdc <_scanf_float+0x2fc>
 8007ff8:	46aa      	mov	sl, r5
 8007ffa:	9602      	str	r6, [sp, #8]
 8007ffc:	e7df      	b.n	8007fbe <_scanf_float+0x2de>
 8007ffe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	2965      	cmp	r1, #101	; 0x65
 8008006:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800800a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800800e:	6123      	str	r3, [r4, #16]
 8008010:	d00c      	beq.n	800802c <_scanf_float+0x34c>
 8008012:	2945      	cmp	r1, #69	; 0x45
 8008014:	d00a      	beq.n	800802c <_scanf_float+0x34c>
 8008016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800801a:	463a      	mov	r2, r7
 800801c:	4640      	mov	r0, r8
 800801e:	4798      	blx	r3
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008026:	3b01      	subs	r3, #1
 8008028:	1eb5      	subs	r5, r6, #2
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008030:	463a      	mov	r2, r7
 8008032:	4640      	mov	r0, r8
 8008034:	4798      	blx	r3
 8008036:	462e      	mov	r6, r5
 8008038:	6825      	ldr	r5, [r4, #0]
 800803a:	f015 0510 	ands.w	r5, r5, #16
 800803e:	d158      	bne.n	80080f2 <_scanf_float+0x412>
 8008040:	7035      	strb	r5, [r6, #0]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804c:	d11c      	bne.n	8008088 <_scanf_float+0x3a8>
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	454b      	cmp	r3, r9
 8008052:	eba3 0209 	sub.w	r2, r3, r9
 8008056:	d124      	bne.n	80080a2 <_scanf_float+0x3c2>
 8008058:	2200      	movs	r2, #0
 800805a:	4659      	mov	r1, fp
 800805c:	4640      	mov	r0, r8
 800805e:	f000 fed5 	bl	8008e0c <_strtod_r>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f011 0f02 	tst.w	r1, #2
 800806c:	ec57 6b10 	vmov	r6, r7, d0
 8008070:	f103 0204 	add.w	r2, r3, #4
 8008074:	d020      	beq.n	80080b8 <_scanf_float+0x3d8>
 8008076:	9903      	ldr	r1, [sp, #12]
 8008078:	600a      	str	r2, [r1, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	e9c3 6700 	strd	r6, r7, [r3]
 8008080:	68e3      	ldr	r3, [r4, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60e3      	str	r3, [r4, #12]
 8008086:	e66c      	b.n	8007d62 <_scanf_float+0x82>
 8008088:	9b04      	ldr	r3, [sp, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0e4      	beq.n	8008058 <_scanf_float+0x378>
 800808e:	9905      	ldr	r1, [sp, #20]
 8008090:	230a      	movs	r3, #10
 8008092:	462a      	mov	r2, r5
 8008094:	3101      	adds	r1, #1
 8008096:	4640      	mov	r0, r8
 8008098:	f000 ff42 	bl	8008f20 <_strtol_r>
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	9e05      	ldr	r6, [sp, #20]
 80080a0:	1ac2      	subs	r2, r0, r3
 80080a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80080a6:	429e      	cmp	r6, r3
 80080a8:	bf28      	it	cs
 80080aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80080ae:	4912      	ldr	r1, [pc, #72]	; (80080f8 <_scanf_float+0x418>)
 80080b0:	4630      	mov	r0, r6
 80080b2:	f000 f853 	bl	800815c <siprintf>
 80080b6:	e7cf      	b.n	8008058 <_scanf_float+0x378>
 80080b8:	f011 0f04 	tst.w	r1, #4
 80080bc:	9903      	ldr	r1, [sp, #12]
 80080be:	600a      	str	r2, [r1, #0]
 80080c0:	d1db      	bne.n	800807a <_scanf_float+0x39a>
 80080c2:	f8d3 8000 	ldr.w	r8, [r3]
 80080c6:	ee10 2a10 	vmov	r2, s0
 80080ca:	ee10 0a10 	vmov	r0, s0
 80080ce:	463b      	mov	r3, r7
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fd2b 	bl	8000b2c <__aeabi_dcmpun>
 80080d6:	b128      	cbz	r0, 80080e4 <_scanf_float+0x404>
 80080d8:	4808      	ldr	r0, [pc, #32]	; (80080fc <_scanf_float+0x41c>)
 80080da:	f000 f839 	bl	8008150 <nanf>
 80080de:	ed88 0a00 	vstr	s0, [r8]
 80080e2:	e7cd      	b.n	8008080 <_scanf_float+0x3a0>
 80080e4:	4630      	mov	r0, r6
 80080e6:	4639      	mov	r1, r7
 80080e8:	f7f8 fd7e 	bl	8000be8 <__aeabi_d2f>
 80080ec:	f8c8 0000 	str.w	r0, [r8]
 80080f0:	e7c6      	b.n	8008080 <_scanf_float+0x3a0>
 80080f2:	2500      	movs	r5, #0
 80080f4:	e635      	b.n	8007d62 <_scanf_float+0x82>
 80080f6:	bf00      	nop
 80080f8:	0800c4b5 	.word	0x0800c4b5
 80080fc:	0800c46b 	.word	0x0800c46b

08008100 <iprintf>:
 8008100:	b40f      	push	{r0, r1, r2, r3}
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <iprintf+0x2c>)
 8008104:	b513      	push	{r0, r1, r4, lr}
 8008106:	681c      	ldr	r4, [r3, #0]
 8008108:	b124      	cbz	r4, 8008114 <iprintf+0x14>
 800810a:	69a3      	ldr	r3, [r4, #24]
 800810c:	b913      	cbnz	r3, 8008114 <iprintf+0x14>
 800810e:	4620      	mov	r0, r4
 8008110:	f001 ff60 	bl	8009fd4 <__sinit>
 8008114:	ab05      	add	r3, sp, #20
 8008116:	9a04      	ldr	r2, [sp, #16]
 8008118:	68a1      	ldr	r1, [r4, #8]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	4620      	mov	r0, r4
 800811e:	f7ff f845 	bl	80071ac <_vfiprintf_r>
 8008122:	b002      	add	sp, #8
 8008124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008128:	b004      	add	sp, #16
 800812a:	4770      	bx	lr
 800812c:	20000014 	.word	0x20000014

08008130 <_sbrk_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d06      	ldr	r5, [pc, #24]	; (800814c <_sbrk_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7f9 fbee 	bl	800191c <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_sbrk_r+0x1a>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_sbrk_r+0x1a>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000a0c 	.word	0x20000a0c

08008150 <nanf>:
 8008150:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008158 <nanf+0x8>
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	7fc00000 	.word	0x7fc00000

0800815c <siprintf>:
 800815c:	b40e      	push	{r1, r2, r3}
 800815e:	b500      	push	{lr}
 8008160:	b09c      	sub	sp, #112	; 0x70
 8008162:	ab1d      	add	r3, sp, #116	; 0x74
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	9006      	str	r0, [sp, #24]
 8008168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800816c:	4809      	ldr	r0, [pc, #36]	; (8008194 <siprintf+0x38>)
 800816e:	9107      	str	r1, [sp, #28]
 8008170:	9104      	str	r1, [sp, #16]
 8008172:	4909      	ldr	r1, [pc, #36]	; (8008198 <siprintf+0x3c>)
 8008174:	f853 2b04 	ldr.w	r2, [r3], #4
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	a902      	add	r1, sp, #8
 8008180:	f003 f924 	bl	800b3cc <_svfiprintf_r>
 8008184:	9b02      	ldr	r3, [sp, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	b01c      	add	sp, #112	; 0x70
 800818c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008190:	b003      	add	sp, #12
 8008192:	4770      	bx	lr
 8008194:	20000014 	.word	0x20000014
 8008198:	ffff0208 	.word	0xffff0208

0800819c <strncmp>:
 800819c:	b510      	push	{r4, lr}
 800819e:	b16a      	cbz	r2, 80081bc <strncmp+0x20>
 80081a0:	3901      	subs	r1, #1
 80081a2:	1884      	adds	r4, r0, r2
 80081a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d103      	bne.n	80081b8 <strncmp+0x1c>
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	d001      	beq.n	80081b8 <strncmp+0x1c>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f5      	bne.n	80081a4 <strncmp+0x8>
 80081b8:	1a98      	subs	r0, r3, r2
 80081ba:	bd10      	pop	{r4, pc}
 80081bc:	4610      	mov	r0, r2
 80081be:	e7fc      	b.n	80081ba <strncmp+0x1e>

080081c0 <sulp>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	460d      	mov	r5, r1
 80081c6:	ec45 4b10 	vmov	d0, r4, r5
 80081ca:	4616      	mov	r6, r2
 80081cc:	f002 ff1e 	bl	800b00c <__ulp>
 80081d0:	ec51 0b10 	vmov	r0, r1, d0
 80081d4:	b17e      	cbz	r6, 80081f6 <sulp+0x36>
 80081d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dd09      	ble.n	80081f6 <sulp+0x36>
 80081e2:	051b      	lsls	r3, r3, #20
 80081e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80081e8:	2400      	movs	r4, #0
 80081ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80081ee:	4622      	mov	r2, r4
 80081f0:	462b      	mov	r3, r5
 80081f2:	f7f8 fa01 	bl	80005f8 <__aeabi_dmul>
 80081f6:	bd70      	pop	{r4, r5, r6, pc}

080081f8 <_strtod_l>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b0a3      	sub	sp, #140	; 0x8c
 80081fe:	461f      	mov	r7, r3
 8008200:	2300      	movs	r3, #0
 8008202:	931e      	str	r3, [sp, #120]	; 0x78
 8008204:	4ba4      	ldr	r3, [pc, #656]	; (8008498 <_strtod_l+0x2a0>)
 8008206:	9219      	str	r2, [sp, #100]	; 0x64
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	4604      	mov	r4, r0
 800820e:	4618      	mov	r0, r3
 8008210:	4688      	mov	r8, r1
 8008212:	f7f7 ffdd 	bl	80001d0 <strlen>
 8008216:	f04f 0a00 	mov.w	sl, #0
 800821a:	4605      	mov	r5, r0
 800821c:	f04f 0b00 	mov.w	fp, #0
 8008220:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	2a2b      	cmp	r2, #43	; 0x2b
 800822a:	d04c      	beq.n	80082c6 <_strtod_l+0xce>
 800822c:	d839      	bhi.n	80082a2 <_strtod_l+0xaa>
 800822e:	2a0d      	cmp	r2, #13
 8008230:	d832      	bhi.n	8008298 <_strtod_l+0xa0>
 8008232:	2a08      	cmp	r2, #8
 8008234:	d832      	bhi.n	800829c <_strtod_l+0xa4>
 8008236:	2a00      	cmp	r2, #0
 8008238:	d03c      	beq.n	80082b4 <_strtod_l+0xbc>
 800823a:	2300      	movs	r3, #0
 800823c:	930e      	str	r3, [sp, #56]	; 0x38
 800823e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008240:	7833      	ldrb	r3, [r6, #0]
 8008242:	2b30      	cmp	r3, #48	; 0x30
 8008244:	f040 80b4 	bne.w	80083b0 <_strtod_l+0x1b8>
 8008248:	7873      	ldrb	r3, [r6, #1]
 800824a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800824e:	2b58      	cmp	r3, #88	; 0x58
 8008250:	d16c      	bne.n	800832c <_strtod_l+0x134>
 8008252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	ab1e      	add	r3, sp, #120	; 0x78
 8008258:	9702      	str	r7, [sp, #8]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4a8f      	ldr	r2, [pc, #572]	; (800849c <_strtod_l+0x2a4>)
 800825e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008260:	a91d      	add	r1, sp, #116	; 0x74
 8008262:	4620      	mov	r0, r4
 8008264:	f001 ffba 	bl	800a1dc <__gethex>
 8008268:	f010 0707 	ands.w	r7, r0, #7
 800826c:	4605      	mov	r5, r0
 800826e:	d005      	beq.n	800827c <_strtod_l+0x84>
 8008270:	2f06      	cmp	r7, #6
 8008272:	d12a      	bne.n	80082ca <_strtod_l+0xd2>
 8008274:	3601      	adds	r6, #1
 8008276:	2300      	movs	r3, #0
 8008278:	961d      	str	r6, [sp, #116]	; 0x74
 800827a:	930e      	str	r3, [sp, #56]	; 0x38
 800827c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800827e:	2b00      	cmp	r3, #0
 8008280:	f040 8596 	bne.w	8008db0 <_strtod_l+0xbb8>
 8008284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008286:	b1db      	cbz	r3, 80082c0 <_strtod_l+0xc8>
 8008288:	4652      	mov	r2, sl
 800828a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800828e:	ec43 2b10 	vmov	d0, r2, r3
 8008292:	b023      	add	sp, #140	; 0x8c
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	2a20      	cmp	r2, #32
 800829a:	d1ce      	bne.n	800823a <_strtod_l+0x42>
 800829c:	3301      	adds	r3, #1
 800829e:	931d      	str	r3, [sp, #116]	; 0x74
 80082a0:	e7c0      	b.n	8008224 <_strtod_l+0x2c>
 80082a2:	2a2d      	cmp	r2, #45	; 0x2d
 80082a4:	d1c9      	bne.n	800823a <_strtod_l+0x42>
 80082a6:	2201      	movs	r2, #1
 80082a8:	920e      	str	r2, [sp, #56]	; 0x38
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	921d      	str	r2, [sp, #116]	; 0x74
 80082ae:	785b      	ldrb	r3, [r3, #1]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1c4      	bne.n	800823e <_strtod_l+0x46>
 80082b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 8576 	bne.w	8008dac <_strtod_l+0xbb4>
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	e7e3      	b.n	800828e <_strtod_l+0x96>
 80082c6:	2200      	movs	r2, #0
 80082c8:	e7ee      	b.n	80082a8 <_strtod_l+0xb0>
 80082ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082cc:	b13a      	cbz	r2, 80082de <_strtod_l+0xe6>
 80082ce:	2135      	movs	r1, #53	; 0x35
 80082d0:	a820      	add	r0, sp, #128	; 0x80
 80082d2:	f002 ffa6 	bl	800b222 <__copybits>
 80082d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082d8:	4620      	mov	r0, r4
 80082da:	f002 fb6b 	bl	800a9b4 <_Bfree>
 80082de:	3f01      	subs	r7, #1
 80082e0:	2f05      	cmp	r7, #5
 80082e2:	d807      	bhi.n	80082f4 <_strtod_l+0xfc>
 80082e4:	e8df f007 	tbb	[pc, r7]
 80082e8:	1d180b0e 	.word	0x1d180b0e
 80082ec:	030e      	.short	0x030e
 80082ee:	f04f 0b00 	mov.w	fp, #0
 80082f2:	46da      	mov	sl, fp
 80082f4:	0728      	lsls	r0, r5, #28
 80082f6:	d5c1      	bpl.n	800827c <_strtod_l+0x84>
 80082f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082fc:	e7be      	b.n	800827c <_strtod_l+0x84>
 80082fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008302:	e7f7      	b.n	80082f4 <_strtod_l+0xfc>
 8008304:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800830a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800830e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008312:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008316:	e7ed      	b.n	80082f4 <_strtod_l+0xfc>
 8008318:	f8df b184 	ldr.w	fp, [pc, #388]	; 80084a0 <_strtod_l+0x2a8>
 800831c:	f04f 0a00 	mov.w	sl, #0
 8008320:	e7e8      	b.n	80082f4 <_strtod_l+0xfc>
 8008322:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008326:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800832a:	e7e3      	b.n	80082f4 <_strtod_l+0xfc>
 800832c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	921d      	str	r2, [sp, #116]	; 0x74
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f9      	beq.n	800832c <_strtod_l+0x134>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d09f      	beq.n	800827c <_strtod_l+0x84>
 800833c:	2301      	movs	r3, #1
 800833e:	f04f 0900 	mov.w	r9, #0
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008346:	930a      	str	r3, [sp, #40]	; 0x28
 8008348:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800834c:	464f      	mov	r7, r9
 800834e:	220a      	movs	r2, #10
 8008350:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008352:	7806      	ldrb	r6, [r0, #0]
 8008354:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008358:	b2d9      	uxtb	r1, r3
 800835a:	2909      	cmp	r1, #9
 800835c:	d92a      	bls.n	80083b4 <_strtod_l+0x1bc>
 800835e:	9907      	ldr	r1, [sp, #28]
 8008360:	462a      	mov	r2, r5
 8008362:	f7ff ff1b 	bl	800819c <strncmp>
 8008366:	b398      	cbz	r0, 80083d0 <_strtod_l+0x1d8>
 8008368:	2000      	movs	r0, #0
 800836a:	4633      	mov	r3, r6
 800836c:	463d      	mov	r5, r7
 800836e:	9007      	str	r0, [sp, #28]
 8008370:	4602      	mov	r2, r0
 8008372:	2b65      	cmp	r3, #101	; 0x65
 8008374:	d001      	beq.n	800837a <_strtod_l+0x182>
 8008376:	2b45      	cmp	r3, #69	; 0x45
 8008378:	d118      	bne.n	80083ac <_strtod_l+0x1b4>
 800837a:	b91d      	cbnz	r5, 8008384 <_strtod_l+0x18c>
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	4303      	orrs	r3, r0
 8008380:	d098      	beq.n	80082b4 <_strtod_l+0xbc>
 8008382:	2500      	movs	r5, #0
 8008384:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008388:	f108 0301 	add.w	r3, r8, #1
 800838c:	931d      	str	r3, [sp, #116]	; 0x74
 800838e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008392:	2b2b      	cmp	r3, #43	; 0x2b
 8008394:	d075      	beq.n	8008482 <_strtod_l+0x28a>
 8008396:	2b2d      	cmp	r3, #45	; 0x2d
 8008398:	d07b      	beq.n	8008492 <_strtod_l+0x29a>
 800839a:	f04f 0c00 	mov.w	ip, #0
 800839e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80083a2:	2909      	cmp	r1, #9
 80083a4:	f240 8082 	bls.w	80084ac <_strtod_l+0x2b4>
 80083a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80083ac:	2600      	movs	r6, #0
 80083ae:	e09d      	b.n	80084ec <_strtod_l+0x2f4>
 80083b0:	2300      	movs	r3, #0
 80083b2:	e7c4      	b.n	800833e <_strtod_l+0x146>
 80083b4:	2f08      	cmp	r7, #8
 80083b6:	bfd8      	it	le
 80083b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80083ba:	f100 0001 	add.w	r0, r0, #1
 80083be:	bfda      	itte	le
 80083c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80083c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80083c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80083ca:	3701      	adds	r7, #1
 80083cc:	901d      	str	r0, [sp, #116]	; 0x74
 80083ce:	e7bf      	b.n	8008350 <_strtod_l+0x158>
 80083d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083d2:	195a      	adds	r2, r3, r5
 80083d4:	921d      	str	r2, [sp, #116]	; 0x74
 80083d6:	5d5b      	ldrb	r3, [r3, r5]
 80083d8:	2f00      	cmp	r7, #0
 80083da:	d037      	beq.n	800844c <_strtod_l+0x254>
 80083dc:	9007      	str	r0, [sp, #28]
 80083de:	463d      	mov	r5, r7
 80083e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80083e4:	2a09      	cmp	r2, #9
 80083e6:	d912      	bls.n	800840e <_strtod_l+0x216>
 80083e8:	2201      	movs	r2, #1
 80083ea:	e7c2      	b.n	8008372 <_strtod_l+0x17a>
 80083ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	921d      	str	r2, [sp, #116]	; 0x74
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	3001      	adds	r0, #1
 80083f6:	2b30      	cmp	r3, #48	; 0x30
 80083f8:	d0f8      	beq.n	80083ec <_strtod_l+0x1f4>
 80083fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80083fe:	2a08      	cmp	r2, #8
 8008400:	f200 84db 	bhi.w	8008dba <_strtod_l+0xbc2>
 8008404:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008406:	9007      	str	r0, [sp, #28]
 8008408:	2000      	movs	r0, #0
 800840a:	920a      	str	r2, [sp, #40]	; 0x28
 800840c:	4605      	mov	r5, r0
 800840e:	3b30      	subs	r3, #48	; 0x30
 8008410:	f100 0201 	add.w	r2, r0, #1
 8008414:	d014      	beq.n	8008440 <_strtod_l+0x248>
 8008416:	9907      	ldr	r1, [sp, #28]
 8008418:	4411      	add	r1, r2
 800841a:	9107      	str	r1, [sp, #28]
 800841c:	462a      	mov	r2, r5
 800841e:	eb00 0e05 	add.w	lr, r0, r5
 8008422:	210a      	movs	r1, #10
 8008424:	4572      	cmp	r2, lr
 8008426:	d113      	bne.n	8008450 <_strtod_l+0x258>
 8008428:	182a      	adds	r2, r5, r0
 800842a:	2a08      	cmp	r2, #8
 800842c:	f105 0501 	add.w	r5, r5, #1
 8008430:	4405      	add	r5, r0
 8008432:	dc1c      	bgt.n	800846e <_strtod_l+0x276>
 8008434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008436:	220a      	movs	r2, #10
 8008438:	fb02 3301 	mla	r3, r2, r1, r3
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	2200      	movs	r2, #0
 8008440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008442:	1c59      	adds	r1, r3, #1
 8008444:	911d      	str	r1, [sp, #116]	; 0x74
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	4610      	mov	r0, r2
 800844a:	e7c9      	b.n	80083e0 <_strtod_l+0x1e8>
 800844c:	4638      	mov	r0, r7
 800844e:	e7d2      	b.n	80083f6 <_strtod_l+0x1fe>
 8008450:	2a08      	cmp	r2, #8
 8008452:	dc04      	bgt.n	800845e <_strtod_l+0x266>
 8008454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008456:	434e      	muls	r6, r1
 8008458:	9609      	str	r6, [sp, #36]	; 0x24
 800845a:	3201      	adds	r2, #1
 800845c:	e7e2      	b.n	8008424 <_strtod_l+0x22c>
 800845e:	f102 0c01 	add.w	ip, r2, #1
 8008462:	f1bc 0f10 	cmp.w	ip, #16
 8008466:	bfd8      	it	le
 8008468:	fb01 f909 	mulle.w	r9, r1, r9
 800846c:	e7f5      	b.n	800845a <_strtod_l+0x262>
 800846e:	2d10      	cmp	r5, #16
 8008470:	bfdc      	itt	le
 8008472:	220a      	movle	r2, #10
 8008474:	fb02 3909 	mlale	r9, r2, r9, r3
 8008478:	e7e1      	b.n	800843e <_strtod_l+0x246>
 800847a:	2300      	movs	r3, #0
 800847c:	9307      	str	r3, [sp, #28]
 800847e:	2201      	movs	r2, #1
 8008480:	e77c      	b.n	800837c <_strtod_l+0x184>
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	f108 0302 	add.w	r3, r8, #2
 800848a:	931d      	str	r3, [sp, #116]	; 0x74
 800848c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008490:	e785      	b.n	800839e <_strtod_l+0x1a6>
 8008492:	f04f 0c01 	mov.w	ip, #1
 8008496:	e7f6      	b.n	8008486 <_strtod_l+0x28e>
 8008498:	0800c774 	.word	0x0800c774
 800849c:	0800c4bc 	.word	0x0800c4bc
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084a6:	1c59      	adds	r1, r3, #1
 80084a8:	911d      	str	r1, [sp, #116]	; 0x74
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b30      	cmp	r3, #48	; 0x30
 80084ae:	d0f9      	beq.n	80084a4 <_strtod_l+0x2ac>
 80084b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80084b4:	2908      	cmp	r1, #8
 80084b6:	f63f af79 	bhi.w	80083ac <_strtod_l+0x1b4>
 80084ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80084be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084c0:	9308      	str	r3, [sp, #32]
 80084c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084c4:	1c59      	adds	r1, r3, #1
 80084c6:	911d      	str	r1, [sp, #116]	; 0x74
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80084ce:	2e09      	cmp	r6, #9
 80084d0:	d937      	bls.n	8008542 <_strtod_l+0x34a>
 80084d2:	9e08      	ldr	r6, [sp, #32]
 80084d4:	1b89      	subs	r1, r1, r6
 80084d6:	2908      	cmp	r1, #8
 80084d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80084dc:	dc02      	bgt.n	80084e4 <_strtod_l+0x2ec>
 80084de:	4576      	cmp	r6, lr
 80084e0:	bfa8      	it	ge
 80084e2:	4676      	movge	r6, lr
 80084e4:	f1bc 0f00 	cmp.w	ip, #0
 80084e8:	d000      	beq.n	80084ec <_strtod_l+0x2f4>
 80084ea:	4276      	negs	r6, r6
 80084ec:	2d00      	cmp	r5, #0
 80084ee:	d14f      	bne.n	8008590 <_strtod_l+0x398>
 80084f0:	9904      	ldr	r1, [sp, #16]
 80084f2:	4301      	orrs	r1, r0
 80084f4:	f47f aec2 	bne.w	800827c <_strtod_l+0x84>
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	f47f aedb 	bne.w	80082b4 <_strtod_l+0xbc>
 80084fe:	2b69      	cmp	r3, #105	; 0x69
 8008500:	d027      	beq.n	8008552 <_strtod_l+0x35a>
 8008502:	dc24      	bgt.n	800854e <_strtod_l+0x356>
 8008504:	2b49      	cmp	r3, #73	; 0x49
 8008506:	d024      	beq.n	8008552 <_strtod_l+0x35a>
 8008508:	2b4e      	cmp	r3, #78	; 0x4e
 800850a:	f47f aed3 	bne.w	80082b4 <_strtod_l+0xbc>
 800850e:	499e      	ldr	r1, [pc, #632]	; (8008788 <_strtod_l+0x590>)
 8008510:	a81d      	add	r0, sp, #116	; 0x74
 8008512:	f002 f8bb 	bl	800a68c <__match>
 8008516:	2800      	cmp	r0, #0
 8008518:	f43f aecc 	beq.w	80082b4 <_strtod_l+0xbc>
 800851c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b28      	cmp	r3, #40	; 0x28
 8008522:	d12d      	bne.n	8008580 <_strtod_l+0x388>
 8008524:	4999      	ldr	r1, [pc, #612]	; (800878c <_strtod_l+0x594>)
 8008526:	aa20      	add	r2, sp, #128	; 0x80
 8008528:	a81d      	add	r0, sp, #116	; 0x74
 800852a:	f002 f8c3 	bl	800a6b4 <__hexnan>
 800852e:	2805      	cmp	r0, #5
 8008530:	d126      	bne.n	8008580 <_strtod_l+0x388>
 8008532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008534:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008538:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800853c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008540:	e69c      	b.n	800827c <_strtod_l+0x84>
 8008542:	210a      	movs	r1, #10
 8008544:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008548:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800854c:	e7b9      	b.n	80084c2 <_strtod_l+0x2ca>
 800854e:	2b6e      	cmp	r3, #110	; 0x6e
 8008550:	e7db      	b.n	800850a <_strtod_l+0x312>
 8008552:	498f      	ldr	r1, [pc, #572]	; (8008790 <_strtod_l+0x598>)
 8008554:	a81d      	add	r0, sp, #116	; 0x74
 8008556:	f002 f899 	bl	800a68c <__match>
 800855a:	2800      	cmp	r0, #0
 800855c:	f43f aeaa 	beq.w	80082b4 <_strtod_l+0xbc>
 8008560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008562:	498c      	ldr	r1, [pc, #560]	; (8008794 <_strtod_l+0x59c>)
 8008564:	3b01      	subs	r3, #1
 8008566:	a81d      	add	r0, sp, #116	; 0x74
 8008568:	931d      	str	r3, [sp, #116]	; 0x74
 800856a:	f002 f88f 	bl	800a68c <__match>
 800856e:	b910      	cbnz	r0, 8008576 <_strtod_l+0x37e>
 8008570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008572:	3301      	adds	r3, #1
 8008574:	931d      	str	r3, [sp, #116]	; 0x74
 8008576:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80087a4 <_strtod_l+0x5ac>
 800857a:	f04f 0a00 	mov.w	sl, #0
 800857e:	e67d      	b.n	800827c <_strtod_l+0x84>
 8008580:	4885      	ldr	r0, [pc, #532]	; (8008798 <_strtod_l+0x5a0>)
 8008582:	f003 f825 	bl	800b5d0 <nan>
 8008586:	ed8d 0b04 	vstr	d0, [sp, #16]
 800858a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800858e:	e675      	b.n	800827c <_strtod_l+0x84>
 8008590:	9b07      	ldr	r3, [sp, #28]
 8008592:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008594:	1af3      	subs	r3, r6, r3
 8008596:	2f00      	cmp	r7, #0
 8008598:	bf08      	it	eq
 800859a:	462f      	moveq	r7, r5
 800859c:	2d10      	cmp	r5, #16
 800859e:	9308      	str	r3, [sp, #32]
 80085a0:	46a8      	mov	r8, r5
 80085a2:	bfa8      	it	ge
 80085a4:	f04f 0810 	movge.w	r8, #16
 80085a8:	f7f7 ffac 	bl	8000504 <__aeabi_ui2d>
 80085ac:	2d09      	cmp	r5, #9
 80085ae:	4682      	mov	sl, r0
 80085b0:	468b      	mov	fp, r1
 80085b2:	dd13      	ble.n	80085dc <_strtod_l+0x3e4>
 80085b4:	4b79      	ldr	r3, [pc, #484]	; (800879c <_strtod_l+0x5a4>)
 80085b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80085ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	4682      	mov	sl, r0
 80085c4:	4648      	mov	r0, r9
 80085c6:	468b      	mov	fp, r1
 80085c8:	f7f7 ff9c 	bl	8000504 <__aeabi_ui2d>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	f7f7 fe5a 	bl	800028c <__adddf3>
 80085d8:	4682      	mov	sl, r0
 80085da:	468b      	mov	fp, r1
 80085dc:	2d0f      	cmp	r5, #15
 80085de:	dc38      	bgt.n	8008652 <_strtod_l+0x45a>
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f43f ae4a 	beq.w	800827c <_strtod_l+0x84>
 80085e8:	dd24      	ble.n	8008634 <_strtod_l+0x43c>
 80085ea:	2b16      	cmp	r3, #22
 80085ec:	dc0b      	bgt.n	8008606 <_strtod_l+0x40e>
 80085ee:	4d6b      	ldr	r5, [pc, #428]	; (800879c <_strtod_l+0x5a4>)
 80085f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80085f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80085f8:	4652      	mov	r2, sl
 80085fa:	465b      	mov	r3, fp
 80085fc:	f7f7 fffc 	bl	80005f8 <__aeabi_dmul>
 8008600:	4682      	mov	sl, r0
 8008602:	468b      	mov	fp, r1
 8008604:	e63a      	b.n	800827c <_strtod_l+0x84>
 8008606:	9a08      	ldr	r2, [sp, #32]
 8008608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800860c:	4293      	cmp	r3, r2
 800860e:	db20      	blt.n	8008652 <_strtod_l+0x45a>
 8008610:	4c62      	ldr	r4, [pc, #392]	; (800879c <_strtod_l+0x5a4>)
 8008612:	f1c5 050f 	rsb	r5, r5, #15
 8008616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800861a:	4652      	mov	r2, sl
 800861c:	465b      	mov	r3, fp
 800861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008622:	f7f7 ffe9 	bl	80005f8 <__aeabi_dmul>
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	1b5d      	subs	r5, r3, r5
 800862a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800862e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008632:	e7e3      	b.n	80085fc <_strtod_l+0x404>
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	3316      	adds	r3, #22
 8008638:	db0b      	blt.n	8008652 <_strtod_l+0x45a>
 800863a:	9b07      	ldr	r3, [sp, #28]
 800863c:	4a57      	ldr	r2, [pc, #348]	; (800879c <_strtod_l+0x5a4>)
 800863e:	1b9e      	subs	r6, r3, r6
 8008640:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008644:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	f7f8 f8fe 	bl	800084c <__aeabi_ddiv>
 8008650:	e7d6      	b.n	8008600 <_strtod_l+0x408>
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	eba5 0808 	sub.w	r8, r5, r8
 8008658:	4498      	add	r8, r3
 800865a:	f1b8 0f00 	cmp.w	r8, #0
 800865e:	dd71      	ble.n	8008744 <_strtod_l+0x54c>
 8008660:	f018 030f 	ands.w	r3, r8, #15
 8008664:	d00a      	beq.n	800867c <_strtod_l+0x484>
 8008666:	494d      	ldr	r1, [pc, #308]	; (800879c <_strtod_l+0x5a4>)
 8008668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800866c:	4652      	mov	r2, sl
 800866e:	465b      	mov	r3, fp
 8008670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008674:	f7f7 ffc0 	bl	80005f8 <__aeabi_dmul>
 8008678:	4682      	mov	sl, r0
 800867a:	468b      	mov	fp, r1
 800867c:	f038 080f 	bics.w	r8, r8, #15
 8008680:	d04d      	beq.n	800871e <_strtod_l+0x526>
 8008682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008686:	dd22      	ble.n	80086ce <_strtod_l+0x4d6>
 8008688:	2500      	movs	r5, #0
 800868a:	462e      	mov	r6, r5
 800868c:	9509      	str	r5, [sp, #36]	; 0x24
 800868e:	9507      	str	r5, [sp, #28]
 8008690:	2322      	movs	r3, #34	; 0x22
 8008692:	f8df b110 	ldr.w	fp, [pc, #272]	; 80087a4 <_strtod_l+0x5ac>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	f04f 0a00 	mov.w	sl, #0
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f43f adec 	beq.w	800827c <_strtod_l+0x84>
 80086a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086a6:	4620      	mov	r0, r4
 80086a8:	f002 f984 	bl	800a9b4 <_Bfree>
 80086ac:	9907      	ldr	r1, [sp, #28]
 80086ae:	4620      	mov	r0, r4
 80086b0:	f002 f980 	bl	800a9b4 <_Bfree>
 80086b4:	4631      	mov	r1, r6
 80086b6:	4620      	mov	r0, r4
 80086b8:	f002 f97c 	bl	800a9b4 <_Bfree>
 80086bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086be:	4620      	mov	r0, r4
 80086c0:	f002 f978 	bl	800a9b4 <_Bfree>
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f002 f974 	bl	800a9b4 <_Bfree>
 80086cc:	e5d6      	b.n	800827c <_strtod_l+0x84>
 80086ce:	2300      	movs	r3, #0
 80086d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80086d4:	4650      	mov	r0, sl
 80086d6:	4659      	mov	r1, fp
 80086d8:	4699      	mov	r9, r3
 80086da:	f1b8 0f01 	cmp.w	r8, #1
 80086de:	dc21      	bgt.n	8008724 <_strtod_l+0x52c>
 80086e0:	b10b      	cbz	r3, 80086e6 <_strtod_l+0x4ee>
 80086e2:	4682      	mov	sl, r0
 80086e4:	468b      	mov	fp, r1
 80086e6:	4b2e      	ldr	r3, [pc, #184]	; (80087a0 <_strtod_l+0x5a8>)
 80086e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80086ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80086f0:	4652      	mov	r2, sl
 80086f2:	465b      	mov	r3, fp
 80086f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	4b29      	ldr	r3, [pc, #164]	; (80087a4 <_strtod_l+0x5ac>)
 80086fe:	460a      	mov	r2, r1
 8008700:	400b      	ands	r3, r1
 8008702:	4929      	ldr	r1, [pc, #164]	; (80087a8 <_strtod_l+0x5b0>)
 8008704:	428b      	cmp	r3, r1
 8008706:	4682      	mov	sl, r0
 8008708:	d8be      	bhi.n	8008688 <_strtod_l+0x490>
 800870a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800870e:	428b      	cmp	r3, r1
 8008710:	bf86      	itte	hi
 8008712:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80087ac <_strtod_l+0x5b4>
 8008716:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800871a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800871e:	2300      	movs	r3, #0
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	e081      	b.n	8008828 <_strtod_l+0x630>
 8008724:	f018 0f01 	tst.w	r8, #1
 8008728:	d007      	beq.n	800873a <_strtod_l+0x542>
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <_strtod_l+0x5a8>)
 800872c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	f7f7 ff60 	bl	80005f8 <__aeabi_dmul>
 8008738:	2301      	movs	r3, #1
 800873a:	f109 0901 	add.w	r9, r9, #1
 800873e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008742:	e7ca      	b.n	80086da <_strtod_l+0x4e2>
 8008744:	d0eb      	beq.n	800871e <_strtod_l+0x526>
 8008746:	f1c8 0800 	rsb	r8, r8, #0
 800874a:	f018 020f 	ands.w	r2, r8, #15
 800874e:	d00a      	beq.n	8008766 <_strtod_l+0x56e>
 8008750:	4b12      	ldr	r3, [pc, #72]	; (800879c <_strtod_l+0x5a4>)
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	4650      	mov	r0, sl
 8008758:	4659      	mov	r1, fp
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f8 f875 	bl	800084c <__aeabi_ddiv>
 8008762:	4682      	mov	sl, r0
 8008764:	468b      	mov	fp, r1
 8008766:	ea5f 1828 	movs.w	r8, r8, asr #4
 800876a:	d0d8      	beq.n	800871e <_strtod_l+0x526>
 800876c:	f1b8 0f1f 	cmp.w	r8, #31
 8008770:	dd1e      	ble.n	80087b0 <_strtod_l+0x5b8>
 8008772:	2500      	movs	r5, #0
 8008774:	462e      	mov	r6, r5
 8008776:	9509      	str	r5, [sp, #36]	; 0x24
 8008778:	9507      	str	r5, [sp, #28]
 800877a:	2322      	movs	r3, #34	; 0x22
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	f04f 0b00 	mov.w	fp, #0
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	e789      	b.n	800869c <_strtod_l+0x4a4>
 8008788:	0800c48e 	.word	0x0800c48e
 800878c:	0800c4d0 	.word	0x0800c4d0
 8008790:	0800c486 	.word	0x0800c486
 8008794:	0800c614 	.word	0x0800c614
 8008798:	0800c46b 	.word	0x0800c46b
 800879c:	0800c810 	.word	0x0800c810
 80087a0:	0800c7e8 	.word	0x0800c7e8
 80087a4:	7ff00000 	.word	0x7ff00000
 80087a8:	7ca00000 	.word	0x7ca00000
 80087ac:	7fefffff 	.word	0x7fefffff
 80087b0:	f018 0310 	ands.w	r3, r8, #16
 80087b4:	bf18      	it	ne
 80087b6:	236a      	movne	r3, #106	; 0x6a
 80087b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008b70 <_strtod_l+0x978>
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	4650      	mov	r0, sl
 80087c0:	4659      	mov	r1, fp
 80087c2:	2300      	movs	r3, #0
 80087c4:	f018 0f01 	tst.w	r8, #1
 80087c8:	d004      	beq.n	80087d4 <_strtod_l+0x5dc>
 80087ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	2301      	movs	r3, #1
 80087d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80087d8:	f109 0908 	add.w	r9, r9, #8
 80087dc:	d1f2      	bne.n	80087c4 <_strtod_l+0x5cc>
 80087de:	b10b      	cbz	r3, 80087e4 <_strtod_l+0x5ec>
 80087e0:	4682      	mov	sl, r0
 80087e2:	468b      	mov	fp, r1
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	b1bb      	cbz	r3, 8008818 <_strtod_l+0x620>
 80087e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80087ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	4659      	mov	r1, fp
 80087f4:	dd10      	ble.n	8008818 <_strtod_l+0x620>
 80087f6:	2b1f      	cmp	r3, #31
 80087f8:	f340 8128 	ble.w	8008a4c <_strtod_l+0x854>
 80087fc:	2b34      	cmp	r3, #52	; 0x34
 80087fe:	bfde      	ittt	le
 8008800:	3b20      	suble	r3, #32
 8008802:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008806:	fa02 f303 	lslle.w	r3, r2, r3
 800880a:	f04f 0a00 	mov.w	sl, #0
 800880e:	bfcc      	ite	gt
 8008810:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008814:	ea03 0b01 	andle.w	fp, r3, r1
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	4650      	mov	r0, sl
 800881e:	4659      	mov	r1, fp
 8008820:	f7f8 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d1a4      	bne.n	8008772 <_strtod_l+0x57a>
 8008828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800882e:	462b      	mov	r3, r5
 8008830:	463a      	mov	r2, r7
 8008832:	4620      	mov	r0, r4
 8008834:	f002 f92a 	bl	800aa8c <__s2b>
 8008838:	9009      	str	r0, [sp, #36]	; 0x24
 800883a:	2800      	cmp	r0, #0
 800883c:	f43f af24 	beq.w	8008688 <_strtod_l+0x490>
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	1b9e      	subs	r6, r3, r6
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfb4      	ite	lt
 800884a:	4633      	movlt	r3, r6
 800884c:	2300      	movge	r3, #0
 800884e:	9310      	str	r3, [sp, #64]	; 0x40
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2500      	movs	r5, #0
 8008854:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008858:	9318      	str	r3, [sp, #96]	; 0x60
 800885a:	462e      	mov	r6, r5
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	4620      	mov	r0, r4
 8008860:	6859      	ldr	r1, [r3, #4]
 8008862:	f002 f867 	bl	800a934 <_Balloc>
 8008866:	9007      	str	r0, [sp, #28]
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f af11 	beq.w	8008690 <_strtod_l+0x498>
 800886e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	3202      	adds	r2, #2
 8008874:	f103 010c 	add.w	r1, r3, #12
 8008878:	0092      	lsls	r2, r2, #2
 800887a:	300c      	adds	r0, #12
 800887c:	f7fe fbac 	bl	8006fd8 <memcpy>
 8008880:	ec4b ab10 	vmov	d0, sl, fp
 8008884:	aa20      	add	r2, sp, #128	; 0x80
 8008886:	a91f      	add	r1, sp, #124	; 0x7c
 8008888:	4620      	mov	r0, r4
 800888a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800888e:	f002 fc39 	bl	800b104 <__d2b>
 8008892:	901e      	str	r0, [sp, #120]	; 0x78
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f aefb 	beq.w	8008690 <_strtod_l+0x498>
 800889a:	2101      	movs	r1, #1
 800889c:	4620      	mov	r0, r4
 800889e:	f002 f98f 	bl	800abc0 <__i2b>
 80088a2:	4606      	mov	r6, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f43f aef3 	beq.w	8008690 <_strtod_l+0x498>
 80088aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088ac:	9904      	ldr	r1, [sp, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfab      	itete	ge
 80088b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80088b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80088b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80088b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80088bc:	bfac      	ite	ge
 80088be:	eb03 0902 	addge.w	r9, r3, r2
 80088c2:	1ad7      	sublt	r7, r2, r3
 80088c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088c6:	eba3 0801 	sub.w	r8, r3, r1
 80088ca:	4490      	add	r8, r2
 80088cc:	4ba3      	ldr	r3, [pc, #652]	; (8008b5c <_strtod_l+0x964>)
 80088ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80088d2:	4598      	cmp	r8, r3
 80088d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80088d8:	f280 80cc 	bge.w	8008a74 <_strtod_l+0x87c>
 80088dc:	eba3 0308 	sub.w	r3, r3, r8
 80088e0:	2b1f      	cmp	r3, #31
 80088e2:	eba2 0203 	sub.w	r2, r2, r3
 80088e6:	f04f 0101 	mov.w	r1, #1
 80088ea:	f300 80b6 	bgt.w	8008a5a <_strtod_l+0x862>
 80088ee:	fa01 f303 	lsl.w	r3, r1, r3
 80088f2:	9311      	str	r3, [sp, #68]	; 0x44
 80088f4:	2300      	movs	r3, #0
 80088f6:	930c      	str	r3, [sp, #48]	; 0x30
 80088f8:	eb09 0802 	add.w	r8, r9, r2
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	45c1      	cmp	r9, r8
 8008900:	4417      	add	r7, r2
 8008902:	441f      	add	r7, r3
 8008904:	464b      	mov	r3, r9
 8008906:	bfa8      	it	ge
 8008908:	4643      	movge	r3, r8
 800890a:	42bb      	cmp	r3, r7
 800890c:	bfa8      	it	ge
 800890e:	463b      	movge	r3, r7
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfc2      	ittt	gt
 8008914:	eba8 0803 	subgt.w	r8, r8, r3
 8008918:	1aff      	subgt	r7, r7, r3
 800891a:	eba9 0903 	subgt.w	r9, r9, r3
 800891e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	dd17      	ble.n	8008954 <_strtod_l+0x75c>
 8008924:	4631      	mov	r1, r6
 8008926:	461a      	mov	r2, r3
 8008928:	4620      	mov	r0, r4
 800892a:	f002 fa05 	bl	800ad38 <__pow5mult>
 800892e:	4606      	mov	r6, r0
 8008930:	2800      	cmp	r0, #0
 8008932:	f43f aead 	beq.w	8008690 <_strtod_l+0x498>
 8008936:	4601      	mov	r1, r0
 8008938:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800893a:	4620      	mov	r0, r4
 800893c:	f002 f956 	bl	800abec <__multiply>
 8008940:	900f      	str	r0, [sp, #60]	; 0x3c
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f aea4 	beq.w	8008690 <_strtod_l+0x498>
 8008948:	991e      	ldr	r1, [sp, #120]	; 0x78
 800894a:	4620      	mov	r0, r4
 800894c:	f002 f832 	bl	800a9b4 <_Bfree>
 8008950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008952:	931e      	str	r3, [sp, #120]	; 0x78
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	f300 8091 	bgt.w	8008a7e <_strtod_l+0x886>
 800895c:	9b08      	ldr	r3, [sp, #32]
 800895e:	2b00      	cmp	r3, #0
 8008960:	dd08      	ble.n	8008974 <_strtod_l+0x77c>
 8008962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008964:	9907      	ldr	r1, [sp, #28]
 8008966:	4620      	mov	r0, r4
 8008968:	f002 f9e6 	bl	800ad38 <__pow5mult>
 800896c:	9007      	str	r0, [sp, #28]
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f ae8e 	beq.w	8008690 <_strtod_l+0x498>
 8008974:	2f00      	cmp	r7, #0
 8008976:	dd08      	ble.n	800898a <_strtod_l+0x792>
 8008978:	9907      	ldr	r1, [sp, #28]
 800897a:	463a      	mov	r2, r7
 800897c:	4620      	mov	r0, r4
 800897e:	f002 fa35 	bl	800adec <__lshift>
 8008982:	9007      	str	r0, [sp, #28]
 8008984:	2800      	cmp	r0, #0
 8008986:	f43f ae83 	beq.w	8008690 <_strtod_l+0x498>
 800898a:	f1b9 0f00 	cmp.w	r9, #0
 800898e:	dd08      	ble.n	80089a2 <_strtod_l+0x7aa>
 8008990:	4631      	mov	r1, r6
 8008992:	464a      	mov	r2, r9
 8008994:	4620      	mov	r0, r4
 8008996:	f002 fa29 	bl	800adec <__lshift>
 800899a:	4606      	mov	r6, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f ae77 	beq.w	8008690 <_strtod_l+0x498>
 80089a2:	9a07      	ldr	r2, [sp, #28]
 80089a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80089a6:	4620      	mov	r0, r4
 80089a8:	f002 faa8 	bl	800aefc <__mdiff>
 80089ac:	4605      	mov	r5, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f43f ae6e 	beq.w	8008690 <_strtod_l+0x498>
 80089b4:	68c3      	ldr	r3, [r0, #12]
 80089b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b8:	2300      	movs	r3, #0
 80089ba:	60c3      	str	r3, [r0, #12]
 80089bc:	4631      	mov	r1, r6
 80089be:	f002 fa81 	bl	800aec4 <__mcmp>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	da65      	bge.n	8008a92 <_strtod_l+0x89a>
 80089c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089c8:	ea53 030a 	orrs.w	r3, r3, sl
 80089cc:	f040 8087 	bne.w	8008ade <_strtod_l+0x8e6>
 80089d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 8082 	bne.w	8008ade <_strtod_l+0x8e6>
 80089da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089de:	0d1b      	lsrs	r3, r3, #20
 80089e0:	051b      	lsls	r3, r3, #20
 80089e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80089e6:	d97a      	bls.n	8008ade <_strtod_l+0x8e6>
 80089e8:	696b      	ldr	r3, [r5, #20]
 80089ea:	b913      	cbnz	r3, 80089f2 <_strtod_l+0x7fa>
 80089ec:	692b      	ldr	r3, [r5, #16]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	dd75      	ble.n	8008ade <_strtod_l+0x8e6>
 80089f2:	4629      	mov	r1, r5
 80089f4:	2201      	movs	r2, #1
 80089f6:	4620      	mov	r0, r4
 80089f8:	f002 f9f8 	bl	800adec <__lshift>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4605      	mov	r5, r0
 8008a00:	f002 fa60 	bl	800aec4 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	dd6a      	ble.n	8008ade <_strtod_l+0x8e6>
 8008a08:	9904      	ldr	r1, [sp, #16]
 8008a0a:	4a55      	ldr	r2, [pc, #340]	; (8008b60 <_strtod_l+0x968>)
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	f000 8085 	beq.w	8008b1e <_strtod_l+0x926>
 8008a14:	ea02 010b 	and.w	r1, r2, fp
 8008a18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a1c:	dc7f      	bgt.n	8008b1e <_strtod_l+0x926>
 8008a1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a22:	f77f aeaa 	ble.w	800877a <_strtod_l+0x582>
 8008a26:	4a4f      	ldr	r2, [pc, #316]	; (8008b64 <_strtod_l+0x96c>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008a2e:	4650      	mov	r0, sl
 8008a30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008a34:	4659      	mov	r1, fp
 8008a36:	f7f7 fddf 	bl	80005f8 <__aeabi_dmul>
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4303      	orrs	r3, r0
 8008a3e:	bf08      	it	eq
 8008a40:	2322      	moveq	r3, #34	; 0x22
 8008a42:	4682      	mov	sl, r0
 8008a44:	468b      	mov	fp, r1
 8008a46:	bf08      	it	eq
 8008a48:	6023      	streq	r3, [r4, #0]
 8008a4a:	e62b      	b.n	80086a4 <_strtod_l+0x4ac>
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	ea03 0a0a 	and.w	sl, r3, sl
 8008a58:	e6de      	b.n	8008818 <_strtod_l+0x620>
 8008a5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008a5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008a62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008a66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a6a:	fa01 f308 	lsl.w	r3, r1, r8
 8008a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a70:	9111      	str	r1, [sp, #68]	; 0x44
 8008a72:	e741      	b.n	80088f8 <_strtod_l+0x700>
 8008a74:	2300      	movs	r3, #0
 8008a76:	930c      	str	r3, [sp, #48]	; 0x30
 8008a78:	2301      	movs	r3, #1
 8008a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a7c:	e73c      	b.n	80088f8 <_strtod_l+0x700>
 8008a7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a80:	4642      	mov	r2, r8
 8008a82:	4620      	mov	r0, r4
 8008a84:	f002 f9b2 	bl	800adec <__lshift>
 8008a88:	901e      	str	r0, [sp, #120]	; 0x78
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f47f af66 	bne.w	800895c <_strtod_l+0x764>
 8008a90:	e5fe      	b.n	8008690 <_strtod_l+0x498>
 8008a92:	465f      	mov	r7, fp
 8008a94:	d16e      	bne.n	8008b74 <_strtod_l+0x97c>
 8008a96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a9c:	b342      	cbz	r2, 8008af0 <_strtod_l+0x8f8>
 8008a9e:	4a32      	ldr	r2, [pc, #200]	; (8008b68 <_strtod_l+0x970>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d128      	bne.n	8008af6 <_strtod_l+0x8fe>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	b1eb      	cbz	r3, 8008ae6 <_strtod_l+0x8ee>
 8008aaa:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <_strtod_l+0x968>)
 8008aac:	403a      	ands	r2, r7
 8008aae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008ab2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ab6:	d819      	bhi.n	8008aec <_strtod_l+0x8f4>
 8008ab8:	0d12      	lsrs	r2, r2, #20
 8008aba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	4298      	cmp	r0, r3
 8008ac4:	d117      	bne.n	8008af6 <_strtod_l+0x8fe>
 8008ac6:	4b29      	ldr	r3, [pc, #164]	; (8008b6c <_strtod_l+0x974>)
 8008ac8:	429f      	cmp	r7, r3
 8008aca:	d102      	bne.n	8008ad2 <_strtod_l+0x8da>
 8008acc:	3001      	adds	r0, #1
 8008ace:	f43f addf 	beq.w	8008690 <_strtod_l+0x498>
 8008ad2:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <_strtod_l+0x968>)
 8008ad4:	403b      	ands	r3, r7
 8008ad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008ada:	f04f 0a00 	mov.w	sl, #0
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1a0      	bne.n	8008a26 <_strtod_l+0x82e>
 8008ae4:	e5de      	b.n	80086a4 <_strtod_l+0x4ac>
 8008ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aea:	e7ea      	b.n	8008ac2 <_strtod_l+0x8ca>
 8008aec:	460b      	mov	r3, r1
 8008aee:	e7e8      	b.n	8008ac2 <_strtod_l+0x8ca>
 8008af0:	ea53 030a 	orrs.w	r3, r3, sl
 8008af4:	d088      	beq.n	8008a08 <_strtod_l+0x810>
 8008af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008af8:	b1db      	cbz	r3, 8008b32 <_strtod_l+0x93a>
 8008afa:	423b      	tst	r3, r7
 8008afc:	d0ef      	beq.n	8008ade <_strtod_l+0x8e6>
 8008afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b00:	9a04      	ldr	r2, [sp, #16]
 8008b02:	4650      	mov	r0, sl
 8008b04:	4659      	mov	r1, fp
 8008b06:	b1c3      	cbz	r3, 8008b3a <_strtod_l+0x942>
 8008b08:	f7ff fb5a 	bl	80081c0 <sulp>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b14:	f7f7 fbba 	bl	800028c <__adddf3>
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	e7df      	b.n	8008ade <_strtod_l+0x8e6>
 8008b1e:	4013      	ands	r3, r2
 8008b20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008b30:	e7d5      	b.n	8008ade <_strtod_l+0x8e6>
 8008b32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b34:	ea13 0f0a 	tst.w	r3, sl
 8008b38:	e7e0      	b.n	8008afc <_strtod_l+0x904>
 8008b3a:	f7ff fb41 	bl	80081c0 <sulp>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b46:	f7f7 fb9f 	bl	8000288 <__aeabi_dsub>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4682      	mov	sl, r0
 8008b50:	468b      	mov	fp, r1
 8008b52:	f7f7 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d0c1      	beq.n	8008ade <_strtod_l+0x8e6>
 8008b5a:	e60e      	b.n	800877a <_strtod_l+0x582>
 8008b5c:	fffffc02 	.word	0xfffffc02
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	39500000 	.word	0x39500000
 8008b68:	000fffff 	.word	0x000fffff
 8008b6c:	7fefffff 	.word	0x7fefffff
 8008b70:	0800c4e8 	.word	0x0800c4e8
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	f002 fb20 	bl	800b1bc <__ratio>
 8008b7c:	ec59 8b10 	vmov	r8, r9, d0
 8008b80:	ee10 0a10 	vmov	r0, s0
 8008b84:	2200      	movs	r2, #0
 8008b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 ffb0 	bl	8000af0 <__aeabi_dcmple>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d07c      	beq.n	8008c8e <_strtod_l+0xa96>
 8008b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d04c      	beq.n	8008c34 <_strtod_l+0xa3c>
 8008b9a:	4b95      	ldr	r3, [pc, #596]	; (8008df0 <_strtod_l+0xbf8>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008ba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008df0 <_strtod_l+0xbf8>
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	4b92      	ldr	r3, [pc, #584]	; (8008df4 <_strtod_l+0xbfc>)
 8008bac:	403b      	ands	r3, r7
 8008bae:	9311      	str	r3, [sp, #68]	; 0x44
 8008bb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bb2:	4b91      	ldr	r3, [pc, #580]	; (8008df8 <_strtod_l+0xc00>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	f040 80b2 	bne.w	8008d1e <_strtod_l+0xb26>
 8008bba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008bc6:	ec4b ab10 	vmov	d0, sl, fp
 8008bca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008bce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bd2:	f002 fa1b 	bl	800b00c <__ulp>
 8008bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bda:	ec53 2b10 	vmov	r2, r3, d0
 8008bde:	f7f7 fd0b 	bl	80005f8 <__aeabi_dmul>
 8008be2:	4652      	mov	r2, sl
 8008be4:	465b      	mov	r3, fp
 8008be6:	f7f7 fb51 	bl	800028c <__adddf3>
 8008bea:	460b      	mov	r3, r1
 8008bec:	4981      	ldr	r1, [pc, #516]	; (8008df4 <_strtod_l+0xbfc>)
 8008bee:	4a83      	ldr	r2, [pc, #524]	; (8008dfc <_strtod_l+0xc04>)
 8008bf0:	4019      	ands	r1, r3
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	4682      	mov	sl, r0
 8008bf6:	d95e      	bls.n	8008cb6 <_strtod_l+0xabe>
 8008bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bfa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d103      	bne.n	8008c0a <_strtod_l+0xa12>
 8008c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c04:	3301      	adds	r3, #1
 8008c06:	f43f ad43 	beq.w	8008690 <_strtod_l+0x498>
 8008c0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008e08 <_strtod_l+0xc10>
 8008c0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c14:	4620      	mov	r0, r4
 8008c16:	f001 fecd 	bl	800a9b4 <_Bfree>
 8008c1a:	9907      	ldr	r1, [sp, #28]
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f001 fec9 	bl	800a9b4 <_Bfree>
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	f001 fec5 	bl	800a9b4 <_Bfree>
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f001 fec1 	bl	800a9b4 <_Bfree>
 8008c32:	e613      	b.n	800885c <_strtod_l+0x664>
 8008c34:	f1ba 0f00 	cmp.w	sl, #0
 8008c38:	d11b      	bne.n	8008c72 <_strtod_l+0xa7a>
 8008c3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c3e:	b9f3      	cbnz	r3, 8008c7e <_strtod_l+0xa86>
 8008c40:	4b6b      	ldr	r3, [pc, #428]	; (8008df0 <_strtod_l+0xbf8>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 ff48 	bl	8000adc <__aeabi_dcmplt>
 8008c4c:	b9d0      	cbnz	r0, 8008c84 <_strtod_l+0xa8c>
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	4b6b      	ldr	r3, [pc, #428]	; (8008e00 <_strtod_l+0xc08>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008c66:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008c6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008c70:	e79b      	b.n	8008baa <_strtod_l+0x9b2>
 8008c72:	f1ba 0f01 	cmp.w	sl, #1
 8008c76:	d102      	bne.n	8008c7e <_strtod_l+0xa86>
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	f43f ad7e 	beq.w	800877a <_strtod_l+0x582>
 8008c7e:	4b61      	ldr	r3, [pc, #388]	; (8008e04 <_strtod_l+0xc0c>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	e78c      	b.n	8008b9e <_strtod_l+0x9a6>
 8008c84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008e00 <_strtod_l+0xc08>
 8008c88:	f04f 0800 	mov.w	r8, #0
 8008c8c:	e7e7      	b.n	8008c5e <_strtod_l+0xa66>
 8008c8e:	4b5c      	ldr	r3, [pc, #368]	; (8008e00 <_strtod_l+0xc08>)
 8008c90:	4640      	mov	r0, r8
 8008c92:	4649      	mov	r1, r9
 8008c94:	2200      	movs	r2, #0
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4689      	mov	r9, r1
 8008ca0:	b933      	cbnz	r3, 8008cb0 <_strtod_l+0xab8>
 8008ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8008ca8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008caa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008cae:	e7dd      	b.n	8008c6c <_strtod_l+0xa74>
 8008cb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008cb4:	e7f9      	b.n	8008caa <_strtod_l+0xab2>
 8008cb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1a8      	bne.n	8008c12 <_strtod_l+0xa1a>
 8008cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cc6:	0d1b      	lsrs	r3, r3, #20
 8008cc8:	051b      	lsls	r3, r3, #20
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d1a1      	bne.n	8008c12 <_strtod_l+0xa1a>
 8008cce:	4640      	mov	r0, r8
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	f7f7 fff1 	bl	8000cb8 <__aeabi_d2lz>
 8008cd6:	f7f7 fc61 	bl	800059c <__aeabi_l2d>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4640      	mov	r0, r8
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f7f7 fad1 	bl	8000288 <__aeabi_dsub>
 8008ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ce8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cec:	ea43 030a 	orr.w	r3, r3, sl
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	d053      	beq.n	8008da0 <_strtod_l+0xba8>
 8008cf8:	a335      	add	r3, pc, #212	; (adr r3, 8008dd0 <_strtod_l+0xbd8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 feed 	bl	8000adc <__aeabi_dcmplt>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f47f acce 	bne.w	80086a4 <_strtod_l+0x4ac>
 8008d08:	a333      	add	r3, pc, #204	; (adr r3, 8008dd8 <_strtod_l+0xbe0>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4649      	mov	r1, r9
 8008d12:	f7f7 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f43f af7b 	beq.w	8008c12 <_strtod_l+0xa1a>
 8008d1c:	e4c2      	b.n	80086a4 <_strtod_l+0x4ac>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	b333      	cbz	r3, 8008d70 <_strtod_l+0xb78>
 8008d22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d28:	d822      	bhi.n	8008d70 <_strtod_l+0xb78>
 8008d2a:	a32d      	add	r3, pc, #180	; (adr r3, 8008de0 <_strtod_l+0xbe8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	4640      	mov	r0, r8
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 fedc 	bl	8000af0 <__aeabi_dcmple>
 8008d38:	b1a0      	cbz	r0, 8008d64 <_strtod_l+0xb6c>
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f7f7 ff33 	bl	8000ba8 <__aeabi_d2uiz>
 8008d42:	2801      	cmp	r0, #1
 8008d44:	bf38      	it	cc
 8008d46:	2001      	movcc	r0, #1
 8008d48:	f7f7 fbdc 	bl	8000504 <__aeabi_ui2d>
 8008d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4689      	mov	r9, r1
 8008d52:	bb13      	cbnz	r3, 8008d9a <_strtod_l+0xba2>
 8008d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d58:	9014      	str	r0, [sp, #80]	; 0x50
 8008d5a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d7c:	f002 f946 	bl	800b00c <__ulp>
 8008d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d84:	ec53 2b10 	vmov	r2, r3, d0
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d90:	f7f7 fa7c 	bl	800028c <__adddf3>
 8008d94:	4682      	mov	sl, r0
 8008d96:	468b      	mov	fp, r1
 8008d98:	e78f      	b.n	8008cba <_strtod_l+0xac2>
 8008d9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008d9e:	e7dd      	b.n	8008d5c <_strtod_l+0xb64>
 8008da0:	a311      	add	r3, pc, #68	; (adr r3, 8008de8 <_strtod_l+0xbf0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fe99 	bl	8000adc <__aeabi_dcmplt>
 8008daa:	e7b4      	b.n	8008d16 <_strtod_l+0xb1e>
 8008dac:	2300      	movs	r3, #0
 8008dae:	930e      	str	r3, [sp, #56]	; 0x38
 8008db0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008db2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	f7ff ba65 	b.w	8008284 <_strtod_l+0x8c>
 8008dba:	2b65      	cmp	r3, #101	; 0x65
 8008dbc:	f43f ab5d 	beq.w	800847a <_strtod_l+0x282>
 8008dc0:	2b45      	cmp	r3, #69	; 0x45
 8008dc2:	f43f ab5a 	beq.w	800847a <_strtod_l+0x282>
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f7ff bb92 	b.w	80084f0 <_strtod_l+0x2f8>
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fdfffff 	.word	0x3fdfffff
 8008dd8:	35afe535 	.word	0x35afe535
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	ffc00000 	.word	0xffc00000
 8008de4:	41dfffff 	.word	0x41dfffff
 8008de8:	94a03595 	.word	0x94a03595
 8008dec:	3fcfffff 	.word	0x3fcfffff
 8008df0:	3ff00000 	.word	0x3ff00000
 8008df4:	7ff00000 	.word	0x7ff00000
 8008df8:	7fe00000 	.word	0x7fe00000
 8008dfc:	7c9fffff 	.word	0x7c9fffff
 8008e00:	3fe00000 	.word	0x3fe00000
 8008e04:	bff00000 	.word	0xbff00000
 8008e08:	7fefffff 	.word	0x7fefffff

08008e0c <_strtod_r>:
 8008e0c:	4b01      	ldr	r3, [pc, #4]	; (8008e14 <_strtod_r+0x8>)
 8008e0e:	f7ff b9f3 	b.w	80081f8 <_strtod_l>
 8008e12:	bf00      	nop
 8008e14:	2000007c 	.word	0x2000007c

08008e18 <_strtol_l.isra.0>:
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1e:	d001      	beq.n	8008e24 <_strtol_l.isra.0+0xc>
 8008e20:	2b24      	cmp	r3, #36	; 0x24
 8008e22:	d906      	bls.n	8008e32 <_strtol_l.isra.0+0x1a>
 8008e24:	f7fe f894 	bl	8006f50 <__errno>
 8008e28:	2316      	movs	r3, #22
 8008e2a:	6003      	str	r3, [r0, #0]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	4f3a      	ldr	r7, [pc, #232]	; (8008f1c <_strtol_l.isra.0+0x104>)
 8008e34:	468e      	mov	lr, r1
 8008e36:	4676      	mov	r6, lr
 8008e38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e3c:	5de5      	ldrb	r5, [r4, r7]
 8008e3e:	f015 0508 	ands.w	r5, r5, #8
 8008e42:	d1f8      	bne.n	8008e36 <_strtol_l.isra.0+0x1e>
 8008e44:	2c2d      	cmp	r4, #45	; 0x2d
 8008e46:	d134      	bne.n	8008eb2 <_strtol_l.isra.0+0x9a>
 8008e48:	f89e 4000 	ldrb.w	r4, [lr]
 8008e4c:	f04f 0801 	mov.w	r8, #1
 8008e50:	f106 0e02 	add.w	lr, r6, #2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d05c      	beq.n	8008f12 <_strtol_l.isra.0+0xfa>
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d10c      	bne.n	8008e76 <_strtol_l.isra.0+0x5e>
 8008e5c:	2c30      	cmp	r4, #48	; 0x30
 8008e5e:	d10a      	bne.n	8008e76 <_strtol_l.isra.0+0x5e>
 8008e60:	f89e 4000 	ldrb.w	r4, [lr]
 8008e64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e68:	2c58      	cmp	r4, #88	; 0x58
 8008e6a:	d14d      	bne.n	8008f08 <_strtol_l.isra.0+0xf0>
 8008e6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008e70:	2310      	movs	r3, #16
 8008e72:	f10e 0e02 	add.w	lr, lr, #2
 8008e76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008e7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008e7e:	2600      	movs	r6, #0
 8008e80:	fbbc f9f3 	udiv	r9, ip, r3
 8008e84:	4635      	mov	r5, r6
 8008e86:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008e8e:	2f09      	cmp	r7, #9
 8008e90:	d818      	bhi.n	8008ec4 <_strtol_l.isra.0+0xac>
 8008e92:	463c      	mov	r4, r7
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	dd24      	ble.n	8008ee2 <_strtol_l.isra.0+0xca>
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	db1f      	blt.n	8008edc <_strtol_l.isra.0+0xc4>
 8008e9c:	45a9      	cmp	r9, r5
 8008e9e:	d31d      	bcc.n	8008edc <_strtol_l.isra.0+0xc4>
 8008ea0:	d101      	bne.n	8008ea6 <_strtol_l.isra.0+0x8e>
 8008ea2:	45a2      	cmp	sl, r4
 8008ea4:	db1a      	blt.n	8008edc <_strtol_l.isra.0+0xc4>
 8008ea6:	fb05 4503 	mla	r5, r5, r3, r4
 8008eaa:	2601      	movs	r6, #1
 8008eac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008eb0:	e7eb      	b.n	8008e8a <_strtol_l.isra.0+0x72>
 8008eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8008eb4:	bf08      	it	eq
 8008eb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008eba:	46a8      	mov	r8, r5
 8008ebc:	bf08      	it	eq
 8008ebe:	f106 0e02 	addeq.w	lr, r6, #2
 8008ec2:	e7c7      	b.n	8008e54 <_strtol_l.isra.0+0x3c>
 8008ec4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ec8:	2f19      	cmp	r7, #25
 8008eca:	d801      	bhi.n	8008ed0 <_strtol_l.isra.0+0xb8>
 8008ecc:	3c37      	subs	r4, #55	; 0x37
 8008ece:	e7e1      	b.n	8008e94 <_strtol_l.isra.0+0x7c>
 8008ed0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ed4:	2f19      	cmp	r7, #25
 8008ed6:	d804      	bhi.n	8008ee2 <_strtol_l.isra.0+0xca>
 8008ed8:	3c57      	subs	r4, #87	; 0x57
 8008eda:	e7db      	b.n	8008e94 <_strtol_l.isra.0+0x7c>
 8008edc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008ee0:	e7e4      	b.n	8008eac <_strtol_l.isra.0+0x94>
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	da05      	bge.n	8008ef2 <_strtol_l.isra.0+0xda>
 8008ee6:	2322      	movs	r3, #34	; 0x22
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	4665      	mov	r5, ip
 8008eec:	b942      	cbnz	r2, 8008f00 <_strtol_l.isra.0+0xe8>
 8008eee:	4628      	mov	r0, r5
 8008ef0:	e79d      	b.n	8008e2e <_strtol_l.isra.0+0x16>
 8008ef2:	f1b8 0f00 	cmp.w	r8, #0
 8008ef6:	d000      	beq.n	8008efa <_strtol_l.isra.0+0xe2>
 8008ef8:	426d      	negs	r5, r5
 8008efa:	2a00      	cmp	r2, #0
 8008efc:	d0f7      	beq.n	8008eee <_strtol_l.isra.0+0xd6>
 8008efe:	b10e      	cbz	r6, 8008f04 <_strtol_l.isra.0+0xec>
 8008f00:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	e7f2      	b.n	8008eee <_strtol_l.isra.0+0xd6>
 8008f08:	2430      	movs	r4, #48	; 0x30
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1b3      	bne.n	8008e76 <_strtol_l.isra.0+0x5e>
 8008f0e:	2308      	movs	r3, #8
 8008f10:	e7b1      	b.n	8008e76 <_strtol_l.isra.0+0x5e>
 8008f12:	2c30      	cmp	r4, #48	; 0x30
 8008f14:	d0a4      	beq.n	8008e60 <_strtol_l.isra.0+0x48>
 8008f16:	230a      	movs	r3, #10
 8008f18:	e7ad      	b.n	8008e76 <_strtol_l.isra.0+0x5e>
 8008f1a:	bf00      	nop
 8008f1c:	0800c511 	.word	0x0800c511

08008f20 <_strtol_r>:
 8008f20:	f7ff bf7a 	b.w	8008e18 <_strtol_l.isra.0>

08008f24 <__swbuf_r>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	b118      	cbz	r0, 8008f36 <__swbuf_r+0x12>
 8008f2e:	6983      	ldr	r3, [r0, #24]
 8008f30:	b90b      	cbnz	r3, 8008f36 <__swbuf_r+0x12>
 8008f32:	f001 f84f 	bl	8009fd4 <__sinit>
 8008f36:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <__swbuf_r+0x98>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	d12b      	bne.n	8008f94 <__swbuf_r+0x70>
 8008f3c:	686c      	ldr	r4, [r5, #4]
 8008f3e:	69a3      	ldr	r3, [r4, #24]
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	071a      	lsls	r2, r3, #28
 8008f46:	d52f      	bpl.n	8008fa8 <__swbuf_r+0x84>
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	b36b      	cbz	r3, 8008fa8 <__swbuf_r+0x84>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	1ac0      	subs	r0, r0, r3
 8008f52:	6963      	ldr	r3, [r4, #20]
 8008f54:	b2f6      	uxtb	r6, r6
 8008f56:	4283      	cmp	r3, r0
 8008f58:	4637      	mov	r7, r6
 8008f5a:	dc04      	bgt.n	8008f66 <__swbuf_r+0x42>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 ffa4 	bl	8009eac <_fflush_r>
 8008f64:	bb30      	cbnz	r0, 8008fb4 <__swbuf_r+0x90>
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	60a3      	str	r3, [r4, #8]
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	701e      	strb	r6, [r3, #0]
 8008f74:	6963      	ldr	r3, [r4, #20]
 8008f76:	3001      	adds	r0, #1
 8008f78:	4283      	cmp	r3, r0
 8008f7a:	d004      	beq.n	8008f86 <__swbuf_r+0x62>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	07db      	lsls	r3, r3, #31
 8008f80:	d506      	bpl.n	8008f90 <__swbuf_r+0x6c>
 8008f82:	2e0a      	cmp	r6, #10
 8008f84:	d104      	bne.n	8008f90 <__swbuf_r+0x6c>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 ff8f 	bl	8009eac <_fflush_r>
 8008f8e:	b988      	cbnz	r0, 8008fb4 <__swbuf_r+0x90>
 8008f90:	4638      	mov	r0, r7
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <__swbuf_r+0x9c>)
 8008f96:	429c      	cmp	r4, r3
 8008f98:	d101      	bne.n	8008f9e <__swbuf_r+0x7a>
 8008f9a:	68ac      	ldr	r4, [r5, #8]
 8008f9c:	e7cf      	b.n	8008f3e <__swbuf_r+0x1a>
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__swbuf_r+0xa0>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	bf08      	it	eq
 8008fa4:	68ec      	ldreq	r4, [r5, #12]
 8008fa6:	e7ca      	b.n	8008f3e <__swbuf_r+0x1a>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f80c 	bl	8008fc8 <__swsetup_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d0cb      	beq.n	8008f4c <__swbuf_r+0x28>
 8008fb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008fb8:	e7ea      	b.n	8008f90 <__swbuf_r+0x6c>
 8008fba:	bf00      	nop
 8008fbc:	0800c6c8 	.word	0x0800c6c8
 8008fc0:	0800c6e8 	.word	0x0800c6e8
 8008fc4:	0800c6a8 	.word	0x0800c6a8

08008fc8 <__swsetup_r>:
 8008fc8:	4b32      	ldr	r3, [pc, #200]	; (8009094 <__swsetup_r+0xcc>)
 8008fca:	b570      	push	{r4, r5, r6, lr}
 8008fcc:	681d      	ldr	r5, [r3, #0]
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	b125      	cbz	r5, 8008fde <__swsetup_r+0x16>
 8008fd4:	69ab      	ldr	r3, [r5, #24]
 8008fd6:	b913      	cbnz	r3, 8008fde <__swsetup_r+0x16>
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 fffb 	bl	8009fd4 <__sinit>
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <__swsetup_r+0xd0>)
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	d10f      	bne.n	8009004 <__swsetup_r+0x3c>
 8008fe4:	686c      	ldr	r4, [r5, #4]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	d42c      	bmi.n	800904a <__swsetup_r+0x82>
 8008ff0:	06dd      	lsls	r5, r3, #27
 8008ff2:	d411      	bmi.n	8009018 <__swsetup_r+0x50>
 8008ff4:	2309      	movs	r3, #9
 8008ff6:	6033      	str	r3, [r6, #0]
 8008ff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009002:	e03e      	b.n	8009082 <__swsetup_r+0xba>
 8009004:	4b25      	ldr	r3, [pc, #148]	; (800909c <__swsetup_r+0xd4>)
 8009006:	429c      	cmp	r4, r3
 8009008:	d101      	bne.n	800900e <__swsetup_r+0x46>
 800900a:	68ac      	ldr	r4, [r5, #8]
 800900c:	e7eb      	b.n	8008fe6 <__swsetup_r+0x1e>
 800900e:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <__swsetup_r+0xd8>)
 8009010:	429c      	cmp	r4, r3
 8009012:	bf08      	it	eq
 8009014:	68ec      	ldreq	r4, [r5, #12]
 8009016:	e7e6      	b.n	8008fe6 <__swsetup_r+0x1e>
 8009018:	0758      	lsls	r0, r3, #29
 800901a:	d512      	bpl.n	8009042 <__swsetup_r+0x7a>
 800901c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901e:	b141      	cbz	r1, 8009032 <__swsetup_r+0x6a>
 8009020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <__swsetup_r+0x66>
 8009028:	4630      	mov	r0, r6
 800902a:	f7fd ffeb 	bl	8007004 <_free_r>
 800902e:	2300      	movs	r3, #0
 8009030:	6363      	str	r3, [r4, #52]	; 0x34
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	2300      	movs	r3, #0
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f043 0308 	orr.w	r3, r3, #8
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	b94b      	cbnz	r3, 8009062 <__swsetup_r+0x9a>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009058:	d003      	beq.n	8009062 <__swsetup_r+0x9a>
 800905a:	4621      	mov	r1, r4
 800905c:	4630      	mov	r0, r6
 800905e:	f001 fbf1 	bl	800a844 <__smakebuf_r>
 8009062:	89a0      	ldrh	r0, [r4, #12]
 8009064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009068:	f010 0301 	ands.w	r3, r0, #1
 800906c:	d00a      	beq.n	8009084 <__swsetup_r+0xbc>
 800906e:	2300      	movs	r3, #0
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6963      	ldr	r3, [r4, #20]
 8009074:	425b      	negs	r3, r3
 8009076:	61a3      	str	r3, [r4, #24]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b943      	cbnz	r3, 800908e <__swsetup_r+0xc6>
 800907c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009080:	d1ba      	bne.n	8008ff8 <__swsetup_r+0x30>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	0781      	lsls	r1, r0, #30
 8009086:	bf58      	it	pl
 8009088:	6963      	ldrpl	r3, [r4, #20]
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	e7f4      	b.n	8009078 <__swsetup_r+0xb0>
 800908e:	2000      	movs	r0, #0
 8009090:	e7f7      	b.n	8009082 <__swsetup_r+0xba>
 8009092:	bf00      	nop
 8009094:	20000014 	.word	0x20000014
 8009098:	0800c6c8 	.word	0x0800c6c8
 800909c:	0800c6e8 	.word	0x0800c6e8
 80090a0:	0800c6a8 	.word	0x0800c6a8

080090a4 <abort>:
 80090a4:	b508      	push	{r3, lr}
 80090a6:	2006      	movs	r0, #6
 80090a8:	f002 fac2 	bl	800b630 <raise>
 80090ac:	2001      	movs	r0, #1
 80090ae:	f7f8 fbbd 	bl	800182c <_exit>

080090b2 <quorem>:
 80090b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b6:	6903      	ldr	r3, [r0, #16]
 80090b8:	690c      	ldr	r4, [r1, #16]
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	4607      	mov	r7, r0
 80090be:	f2c0 8081 	blt.w	80091c4 <quorem+0x112>
 80090c2:	3c01      	subs	r4, #1
 80090c4:	f101 0814 	add.w	r8, r1, #20
 80090c8:	f100 0514 	add.w	r5, r0, #20
 80090cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090da:	3301      	adds	r3, #1
 80090dc:	429a      	cmp	r2, r3
 80090de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80090ea:	d331      	bcc.n	8009150 <quorem+0x9e>
 80090ec:	f04f 0e00 	mov.w	lr, #0
 80090f0:	4640      	mov	r0, r8
 80090f2:	46ac      	mov	ip, r5
 80090f4:	46f2      	mov	sl, lr
 80090f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80090fa:	b293      	uxth	r3, r2
 80090fc:	fb06 e303 	mla	r3, r6, r3, lr
 8009100:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009104:	b29b      	uxth	r3, r3
 8009106:	ebaa 0303 	sub.w	r3, sl, r3
 800910a:	0c12      	lsrs	r2, r2, #16
 800910c:	f8dc a000 	ldr.w	sl, [ip]
 8009110:	fb06 e202 	mla	r2, r6, r2, lr
 8009114:	fa13 f38a 	uxtah	r3, r3, sl
 8009118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800911c:	fa1f fa82 	uxth.w	sl, r2
 8009120:	f8dc 2000 	ldr.w	r2, [ip]
 8009124:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800912c:	b29b      	uxth	r3, r3
 800912e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009132:	4581      	cmp	r9, r0
 8009134:	f84c 3b04 	str.w	r3, [ip], #4
 8009138:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800913c:	d2db      	bcs.n	80090f6 <quorem+0x44>
 800913e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009142:	b92b      	cbnz	r3, 8009150 <quorem+0x9e>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	3b04      	subs	r3, #4
 8009148:	429d      	cmp	r5, r3
 800914a:	461a      	mov	r2, r3
 800914c:	d32e      	bcc.n	80091ac <quorem+0xfa>
 800914e:	613c      	str	r4, [r7, #16]
 8009150:	4638      	mov	r0, r7
 8009152:	f001 feb7 	bl	800aec4 <__mcmp>
 8009156:	2800      	cmp	r0, #0
 8009158:	db24      	blt.n	80091a4 <quorem+0xf2>
 800915a:	3601      	adds	r6, #1
 800915c:	4628      	mov	r0, r5
 800915e:	f04f 0c00 	mov.w	ip, #0
 8009162:	f858 2b04 	ldr.w	r2, [r8], #4
 8009166:	f8d0 e000 	ldr.w	lr, [r0]
 800916a:	b293      	uxth	r3, r2
 800916c:	ebac 0303 	sub.w	r3, ip, r3
 8009170:	0c12      	lsrs	r2, r2, #16
 8009172:	fa13 f38e 	uxtah	r3, r3, lr
 8009176:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800917a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800917e:	b29b      	uxth	r3, r3
 8009180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009184:	45c1      	cmp	r9, r8
 8009186:	f840 3b04 	str.w	r3, [r0], #4
 800918a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800918e:	d2e8      	bcs.n	8009162 <quorem+0xb0>
 8009190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009198:	b922      	cbnz	r2, 80091a4 <quorem+0xf2>
 800919a:	3b04      	subs	r3, #4
 800919c:	429d      	cmp	r5, r3
 800919e:	461a      	mov	r2, r3
 80091a0:	d30a      	bcc.n	80091b8 <quorem+0x106>
 80091a2:	613c      	str	r4, [r7, #16]
 80091a4:	4630      	mov	r0, r6
 80091a6:	b003      	add	sp, #12
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	3b04      	subs	r3, #4
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d1cc      	bne.n	800914e <quorem+0x9c>
 80091b4:	3c01      	subs	r4, #1
 80091b6:	e7c7      	b.n	8009148 <quorem+0x96>
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	3b04      	subs	r3, #4
 80091bc:	2a00      	cmp	r2, #0
 80091be:	d1f0      	bne.n	80091a2 <quorem+0xf0>
 80091c0:	3c01      	subs	r4, #1
 80091c2:	e7eb      	b.n	800919c <quorem+0xea>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7ee      	b.n	80091a6 <quorem+0xf4>

080091c8 <_dtoa_r>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	ed2d 8b02 	vpush	{d8}
 80091d0:	ec57 6b10 	vmov	r6, r7, d0
 80091d4:	b095      	sub	sp, #84	; 0x54
 80091d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80091dc:	9105      	str	r1, [sp, #20]
 80091de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80091e2:	4604      	mov	r4, r0
 80091e4:	9209      	str	r2, [sp, #36]	; 0x24
 80091e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e8:	b975      	cbnz	r5, 8009208 <_dtoa_r+0x40>
 80091ea:	2010      	movs	r0, #16
 80091ec:	f7fd feec 	bl	8006fc8 <malloc>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6260      	str	r0, [r4, #36]	; 0x24
 80091f4:	b920      	cbnz	r0, 8009200 <_dtoa_r+0x38>
 80091f6:	4bb2      	ldr	r3, [pc, #712]	; (80094c0 <_dtoa_r+0x2f8>)
 80091f8:	21ea      	movs	r1, #234	; 0xea
 80091fa:	48b2      	ldr	r0, [pc, #712]	; (80094c4 <_dtoa_r+0x2fc>)
 80091fc:	f7fd fe8a 	bl	8006f14 <__assert_func>
 8009200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009204:	6005      	str	r5, [r0, #0]
 8009206:	60c5      	str	r5, [r0, #12]
 8009208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	b151      	cbz	r1, 8009224 <_dtoa_r+0x5c>
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	604a      	str	r2, [r1, #4]
 8009212:	2301      	movs	r3, #1
 8009214:	4093      	lsls	r3, r2
 8009216:	608b      	str	r3, [r1, #8]
 8009218:	4620      	mov	r0, r4
 800921a:	f001 fbcb 	bl	800a9b4 <_Bfree>
 800921e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	1e3b      	subs	r3, r7, #0
 8009226:	bfb9      	ittee	lt
 8009228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800922c:	9303      	strlt	r3, [sp, #12]
 800922e:	2300      	movge	r3, #0
 8009230:	f8c8 3000 	strge.w	r3, [r8]
 8009234:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009238:	4ba3      	ldr	r3, [pc, #652]	; (80094c8 <_dtoa_r+0x300>)
 800923a:	bfbc      	itt	lt
 800923c:	2201      	movlt	r2, #1
 800923e:	f8c8 2000 	strlt.w	r2, [r8]
 8009242:	ea33 0309 	bics.w	r3, r3, r9
 8009246:	d11b      	bne.n	8009280 <_dtoa_r+0xb8>
 8009248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800924a:	f242 730f 	movw	r3, #9999	; 0x270f
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009254:	4333      	orrs	r3, r6
 8009256:	f000 857a 	beq.w	8009d4e <_dtoa_r+0xb86>
 800925a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800925c:	b963      	cbnz	r3, 8009278 <_dtoa_r+0xb0>
 800925e:	4b9b      	ldr	r3, [pc, #620]	; (80094cc <_dtoa_r+0x304>)
 8009260:	e024      	b.n	80092ac <_dtoa_r+0xe4>
 8009262:	4b9b      	ldr	r3, [pc, #620]	; (80094d0 <_dtoa_r+0x308>)
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	9800      	ldr	r0, [sp, #0]
 800926e:	b015      	add	sp, #84	; 0x54
 8009270:	ecbd 8b02 	vpop	{d8}
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	4b94      	ldr	r3, [pc, #592]	; (80094cc <_dtoa_r+0x304>)
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	3303      	adds	r3, #3
 800927e:	e7f3      	b.n	8009268 <_dtoa_r+0xa0>
 8009280:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009284:	2200      	movs	r2, #0
 8009286:	ec51 0b17 	vmov	r0, r1, d7
 800928a:	2300      	movs	r3, #0
 800928c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009290:	f7f7 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009294:	4680      	mov	r8, r0
 8009296:	b158      	cbz	r0, 80092b0 <_dtoa_r+0xe8>
 8009298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800929a:	2301      	movs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8551 	beq.w	8009d48 <_dtoa_r+0xb80>
 80092a6:	488b      	ldr	r0, [pc, #556]	; (80094d4 <_dtoa_r+0x30c>)
 80092a8:	6018      	str	r0, [r3, #0]
 80092aa:	1e43      	subs	r3, r0, #1
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	e7dd      	b.n	800926c <_dtoa_r+0xa4>
 80092b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80092b4:	aa12      	add	r2, sp, #72	; 0x48
 80092b6:	a913      	add	r1, sp, #76	; 0x4c
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 ff23 	bl	800b104 <__d2b>
 80092be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092c2:	4683      	mov	fp, r0
 80092c4:	2d00      	cmp	r5, #0
 80092c6:	d07c      	beq.n	80093c2 <_dtoa_r+0x1fa>
 80092c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80092ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80092d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80092da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80092de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092e2:	4b7d      	ldr	r3, [pc, #500]	; (80094d8 <_dtoa_r+0x310>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	4630      	mov	r0, r6
 80092e8:	4639      	mov	r1, r7
 80092ea:	f7f6 ffcd 	bl	8000288 <__aeabi_dsub>
 80092ee:	a36e      	add	r3, pc, #440	; (adr r3, 80094a8 <_dtoa_r+0x2e0>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f7 f980 	bl	80005f8 <__aeabi_dmul>
 80092f8:	a36d      	add	r3, pc, #436	; (adr r3, 80094b0 <_dtoa_r+0x2e8>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ffc5 	bl	800028c <__adddf3>
 8009302:	4606      	mov	r6, r0
 8009304:	4628      	mov	r0, r5
 8009306:	460f      	mov	r7, r1
 8009308:	f7f7 f90c 	bl	8000524 <__aeabi_i2d>
 800930c:	a36a      	add	r3, pc, #424	; (adr r3, 80094b8 <_dtoa_r+0x2f0>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f7 f971 	bl	80005f8 <__aeabi_dmul>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	f7f6 ffb5 	bl	800028c <__adddf3>
 8009322:	4606      	mov	r6, r0
 8009324:	460f      	mov	r7, r1
 8009326:	f7f7 fc17 	bl	8000b58 <__aeabi_d2iz>
 800932a:	2200      	movs	r2, #0
 800932c:	4682      	mov	sl, r0
 800932e:	2300      	movs	r3, #0
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f7 fbd2 	bl	8000adc <__aeabi_dcmplt>
 8009338:	b148      	cbz	r0, 800934e <_dtoa_r+0x186>
 800933a:	4650      	mov	r0, sl
 800933c:	f7f7 f8f2 	bl	8000524 <__aeabi_i2d>
 8009340:	4632      	mov	r2, r6
 8009342:	463b      	mov	r3, r7
 8009344:	f7f7 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009348:	b908      	cbnz	r0, 800934e <_dtoa_r+0x186>
 800934a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800934e:	f1ba 0f16 	cmp.w	sl, #22
 8009352:	d854      	bhi.n	80093fe <_dtoa_r+0x236>
 8009354:	4b61      	ldr	r3, [pc, #388]	; (80094dc <_dtoa_r+0x314>)
 8009356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009362:	f7f7 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	d04b      	beq.n	8009402 <_dtoa_r+0x23a>
 800936a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800936e:	2300      	movs	r3, #0
 8009370:	930e      	str	r3, [sp, #56]	; 0x38
 8009372:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009374:	1b5d      	subs	r5, r3, r5
 8009376:	1e6b      	subs	r3, r5, #1
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	bf43      	ittte	mi
 800937c:	2300      	movmi	r3, #0
 800937e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009382:	9304      	strmi	r3, [sp, #16]
 8009384:	f04f 0800 	movpl.w	r8, #0
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	db3b      	blt.n	8009406 <_dtoa_r+0x23e>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009394:	4453      	add	r3, sl
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	2300      	movs	r3, #0
 800939a:	9306      	str	r3, [sp, #24]
 800939c:	9b05      	ldr	r3, [sp, #20]
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d869      	bhi.n	8009476 <_dtoa_r+0x2ae>
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	bfc4      	itt	gt
 80093a6:	3b04      	subgt	r3, #4
 80093a8:	9305      	strgt	r3, [sp, #20]
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	f1a3 0302 	sub.w	r3, r3, #2
 80093b0:	bfcc      	ite	gt
 80093b2:	2500      	movgt	r5, #0
 80093b4:	2501      	movle	r5, #1
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d869      	bhi.n	800948e <_dtoa_r+0x2c6>
 80093ba:	e8df f003 	tbb	[pc, r3]
 80093be:	4e2c      	.short	0x4e2c
 80093c0:	5a4c      	.short	0x5a4c
 80093c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80093c6:	441d      	add	r5, r3
 80093c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	bfc1      	itttt	gt
 80093d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80093d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80093d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80093dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80093e0:	bfda      	itte	le
 80093e2:	f1c3 0320 	rsble	r3, r3, #32
 80093e6:	fa06 f003 	lslle.w	r0, r6, r3
 80093ea:	4318      	orrgt	r0, r3
 80093ec:	f7f7 f88a 	bl	8000504 <__aeabi_ui2d>
 80093f0:	2301      	movs	r3, #1
 80093f2:	4606      	mov	r6, r0
 80093f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093f8:	3d01      	subs	r5, #1
 80093fa:	9310      	str	r3, [sp, #64]	; 0x40
 80093fc:	e771      	b.n	80092e2 <_dtoa_r+0x11a>
 80093fe:	2301      	movs	r3, #1
 8009400:	e7b6      	b.n	8009370 <_dtoa_r+0x1a8>
 8009402:	900e      	str	r0, [sp, #56]	; 0x38
 8009404:	e7b5      	b.n	8009372 <_dtoa_r+0x1aa>
 8009406:	f1ca 0300 	rsb	r3, sl, #0
 800940a:	9306      	str	r3, [sp, #24]
 800940c:	2300      	movs	r3, #0
 800940e:	eba8 080a 	sub.w	r8, r8, sl
 8009412:	930d      	str	r3, [sp, #52]	; 0x34
 8009414:	e7c2      	b.n	800939c <_dtoa_r+0x1d4>
 8009416:	2300      	movs	r3, #0
 8009418:	9308      	str	r3, [sp, #32]
 800941a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941c:	2b00      	cmp	r3, #0
 800941e:	dc39      	bgt.n	8009494 <_dtoa_r+0x2cc>
 8009420:	f04f 0901 	mov.w	r9, #1
 8009424:	f8cd 9004 	str.w	r9, [sp, #4]
 8009428:	464b      	mov	r3, r9
 800942a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800942e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009430:	2200      	movs	r2, #0
 8009432:	6042      	str	r2, [r0, #4]
 8009434:	2204      	movs	r2, #4
 8009436:	f102 0614 	add.w	r6, r2, #20
 800943a:	429e      	cmp	r6, r3
 800943c:	6841      	ldr	r1, [r0, #4]
 800943e:	d92f      	bls.n	80094a0 <_dtoa_r+0x2d8>
 8009440:	4620      	mov	r0, r4
 8009442:	f001 fa77 	bl	800a934 <_Balloc>
 8009446:	9000      	str	r0, [sp, #0]
 8009448:	2800      	cmp	r0, #0
 800944a:	d14b      	bne.n	80094e4 <_dtoa_r+0x31c>
 800944c:	4b24      	ldr	r3, [pc, #144]	; (80094e0 <_dtoa_r+0x318>)
 800944e:	4602      	mov	r2, r0
 8009450:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009454:	e6d1      	b.n	80091fa <_dtoa_r+0x32>
 8009456:	2301      	movs	r3, #1
 8009458:	e7de      	b.n	8009418 <_dtoa_r+0x250>
 800945a:	2300      	movs	r3, #0
 800945c:	9308      	str	r3, [sp, #32]
 800945e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009460:	eb0a 0903 	add.w	r9, sl, r3
 8009464:	f109 0301 	add.w	r3, r9, #1
 8009468:	2b01      	cmp	r3, #1
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	bfb8      	it	lt
 800946e:	2301      	movlt	r3, #1
 8009470:	e7dd      	b.n	800942e <_dtoa_r+0x266>
 8009472:	2301      	movs	r3, #1
 8009474:	e7f2      	b.n	800945c <_dtoa_r+0x294>
 8009476:	2501      	movs	r5, #1
 8009478:	2300      	movs	r3, #0
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	9508      	str	r5, [sp, #32]
 800947e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009482:	2200      	movs	r2, #0
 8009484:	f8cd 9004 	str.w	r9, [sp, #4]
 8009488:	2312      	movs	r3, #18
 800948a:	9209      	str	r2, [sp, #36]	; 0x24
 800948c:	e7cf      	b.n	800942e <_dtoa_r+0x266>
 800948e:	2301      	movs	r3, #1
 8009490:	9308      	str	r3, [sp, #32]
 8009492:	e7f4      	b.n	800947e <_dtoa_r+0x2b6>
 8009494:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009498:	f8cd 9004 	str.w	r9, [sp, #4]
 800949c:	464b      	mov	r3, r9
 800949e:	e7c6      	b.n	800942e <_dtoa_r+0x266>
 80094a0:	3101      	adds	r1, #1
 80094a2:	6041      	str	r1, [r0, #4]
 80094a4:	0052      	lsls	r2, r2, #1
 80094a6:	e7c6      	b.n	8009436 <_dtoa_r+0x26e>
 80094a8:	636f4361 	.word	0x636f4361
 80094ac:	3fd287a7 	.word	0x3fd287a7
 80094b0:	8b60c8b3 	.word	0x8b60c8b3
 80094b4:	3fc68a28 	.word	0x3fc68a28
 80094b8:	509f79fb 	.word	0x509f79fb
 80094bc:	3fd34413 	.word	0x3fd34413
 80094c0:	0800c61e 	.word	0x0800c61e
 80094c4:	0800c635 	.word	0x0800c635
 80094c8:	7ff00000 	.word	0x7ff00000
 80094cc:	0800c61a 	.word	0x0800c61a
 80094d0:	0800c611 	.word	0x0800c611
 80094d4:	0800c492 	.word	0x0800c492
 80094d8:	3ff80000 	.word	0x3ff80000
 80094dc:	0800c810 	.word	0x0800c810
 80094e0:	0800c694 	.word	0x0800c694
 80094e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094e6:	9a00      	ldr	r2, [sp, #0]
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	2b0e      	cmp	r3, #14
 80094ee:	f200 80ad 	bhi.w	800964c <_dtoa_r+0x484>
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	f000 80aa 	beq.w	800964c <_dtoa_r+0x484>
 80094f8:	f1ba 0f00 	cmp.w	sl, #0
 80094fc:	dd36      	ble.n	800956c <_dtoa_r+0x3a4>
 80094fe:	4ac3      	ldr	r2, [pc, #780]	; (800980c <_dtoa_r+0x644>)
 8009500:	f00a 030f 	and.w	r3, sl, #15
 8009504:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009508:	ed93 7b00 	vldr	d7, [r3]
 800950c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009510:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009514:	eeb0 8a47 	vmov.f32	s16, s14
 8009518:	eef0 8a67 	vmov.f32	s17, s15
 800951c:	d016      	beq.n	800954c <_dtoa_r+0x384>
 800951e:	4bbc      	ldr	r3, [pc, #752]	; (8009810 <_dtoa_r+0x648>)
 8009520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009528:	f7f7 f990 	bl	800084c <__aeabi_ddiv>
 800952c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009530:	f007 070f 	and.w	r7, r7, #15
 8009534:	2503      	movs	r5, #3
 8009536:	4eb6      	ldr	r6, [pc, #728]	; (8009810 <_dtoa_r+0x648>)
 8009538:	b957      	cbnz	r7, 8009550 <_dtoa_r+0x388>
 800953a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953e:	ec53 2b18 	vmov	r2, r3, d8
 8009542:	f7f7 f983 	bl	800084c <__aeabi_ddiv>
 8009546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800954a:	e029      	b.n	80095a0 <_dtoa_r+0x3d8>
 800954c:	2502      	movs	r5, #2
 800954e:	e7f2      	b.n	8009536 <_dtoa_r+0x36e>
 8009550:	07f9      	lsls	r1, r7, #31
 8009552:	d508      	bpl.n	8009566 <_dtoa_r+0x39e>
 8009554:	ec51 0b18 	vmov	r0, r1, d8
 8009558:	e9d6 2300 	ldrd	r2, r3, [r6]
 800955c:	f7f7 f84c 	bl	80005f8 <__aeabi_dmul>
 8009560:	ec41 0b18 	vmov	d8, r0, r1
 8009564:	3501      	adds	r5, #1
 8009566:	107f      	asrs	r7, r7, #1
 8009568:	3608      	adds	r6, #8
 800956a:	e7e5      	b.n	8009538 <_dtoa_r+0x370>
 800956c:	f000 80a6 	beq.w	80096bc <_dtoa_r+0x4f4>
 8009570:	f1ca 0600 	rsb	r6, sl, #0
 8009574:	4ba5      	ldr	r3, [pc, #660]	; (800980c <_dtoa_r+0x644>)
 8009576:	4fa6      	ldr	r7, [pc, #664]	; (8009810 <_dtoa_r+0x648>)
 8009578:	f006 020f 	and.w	r2, r6, #15
 800957c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009588:	f7f7 f836 	bl	80005f8 <__aeabi_dmul>
 800958c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009590:	1136      	asrs	r6, r6, #4
 8009592:	2300      	movs	r3, #0
 8009594:	2502      	movs	r5, #2
 8009596:	2e00      	cmp	r6, #0
 8009598:	f040 8085 	bne.w	80096a6 <_dtoa_r+0x4de>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1d2      	bne.n	8009546 <_dtoa_r+0x37e>
 80095a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 808c 	beq.w	80096c0 <_dtoa_r+0x4f8>
 80095a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095ac:	4b99      	ldr	r3, [pc, #612]	; (8009814 <_dtoa_r+0x64c>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 fa92 	bl	8000adc <__aeabi_dcmplt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f000 8081 	beq.w	80096c0 <_dtoa_r+0x4f8>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d07d      	beq.n	80096c0 <_dtoa_r+0x4f8>
 80095c4:	f1b9 0f00 	cmp.w	r9, #0
 80095c8:	dd3c      	ble.n	8009644 <_dtoa_r+0x47c>
 80095ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80095ce:	9307      	str	r3, [sp, #28]
 80095d0:	2200      	movs	r2, #0
 80095d2:	4b91      	ldr	r3, [pc, #580]	; (8009818 <_dtoa_r+0x650>)
 80095d4:	4630      	mov	r0, r6
 80095d6:	4639      	mov	r1, r7
 80095d8:	f7f7 f80e 	bl	80005f8 <__aeabi_dmul>
 80095dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e0:	3501      	adds	r5, #1
 80095e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80095e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7f6 ff9a 	bl	8000524 <__aeabi_i2d>
 80095f0:	4632      	mov	r2, r6
 80095f2:	463b      	mov	r3, r7
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	4b88      	ldr	r3, [pc, #544]	; (800981c <_dtoa_r+0x654>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	f7f6 fe46 	bl	800028c <__adddf3>
 8009600:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009608:	9303      	str	r3, [sp, #12]
 800960a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800960c:	2b00      	cmp	r3, #0
 800960e:	d15c      	bne.n	80096ca <_dtoa_r+0x502>
 8009610:	4b83      	ldr	r3, [pc, #524]	; (8009820 <_dtoa_r+0x658>)
 8009612:	2200      	movs	r2, #0
 8009614:	4630      	mov	r0, r6
 8009616:	4639      	mov	r1, r7
 8009618:	f7f6 fe36 	bl	8000288 <__aeabi_dsub>
 800961c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	f7f7 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 8009628:	2800      	cmp	r0, #0
 800962a:	f040 8296 	bne.w	8009b5a <_dtoa_r+0x992>
 800962e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009632:	4630      	mov	r0, r6
 8009634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009638:	4639      	mov	r1, r7
 800963a:	f7f7 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	f040 8288 	bne.w	8009b54 <_dtoa_r+0x98c>
 8009644:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009648:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800964c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800964e:	2b00      	cmp	r3, #0
 8009650:	f2c0 8158 	blt.w	8009904 <_dtoa_r+0x73c>
 8009654:	f1ba 0f0e 	cmp.w	sl, #14
 8009658:	f300 8154 	bgt.w	8009904 <_dtoa_r+0x73c>
 800965c:	4b6b      	ldr	r3, [pc, #428]	; (800980c <_dtoa_r+0x644>)
 800965e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009662:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	f280 80e3 	bge.w	8009834 <_dtoa_r+0x66c>
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f300 80df 	bgt.w	8009834 <_dtoa_r+0x66c>
 8009676:	f040 826d 	bne.w	8009b54 <_dtoa_r+0x98c>
 800967a:	4b69      	ldr	r3, [pc, #420]	; (8009820 <_dtoa_r+0x658>)
 800967c:	2200      	movs	r2, #0
 800967e:	4640      	mov	r0, r8
 8009680:	4649      	mov	r1, r9
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800968a:	f7f7 fa3b 	bl	8000b04 <__aeabi_dcmpge>
 800968e:	9e01      	ldr	r6, [sp, #4]
 8009690:	4637      	mov	r7, r6
 8009692:	2800      	cmp	r0, #0
 8009694:	f040 8243 	bne.w	8009b1e <_dtoa_r+0x956>
 8009698:	9d00      	ldr	r5, [sp, #0]
 800969a:	2331      	movs	r3, #49	; 0x31
 800969c:	f805 3b01 	strb.w	r3, [r5], #1
 80096a0:	f10a 0a01 	add.w	sl, sl, #1
 80096a4:	e23f      	b.n	8009b26 <_dtoa_r+0x95e>
 80096a6:	07f2      	lsls	r2, r6, #31
 80096a8:	d505      	bpl.n	80096b6 <_dtoa_r+0x4ee>
 80096aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ae:	f7f6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80096b2:	3501      	adds	r5, #1
 80096b4:	2301      	movs	r3, #1
 80096b6:	1076      	asrs	r6, r6, #1
 80096b8:	3708      	adds	r7, #8
 80096ba:	e76c      	b.n	8009596 <_dtoa_r+0x3ce>
 80096bc:	2502      	movs	r5, #2
 80096be:	e76f      	b.n	80095a0 <_dtoa_r+0x3d8>
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80096c6:	930c      	str	r3, [sp, #48]	; 0x30
 80096c8:	e78d      	b.n	80095e6 <_dtoa_r+0x41e>
 80096ca:	9900      	ldr	r1, [sp, #0]
 80096cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096d0:	4b4e      	ldr	r3, [pc, #312]	; (800980c <_dtoa_r+0x644>)
 80096d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096d6:	4401      	add	r1, r0
 80096d8:	9102      	str	r1, [sp, #8]
 80096da:	9908      	ldr	r1, [sp, #32]
 80096dc:	eeb0 8a47 	vmov.f32	s16, s14
 80096e0:	eef0 8a67 	vmov.f32	s17, s15
 80096e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d045      	beq.n	800977c <_dtoa_r+0x5b4>
 80096f0:	494c      	ldr	r1, [pc, #304]	; (8009824 <_dtoa_r+0x65c>)
 80096f2:	2000      	movs	r0, #0
 80096f4:	f7f7 f8aa 	bl	800084c <__aeabi_ddiv>
 80096f8:	ec53 2b18 	vmov	r2, r3, d8
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	9d00      	ldr	r5, [sp, #0]
 8009702:	ec41 0b18 	vmov	d8, r0, r1
 8009706:	4639      	mov	r1, r7
 8009708:	4630      	mov	r0, r6
 800970a:	f7f7 fa25 	bl	8000b58 <__aeabi_d2iz>
 800970e:	900c      	str	r0, [sp, #48]	; 0x30
 8009710:	f7f6 ff08 	bl	8000524 <__aeabi_i2d>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009722:	3330      	adds	r3, #48	; 0x30
 8009724:	f805 3b01 	strb.w	r3, [r5], #1
 8009728:	ec53 2b18 	vmov	r2, r3, d8
 800972c:	4606      	mov	r6, r0
 800972e:	460f      	mov	r7, r1
 8009730:	f7f7 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8009734:	2800      	cmp	r0, #0
 8009736:	d165      	bne.n	8009804 <_dtoa_r+0x63c>
 8009738:	4632      	mov	r2, r6
 800973a:	463b      	mov	r3, r7
 800973c:	4935      	ldr	r1, [pc, #212]	; (8009814 <_dtoa_r+0x64c>)
 800973e:	2000      	movs	r0, #0
 8009740:	f7f6 fda2 	bl	8000288 <__aeabi_dsub>
 8009744:	ec53 2b18 	vmov	r2, r3, d8
 8009748:	f7f7 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800974c:	2800      	cmp	r0, #0
 800974e:	f040 80b9 	bne.w	80098c4 <_dtoa_r+0x6fc>
 8009752:	9b02      	ldr	r3, [sp, #8]
 8009754:	429d      	cmp	r5, r3
 8009756:	f43f af75 	beq.w	8009644 <_dtoa_r+0x47c>
 800975a:	4b2f      	ldr	r3, [pc, #188]	; (8009818 <_dtoa_r+0x650>)
 800975c:	ec51 0b18 	vmov	r0, r1, d8
 8009760:	2200      	movs	r2, #0
 8009762:	f7f6 ff49 	bl	80005f8 <__aeabi_dmul>
 8009766:	4b2c      	ldr	r3, [pc, #176]	; (8009818 <_dtoa_r+0x650>)
 8009768:	ec41 0b18 	vmov	d8, r0, r1
 800976c:	2200      	movs	r2, #0
 800976e:	4630      	mov	r0, r6
 8009770:	4639      	mov	r1, r7
 8009772:	f7f6 ff41 	bl	80005f8 <__aeabi_dmul>
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	e7c4      	b.n	8009706 <_dtoa_r+0x53e>
 800977c:	ec51 0b17 	vmov	r0, r1, d7
 8009780:	f7f6 ff3a 	bl	80005f8 <__aeabi_dmul>
 8009784:	9b02      	ldr	r3, [sp, #8]
 8009786:	9d00      	ldr	r5, [sp, #0]
 8009788:	930c      	str	r3, [sp, #48]	; 0x30
 800978a:	ec41 0b18 	vmov	d8, r0, r1
 800978e:	4639      	mov	r1, r7
 8009790:	4630      	mov	r0, r6
 8009792:	f7f7 f9e1 	bl	8000b58 <__aeabi_d2iz>
 8009796:	9011      	str	r0, [sp, #68]	; 0x44
 8009798:	f7f6 fec4 	bl	8000524 <__aeabi_i2d>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f6 fd70 	bl	8000288 <__aeabi_dsub>
 80097a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097aa:	3330      	adds	r3, #48	; 0x30
 80097ac:	f805 3b01 	strb.w	r3, [r5], #1
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	429d      	cmp	r5, r3
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	d134      	bne.n	8009828 <_dtoa_r+0x660>
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <_dtoa_r+0x65c>)
 80097c0:	ec51 0b18 	vmov	r0, r1, d8
 80097c4:	f7f6 fd62 	bl	800028c <__adddf3>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f7f7 f9a2 	bl	8000b18 <__aeabi_dcmpgt>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d175      	bne.n	80098c4 <_dtoa_r+0x6fc>
 80097d8:	ec53 2b18 	vmov	r2, r3, d8
 80097dc:	4911      	ldr	r1, [pc, #68]	; (8009824 <_dtoa_r+0x65c>)
 80097de:	2000      	movs	r0, #0
 80097e0:	f7f6 fd52 	bl	8000288 <__aeabi_dsub>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f7 f976 	bl	8000adc <__aeabi_dcmplt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f43f af27 	beq.w	8009644 <_dtoa_r+0x47c>
 80097f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097f8:	1e6b      	subs	r3, r5, #1
 80097fa:	930c      	str	r3, [sp, #48]	; 0x30
 80097fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009800:	2b30      	cmp	r3, #48	; 0x30
 8009802:	d0f8      	beq.n	80097f6 <_dtoa_r+0x62e>
 8009804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009808:	e04a      	b.n	80098a0 <_dtoa_r+0x6d8>
 800980a:	bf00      	nop
 800980c:	0800c810 	.word	0x0800c810
 8009810:	0800c7e8 	.word	0x0800c7e8
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	40240000 	.word	0x40240000
 800981c:	401c0000 	.word	0x401c0000
 8009820:	40140000 	.word	0x40140000
 8009824:	3fe00000 	.word	0x3fe00000
 8009828:	4baf      	ldr	r3, [pc, #700]	; (8009ae8 <_dtoa_r+0x920>)
 800982a:	f7f6 fee5 	bl	80005f8 <__aeabi_dmul>
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	e7ac      	b.n	800978e <_dtoa_r+0x5c6>
 8009834:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009838:	9d00      	ldr	r5, [sp, #0]
 800983a:	4642      	mov	r2, r8
 800983c:	464b      	mov	r3, r9
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f7 f803 	bl	800084c <__aeabi_ddiv>
 8009846:	f7f7 f987 	bl	8000b58 <__aeabi_d2iz>
 800984a:	9002      	str	r0, [sp, #8]
 800984c:	f7f6 fe6a 	bl	8000524 <__aeabi_i2d>
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	f7f6 fed0 	bl	80005f8 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f6 fd12 	bl	8000288 <__aeabi_dsub>
 8009864:	9e02      	ldr	r6, [sp, #8]
 8009866:	9f01      	ldr	r7, [sp, #4]
 8009868:	3630      	adds	r6, #48	; 0x30
 800986a:	f805 6b01 	strb.w	r6, [r5], #1
 800986e:	9e00      	ldr	r6, [sp, #0]
 8009870:	1bae      	subs	r6, r5, r6
 8009872:	42b7      	cmp	r7, r6
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	d137      	bne.n	80098ea <_dtoa_r+0x722>
 800987a:	f7f6 fd07 	bl	800028c <__adddf3>
 800987e:	4642      	mov	r2, r8
 8009880:	464b      	mov	r3, r9
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	f7f7 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800988a:	b9c8      	cbnz	r0, 80098c0 <_dtoa_r+0x6f8>
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8009898:	b110      	cbz	r0, 80098a0 <_dtoa_r+0x6d8>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	d40f      	bmi.n	80098c0 <_dtoa_r+0x6f8>
 80098a0:	4620      	mov	r0, r4
 80098a2:	4659      	mov	r1, fp
 80098a4:	f001 f886 	bl	800a9b4 <_Bfree>
 80098a8:	2300      	movs	r3, #0
 80098aa:	702b      	strb	r3, [r5, #0]
 80098ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ae:	f10a 0001 	add.w	r0, sl, #1
 80098b2:	6018      	str	r0, [r3, #0]
 80098b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f43f acd8 	beq.w	800926c <_dtoa_r+0xa4>
 80098bc:	601d      	str	r5, [r3, #0]
 80098be:	e4d5      	b.n	800926c <_dtoa_r+0xa4>
 80098c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80098c4:	462b      	mov	r3, r5
 80098c6:	461d      	mov	r5, r3
 80098c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098cc:	2a39      	cmp	r2, #57	; 0x39
 80098ce:	d108      	bne.n	80098e2 <_dtoa_r+0x71a>
 80098d0:	9a00      	ldr	r2, [sp, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d1f7      	bne.n	80098c6 <_dtoa_r+0x6fe>
 80098d6:	9a07      	ldr	r2, [sp, #28]
 80098d8:	9900      	ldr	r1, [sp, #0]
 80098da:	3201      	adds	r2, #1
 80098dc:	9207      	str	r2, [sp, #28]
 80098de:	2230      	movs	r2, #48	; 0x30
 80098e0:	700a      	strb	r2, [r1, #0]
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	3201      	adds	r2, #1
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	e78c      	b.n	8009804 <_dtoa_r+0x63c>
 80098ea:	4b7f      	ldr	r3, [pc, #508]	; (8009ae8 <_dtoa_r+0x920>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	f7f6 fe83 	bl	80005f8 <__aeabi_dmul>
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	f7f7 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d09b      	beq.n	800983a <_dtoa_r+0x672>
 8009902:	e7cd      	b.n	80098a0 <_dtoa_r+0x6d8>
 8009904:	9a08      	ldr	r2, [sp, #32]
 8009906:	2a00      	cmp	r2, #0
 8009908:	f000 80c4 	beq.w	8009a94 <_dtoa_r+0x8cc>
 800990c:	9a05      	ldr	r2, [sp, #20]
 800990e:	2a01      	cmp	r2, #1
 8009910:	f300 80a8 	bgt.w	8009a64 <_dtoa_r+0x89c>
 8009914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009916:	2a00      	cmp	r2, #0
 8009918:	f000 80a0 	beq.w	8009a5c <_dtoa_r+0x894>
 800991c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009920:	9e06      	ldr	r6, [sp, #24]
 8009922:	4645      	mov	r5, r8
 8009924:	9a04      	ldr	r2, [sp, #16]
 8009926:	2101      	movs	r1, #1
 8009928:	441a      	add	r2, r3
 800992a:	4620      	mov	r0, r4
 800992c:	4498      	add	r8, r3
 800992e:	9204      	str	r2, [sp, #16]
 8009930:	f001 f946 	bl	800abc0 <__i2b>
 8009934:	4607      	mov	r7, r0
 8009936:	2d00      	cmp	r5, #0
 8009938:	dd0b      	ble.n	8009952 <_dtoa_r+0x78a>
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd08      	ble.n	8009952 <_dtoa_r+0x78a>
 8009940:	42ab      	cmp	r3, r5
 8009942:	9a04      	ldr	r2, [sp, #16]
 8009944:	bfa8      	it	ge
 8009946:	462b      	movge	r3, r5
 8009948:	eba8 0803 	sub.w	r8, r8, r3
 800994c:	1aed      	subs	r5, r5, r3
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	b1fb      	cbz	r3, 8009996 <_dtoa_r+0x7ce>
 8009956:	9b08      	ldr	r3, [sp, #32]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 809f 	beq.w	8009a9c <_dtoa_r+0x8d4>
 800995e:	2e00      	cmp	r6, #0
 8009960:	dd11      	ble.n	8009986 <_dtoa_r+0x7be>
 8009962:	4639      	mov	r1, r7
 8009964:	4632      	mov	r2, r6
 8009966:	4620      	mov	r0, r4
 8009968:	f001 f9e6 	bl	800ad38 <__pow5mult>
 800996c:	465a      	mov	r2, fp
 800996e:	4601      	mov	r1, r0
 8009970:	4607      	mov	r7, r0
 8009972:	4620      	mov	r0, r4
 8009974:	f001 f93a 	bl	800abec <__multiply>
 8009978:	4659      	mov	r1, fp
 800997a:	9007      	str	r0, [sp, #28]
 800997c:	4620      	mov	r0, r4
 800997e:	f001 f819 	bl	800a9b4 <_Bfree>
 8009982:	9b07      	ldr	r3, [sp, #28]
 8009984:	469b      	mov	fp, r3
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	1b9a      	subs	r2, r3, r6
 800998a:	d004      	beq.n	8009996 <_dtoa_r+0x7ce>
 800998c:	4659      	mov	r1, fp
 800998e:	4620      	mov	r0, r4
 8009990:	f001 f9d2 	bl	800ad38 <__pow5mult>
 8009994:	4683      	mov	fp, r0
 8009996:	2101      	movs	r1, #1
 8009998:	4620      	mov	r0, r4
 800999a:	f001 f911 	bl	800abc0 <__i2b>
 800999e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	4606      	mov	r6, r0
 80099a4:	dd7c      	ble.n	8009aa0 <_dtoa_r+0x8d8>
 80099a6:	461a      	mov	r2, r3
 80099a8:	4601      	mov	r1, r0
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 f9c4 	bl	800ad38 <__pow5mult>
 80099b0:	9b05      	ldr	r3, [sp, #20]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	4606      	mov	r6, r0
 80099b6:	dd76      	ble.n	8009aa6 <_dtoa_r+0x8de>
 80099b8:	2300      	movs	r3, #0
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	6933      	ldr	r3, [r6, #16]
 80099be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099c2:	6918      	ldr	r0, [r3, #16]
 80099c4:	f001 f8ac 	bl	800ab20 <__hi0bits>
 80099c8:	f1c0 0020 	rsb	r0, r0, #32
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	4418      	add	r0, r3
 80099d0:	f010 001f 	ands.w	r0, r0, #31
 80099d4:	f000 8086 	beq.w	8009ae4 <_dtoa_r+0x91c>
 80099d8:	f1c0 0320 	rsb	r3, r0, #32
 80099dc:	2b04      	cmp	r3, #4
 80099de:	dd7f      	ble.n	8009ae0 <_dtoa_r+0x918>
 80099e0:	f1c0 001c 	rsb	r0, r0, #28
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	4403      	add	r3, r0
 80099e8:	4480      	add	r8, r0
 80099ea:	4405      	add	r5, r0
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	f1b8 0f00 	cmp.w	r8, #0
 80099f2:	dd05      	ble.n	8009a00 <_dtoa_r+0x838>
 80099f4:	4659      	mov	r1, fp
 80099f6:	4642      	mov	r2, r8
 80099f8:	4620      	mov	r0, r4
 80099fa:	f001 f9f7 	bl	800adec <__lshift>
 80099fe:	4683      	mov	fp, r0
 8009a00:	9b04      	ldr	r3, [sp, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dd05      	ble.n	8009a12 <_dtoa_r+0x84a>
 8009a06:	4631      	mov	r1, r6
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f001 f9ee 	bl	800adec <__lshift>
 8009a10:	4606      	mov	r6, r0
 8009a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d069      	beq.n	8009aec <_dtoa_r+0x924>
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4658      	mov	r0, fp
 8009a1c:	f001 fa52 	bl	800aec4 <__mcmp>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	da63      	bge.n	8009aec <_dtoa_r+0x924>
 8009a24:	2300      	movs	r3, #0
 8009a26:	4659      	mov	r1, fp
 8009a28:	220a      	movs	r2, #10
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 ffe4 	bl	800a9f8 <__multadd>
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a36:	4683      	mov	fp, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 818f 	beq.w	8009d5c <_dtoa_r+0xb94>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	2300      	movs	r3, #0
 8009a42:	220a      	movs	r2, #10
 8009a44:	4620      	mov	r0, r4
 8009a46:	f000 ffd7 	bl	800a9f8 <__multadd>
 8009a4a:	f1b9 0f00 	cmp.w	r9, #0
 8009a4e:	4607      	mov	r7, r0
 8009a50:	f300 808e 	bgt.w	8009b70 <_dtoa_r+0x9a8>
 8009a54:	9b05      	ldr	r3, [sp, #20]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	dc50      	bgt.n	8009afc <_dtoa_r+0x934>
 8009a5a:	e089      	b.n	8009b70 <_dtoa_r+0x9a8>
 8009a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a62:	e75d      	b.n	8009920 <_dtoa_r+0x758>
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	1e5e      	subs	r6, r3, #1
 8009a68:	9b06      	ldr	r3, [sp, #24]
 8009a6a:	42b3      	cmp	r3, r6
 8009a6c:	bfbf      	itttt	lt
 8009a6e:	9b06      	ldrlt	r3, [sp, #24]
 8009a70:	9606      	strlt	r6, [sp, #24]
 8009a72:	1af2      	sublt	r2, r6, r3
 8009a74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009a76:	bfb6      	itet	lt
 8009a78:	189b      	addlt	r3, r3, r2
 8009a7a:	1b9e      	subge	r6, r3, r6
 8009a7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	bfb8      	it	lt
 8009a82:	2600      	movlt	r6, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	bfb5      	itete	lt
 8009a88:	eba8 0503 	sublt.w	r5, r8, r3
 8009a8c:	9b01      	ldrge	r3, [sp, #4]
 8009a8e:	2300      	movlt	r3, #0
 8009a90:	4645      	movge	r5, r8
 8009a92:	e747      	b.n	8009924 <_dtoa_r+0x75c>
 8009a94:	9e06      	ldr	r6, [sp, #24]
 8009a96:	9f08      	ldr	r7, [sp, #32]
 8009a98:	4645      	mov	r5, r8
 8009a9a:	e74c      	b.n	8009936 <_dtoa_r+0x76e>
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	e775      	b.n	800998c <_dtoa_r+0x7c4>
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	dc18      	bgt.n	8009ad8 <_dtoa_r+0x910>
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	b9b3      	cbnz	r3, 8009ad8 <_dtoa_r+0x910>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ab0:	b9a3      	cbnz	r3, 8009adc <_dtoa_r+0x914>
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ab8:	0d1b      	lsrs	r3, r3, #20
 8009aba:	051b      	lsls	r3, r3, #20
 8009abc:	b12b      	cbz	r3, 8009aca <_dtoa_r+0x902>
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	f108 0801 	add.w	r8, r8, #1
 8009ac8:	2301      	movs	r3, #1
 8009aca:	9306      	str	r3, [sp, #24]
 8009acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f47f af74 	bne.w	80099bc <_dtoa_r+0x7f4>
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	e779      	b.n	80099cc <_dtoa_r+0x804>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e7f6      	b.n	8009aca <_dtoa_r+0x902>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	e7f4      	b.n	8009aca <_dtoa_r+0x902>
 8009ae0:	d085      	beq.n	80099ee <_dtoa_r+0x826>
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	301c      	adds	r0, #28
 8009ae6:	e77d      	b.n	80099e4 <_dtoa_r+0x81c>
 8009ae8:	40240000 	.word	0x40240000
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dc38      	bgt.n	8009b64 <_dtoa_r+0x99c>
 8009af2:	9b05      	ldr	r3, [sp, #20]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	dd35      	ble.n	8009b64 <_dtoa_r+0x99c>
 8009af8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	d10d      	bne.n	8009b1e <_dtoa_r+0x956>
 8009b02:	4631      	mov	r1, r6
 8009b04:	464b      	mov	r3, r9
 8009b06:	2205      	movs	r2, #5
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 ff75 	bl	800a9f8 <__multadd>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4606      	mov	r6, r0
 8009b12:	4658      	mov	r0, fp
 8009b14:	f001 f9d6 	bl	800aec4 <__mcmp>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f73f adbd 	bgt.w	8009698 <_dtoa_r+0x4d0>
 8009b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b20:	9d00      	ldr	r5, [sp, #0]
 8009b22:	ea6f 0a03 	mvn.w	sl, r3
 8009b26:	f04f 0800 	mov.w	r8, #0
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 ff41 	bl	800a9b4 <_Bfree>
 8009b32:	2f00      	cmp	r7, #0
 8009b34:	f43f aeb4 	beq.w	80098a0 <_dtoa_r+0x6d8>
 8009b38:	f1b8 0f00 	cmp.w	r8, #0
 8009b3c:	d005      	beq.n	8009b4a <_dtoa_r+0x982>
 8009b3e:	45b8      	cmp	r8, r7
 8009b40:	d003      	beq.n	8009b4a <_dtoa_r+0x982>
 8009b42:	4641      	mov	r1, r8
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 ff35 	bl	800a9b4 <_Bfree>
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 ff31 	bl	800a9b4 <_Bfree>
 8009b52:	e6a5      	b.n	80098a0 <_dtoa_r+0x6d8>
 8009b54:	2600      	movs	r6, #0
 8009b56:	4637      	mov	r7, r6
 8009b58:	e7e1      	b.n	8009b1e <_dtoa_r+0x956>
 8009b5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b60:	4637      	mov	r7, r6
 8009b62:	e599      	b.n	8009698 <_dtoa_r+0x4d0>
 8009b64:	9b08      	ldr	r3, [sp, #32]
 8009b66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 80fd 	beq.w	8009d6a <_dtoa_r+0xba2>
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	dd05      	ble.n	8009b80 <_dtoa_r+0x9b8>
 8009b74:	4639      	mov	r1, r7
 8009b76:	462a      	mov	r2, r5
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f001 f937 	bl	800adec <__lshift>
 8009b7e:	4607      	mov	r7, r0
 8009b80:	9b06      	ldr	r3, [sp, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d05c      	beq.n	8009c40 <_dtoa_r+0xa78>
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fed3 	bl	800a934 <_Balloc>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b928      	cbnz	r0, 8009b9e <_dtoa_r+0x9d6>
 8009b92:	4b80      	ldr	r3, [pc, #512]	; (8009d94 <_dtoa_r+0xbcc>)
 8009b94:	4602      	mov	r2, r0
 8009b96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b9a:	f7ff bb2e 	b.w	80091fa <_dtoa_r+0x32>
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	3202      	adds	r2, #2
 8009ba2:	0092      	lsls	r2, r2, #2
 8009ba4:	f107 010c 	add.w	r1, r7, #12
 8009ba8:	300c      	adds	r0, #12
 8009baa:	f7fd fa15 	bl	8006fd8 <memcpy>
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f001 f91a 	bl	800adec <__lshift>
 8009bb8:	9b00      	ldr	r3, [sp, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	444b      	add	r3, r9
 8009bc2:	9307      	str	r3, [sp, #28]
 8009bc4:	9b02      	ldr	r3, [sp, #8]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	46b8      	mov	r8, r7
 8009bcc:	9306      	str	r3, [sp, #24]
 8009bce:	4607      	mov	r7, r0
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	9302      	str	r3, [sp, #8]
 8009bda:	f7ff fa6a 	bl	80090b2 <quorem>
 8009bde:	4603      	mov	r3, r0
 8009be0:	3330      	adds	r3, #48	; 0x30
 8009be2:	9004      	str	r0, [sp, #16]
 8009be4:	4641      	mov	r1, r8
 8009be6:	4658      	mov	r0, fp
 8009be8:	9308      	str	r3, [sp, #32]
 8009bea:	f001 f96b 	bl	800aec4 <__mcmp>
 8009bee:	463a      	mov	r2, r7
 8009bf0:	4681      	mov	r9, r0
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f001 f981 	bl	800aefc <__mdiff>
 8009bfa:	68c2      	ldr	r2, [r0, #12]
 8009bfc:	9b08      	ldr	r3, [sp, #32]
 8009bfe:	4605      	mov	r5, r0
 8009c00:	bb02      	cbnz	r2, 8009c44 <_dtoa_r+0xa7c>
 8009c02:	4601      	mov	r1, r0
 8009c04:	4658      	mov	r0, fp
 8009c06:	f001 f95d 	bl	800aec4 <__mcmp>
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4620      	mov	r0, r4
 8009c12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009c16:	f000 fecd 	bl	800a9b4 <_Bfree>
 8009c1a:	9b05      	ldr	r3, [sp, #20]
 8009c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c1e:	9d01      	ldr	r5, [sp, #4]
 8009c20:	ea43 0102 	orr.w	r1, r3, r2
 8009c24:	9b06      	ldr	r3, [sp, #24]
 8009c26:	430b      	orrs	r3, r1
 8009c28:	9b08      	ldr	r3, [sp, #32]
 8009c2a:	d10d      	bne.n	8009c48 <_dtoa_r+0xa80>
 8009c2c:	2b39      	cmp	r3, #57	; 0x39
 8009c2e:	d029      	beq.n	8009c84 <_dtoa_r+0xabc>
 8009c30:	f1b9 0f00 	cmp.w	r9, #0
 8009c34:	dd01      	ble.n	8009c3a <_dtoa_r+0xa72>
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	3331      	adds	r3, #49	; 0x31
 8009c3a:	9a02      	ldr	r2, [sp, #8]
 8009c3c:	7013      	strb	r3, [r2, #0]
 8009c3e:	e774      	b.n	8009b2a <_dtoa_r+0x962>
 8009c40:	4638      	mov	r0, r7
 8009c42:	e7b9      	b.n	8009bb8 <_dtoa_r+0x9f0>
 8009c44:	2201      	movs	r2, #1
 8009c46:	e7e2      	b.n	8009c0e <_dtoa_r+0xa46>
 8009c48:	f1b9 0f00 	cmp.w	r9, #0
 8009c4c:	db06      	blt.n	8009c5c <_dtoa_r+0xa94>
 8009c4e:	9905      	ldr	r1, [sp, #20]
 8009c50:	ea41 0909 	orr.w	r9, r1, r9
 8009c54:	9906      	ldr	r1, [sp, #24]
 8009c56:	ea59 0101 	orrs.w	r1, r9, r1
 8009c5a:	d120      	bne.n	8009c9e <_dtoa_r+0xad6>
 8009c5c:	2a00      	cmp	r2, #0
 8009c5e:	ddec      	ble.n	8009c3a <_dtoa_r+0xa72>
 8009c60:	4659      	mov	r1, fp
 8009c62:	2201      	movs	r2, #1
 8009c64:	4620      	mov	r0, r4
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	f001 f8c0 	bl	800adec <__lshift>
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4683      	mov	fp, r0
 8009c70:	f001 f928 	bl	800aec4 <__mcmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	dc02      	bgt.n	8009c80 <_dtoa_r+0xab8>
 8009c7a:	d1de      	bne.n	8009c3a <_dtoa_r+0xa72>
 8009c7c:	07da      	lsls	r2, r3, #31
 8009c7e:	d5dc      	bpl.n	8009c3a <_dtoa_r+0xa72>
 8009c80:	2b39      	cmp	r3, #57	; 0x39
 8009c82:	d1d8      	bne.n	8009c36 <_dtoa_r+0xa6e>
 8009c84:	9a02      	ldr	r2, [sp, #8]
 8009c86:	2339      	movs	r3, #57	; 0x39
 8009c88:	7013      	strb	r3, [r2, #0]
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	461d      	mov	r5, r3
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c94:	2a39      	cmp	r2, #57	; 0x39
 8009c96:	d050      	beq.n	8009d3a <_dtoa_r+0xb72>
 8009c98:	3201      	adds	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e745      	b.n	8009b2a <_dtoa_r+0x962>
 8009c9e:	2a00      	cmp	r2, #0
 8009ca0:	dd03      	ble.n	8009caa <_dtoa_r+0xae2>
 8009ca2:	2b39      	cmp	r3, #57	; 0x39
 8009ca4:	d0ee      	beq.n	8009c84 <_dtoa_r+0xabc>
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	e7c7      	b.n	8009c3a <_dtoa_r+0xa72>
 8009caa:	9a01      	ldr	r2, [sp, #4]
 8009cac:	9907      	ldr	r1, [sp, #28]
 8009cae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009cb2:	428a      	cmp	r2, r1
 8009cb4:	d02a      	beq.n	8009d0c <_dtoa_r+0xb44>
 8009cb6:	4659      	mov	r1, fp
 8009cb8:	2300      	movs	r3, #0
 8009cba:	220a      	movs	r2, #10
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fe9b 	bl	800a9f8 <__multadd>
 8009cc2:	45b8      	cmp	r8, r7
 8009cc4:	4683      	mov	fp, r0
 8009cc6:	f04f 0300 	mov.w	r3, #0
 8009cca:	f04f 020a 	mov.w	r2, #10
 8009cce:	4641      	mov	r1, r8
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	d107      	bne.n	8009ce4 <_dtoa_r+0xb1c>
 8009cd4:	f000 fe90 	bl	800a9f8 <__multadd>
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4607      	mov	r7, r0
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	e775      	b.n	8009bd0 <_dtoa_r+0xa08>
 8009ce4:	f000 fe88 	bl	800a9f8 <__multadd>
 8009ce8:	4639      	mov	r1, r7
 8009cea:	4680      	mov	r8, r0
 8009cec:	2300      	movs	r3, #0
 8009cee:	220a      	movs	r2, #10
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fe81 	bl	800a9f8 <__multadd>
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	e7f0      	b.n	8009cdc <_dtoa_r+0xb14>
 8009cfa:	f1b9 0f00 	cmp.w	r9, #0
 8009cfe:	9a00      	ldr	r2, [sp, #0]
 8009d00:	bfcc      	ite	gt
 8009d02:	464d      	movgt	r5, r9
 8009d04:	2501      	movle	r5, #1
 8009d06:	4415      	add	r5, r2
 8009d08:	f04f 0800 	mov.w	r8, #0
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	2201      	movs	r2, #1
 8009d10:	4620      	mov	r0, r4
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	f001 f86a 	bl	800adec <__lshift>
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4683      	mov	fp, r0
 8009d1c:	f001 f8d2 	bl	800aec4 <__mcmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	dcb2      	bgt.n	8009c8a <_dtoa_r+0xac2>
 8009d24:	d102      	bne.n	8009d2c <_dtoa_r+0xb64>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	07db      	lsls	r3, r3, #31
 8009d2a:	d4ae      	bmi.n	8009c8a <_dtoa_r+0xac2>
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	461d      	mov	r5, r3
 8009d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d34:	2a30      	cmp	r2, #48	; 0x30
 8009d36:	d0fa      	beq.n	8009d2e <_dtoa_r+0xb66>
 8009d38:	e6f7      	b.n	8009b2a <_dtoa_r+0x962>
 8009d3a:	9a00      	ldr	r2, [sp, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d1a5      	bne.n	8009c8c <_dtoa_r+0xac4>
 8009d40:	f10a 0a01 	add.w	sl, sl, #1
 8009d44:	2331      	movs	r3, #49	; 0x31
 8009d46:	e779      	b.n	8009c3c <_dtoa_r+0xa74>
 8009d48:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <_dtoa_r+0xbd0>)
 8009d4a:	f7ff baaf 	b.w	80092ac <_dtoa_r+0xe4>
 8009d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f47f aa86 	bne.w	8009262 <_dtoa_r+0x9a>
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <_dtoa_r+0xbd4>)
 8009d58:	f7ff baa8 	b.w	80092ac <_dtoa_r+0xe4>
 8009d5c:	f1b9 0f00 	cmp.w	r9, #0
 8009d60:	dc03      	bgt.n	8009d6a <_dtoa_r+0xba2>
 8009d62:	9b05      	ldr	r3, [sp, #20]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	f73f aec9 	bgt.w	8009afc <_dtoa_r+0x934>
 8009d6a:	9d00      	ldr	r5, [sp, #0]
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4658      	mov	r0, fp
 8009d70:	f7ff f99f 	bl	80090b2 <quorem>
 8009d74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009d78:	f805 3b01 	strb.w	r3, [r5], #1
 8009d7c:	9a00      	ldr	r2, [sp, #0]
 8009d7e:	1aaa      	subs	r2, r5, r2
 8009d80:	4591      	cmp	r9, r2
 8009d82:	ddba      	ble.n	8009cfa <_dtoa_r+0xb32>
 8009d84:	4659      	mov	r1, fp
 8009d86:	2300      	movs	r3, #0
 8009d88:	220a      	movs	r2, #10
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 fe34 	bl	800a9f8 <__multadd>
 8009d90:	4683      	mov	fp, r0
 8009d92:	e7eb      	b.n	8009d6c <_dtoa_r+0xba4>
 8009d94:	0800c694 	.word	0x0800c694
 8009d98:	0800c491 	.word	0x0800c491
 8009d9c:	0800c611 	.word	0x0800c611

08009da0 <__sflush_r>:
 8009da0:	898a      	ldrh	r2, [r1, #12]
 8009da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	4605      	mov	r5, r0
 8009da8:	0710      	lsls	r0, r2, #28
 8009daa:	460c      	mov	r4, r1
 8009dac:	d458      	bmi.n	8009e60 <__sflush_r+0xc0>
 8009dae:	684b      	ldr	r3, [r1, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc05      	bgt.n	8009dc0 <__sflush_r+0x20>
 8009db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dc02      	bgt.n	8009dc0 <__sflush_r+0x20>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc2:	2e00      	cmp	r6, #0
 8009dc4:	d0f9      	beq.n	8009dba <__sflush_r+0x1a>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dcc:	682f      	ldr	r7, [r5, #0]
 8009dce:	602b      	str	r3, [r5, #0]
 8009dd0:	d032      	beq.n	8009e38 <__sflush_r+0x98>
 8009dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	075a      	lsls	r2, r3, #29
 8009dd8:	d505      	bpl.n	8009de6 <__sflush_r+0x46>
 8009dda:	6863      	ldr	r3, [r4, #4]
 8009ddc:	1ac0      	subs	r0, r0, r3
 8009dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de0:	b10b      	cbz	r3, 8009de6 <__sflush_r+0x46>
 8009de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009de4:	1ac0      	subs	r0, r0, r3
 8009de6:	2300      	movs	r3, #0
 8009de8:	4602      	mov	r2, r0
 8009dea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dec:	6a21      	ldr	r1, [r4, #32]
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b0      	blx	r6
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	d106      	bne.n	8009e06 <__sflush_r+0x66>
 8009df8:	6829      	ldr	r1, [r5, #0]
 8009dfa:	291d      	cmp	r1, #29
 8009dfc:	d82c      	bhi.n	8009e58 <__sflush_r+0xb8>
 8009dfe:	4a2a      	ldr	r2, [pc, #168]	; (8009ea8 <__sflush_r+0x108>)
 8009e00:	40ca      	lsrs	r2, r1
 8009e02:	07d6      	lsls	r6, r2, #31
 8009e04:	d528      	bpl.n	8009e58 <__sflush_r+0xb8>
 8009e06:	2200      	movs	r2, #0
 8009e08:	6062      	str	r2, [r4, #4]
 8009e0a:	04d9      	lsls	r1, r3, #19
 8009e0c:	6922      	ldr	r2, [r4, #16]
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	d504      	bpl.n	8009e1c <__sflush_r+0x7c>
 8009e12:	1c42      	adds	r2, r0, #1
 8009e14:	d101      	bne.n	8009e1a <__sflush_r+0x7a>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b903      	cbnz	r3, 8009e1c <__sflush_r+0x7c>
 8009e1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e1e:	602f      	str	r7, [r5, #0]
 8009e20:	2900      	cmp	r1, #0
 8009e22:	d0ca      	beq.n	8009dba <__sflush_r+0x1a>
 8009e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d002      	beq.n	8009e32 <__sflush_r+0x92>
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f7fd f8e9 	bl	8007004 <_free_r>
 8009e32:	2000      	movs	r0, #0
 8009e34:	6360      	str	r0, [r4, #52]	; 0x34
 8009e36:	e7c1      	b.n	8009dbc <__sflush_r+0x1c>
 8009e38:	6a21      	ldr	r1, [r4, #32]
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b0      	blx	r6
 8009e40:	1c41      	adds	r1, r0, #1
 8009e42:	d1c7      	bne.n	8009dd4 <__sflush_r+0x34>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0c4      	beq.n	8009dd4 <__sflush_r+0x34>
 8009e4a:	2b1d      	cmp	r3, #29
 8009e4c:	d001      	beq.n	8009e52 <__sflush_r+0xb2>
 8009e4e:	2b16      	cmp	r3, #22
 8009e50:	d101      	bne.n	8009e56 <__sflush_r+0xb6>
 8009e52:	602f      	str	r7, [r5, #0]
 8009e54:	e7b1      	b.n	8009dba <__sflush_r+0x1a>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	e7ad      	b.n	8009dbc <__sflush_r+0x1c>
 8009e60:	690f      	ldr	r7, [r1, #16]
 8009e62:	2f00      	cmp	r7, #0
 8009e64:	d0a9      	beq.n	8009dba <__sflush_r+0x1a>
 8009e66:	0793      	lsls	r3, r2, #30
 8009e68:	680e      	ldr	r6, [r1, #0]
 8009e6a:	bf08      	it	eq
 8009e6c:	694b      	ldreq	r3, [r1, #20]
 8009e6e:	600f      	str	r7, [r1, #0]
 8009e70:	bf18      	it	ne
 8009e72:	2300      	movne	r3, #0
 8009e74:	eba6 0807 	sub.w	r8, r6, r7
 8009e78:	608b      	str	r3, [r1, #8]
 8009e7a:	f1b8 0f00 	cmp.w	r8, #0
 8009e7e:	dd9c      	ble.n	8009dba <__sflush_r+0x1a>
 8009e80:	6a21      	ldr	r1, [r4, #32]
 8009e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e84:	4643      	mov	r3, r8
 8009e86:	463a      	mov	r2, r7
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b0      	blx	r6
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	dc06      	bgt.n	8009e9e <__sflush_r+0xfe>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e9c:	e78e      	b.n	8009dbc <__sflush_r+0x1c>
 8009e9e:	4407      	add	r7, r0
 8009ea0:	eba8 0800 	sub.w	r8, r8, r0
 8009ea4:	e7e9      	b.n	8009e7a <__sflush_r+0xda>
 8009ea6:	bf00      	nop
 8009ea8:	20400001 	.word	0x20400001

08009eac <_fflush_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	b913      	cbnz	r3, 8009ebc <_fflush_r+0x10>
 8009eb6:	2500      	movs	r5, #0
 8009eb8:	4628      	mov	r0, r5
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	b118      	cbz	r0, 8009ec6 <_fflush_r+0x1a>
 8009ebe:	6983      	ldr	r3, [r0, #24]
 8009ec0:	b90b      	cbnz	r3, 8009ec6 <_fflush_r+0x1a>
 8009ec2:	f000 f887 	bl	8009fd4 <__sinit>
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <_fflush_r+0x6c>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	d11b      	bne.n	8009f04 <_fflush_r+0x58>
 8009ecc:	686c      	ldr	r4, [r5, #4]
 8009ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0ef      	beq.n	8009eb6 <_fflush_r+0xa>
 8009ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ed8:	07d0      	lsls	r0, r2, #31
 8009eda:	d404      	bmi.n	8009ee6 <_fflush_r+0x3a>
 8009edc:	0599      	lsls	r1, r3, #22
 8009ede:	d402      	bmi.n	8009ee6 <_fflush_r+0x3a>
 8009ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee2:	f000 fc88 	bl	800a7f6 <__retarget_lock_acquire_recursive>
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	4621      	mov	r1, r4
 8009eea:	f7ff ff59 	bl	8009da0 <__sflush_r>
 8009eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef0:	07da      	lsls	r2, r3, #31
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	d4e0      	bmi.n	8009eb8 <_fflush_r+0xc>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	059b      	lsls	r3, r3, #22
 8009efa:	d4dd      	bmi.n	8009eb8 <_fflush_r+0xc>
 8009efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efe:	f000 fc7b 	bl	800a7f8 <__retarget_lock_release_recursive>
 8009f02:	e7d9      	b.n	8009eb8 <_fflush_r+0xc>
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <_fflush_r+0x70>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d101      	bne.n	8009f0e <_fflush_r+0x62>
 8009f0a:	68ac      	ldr	r4, [r5, #8]
 8009f0c:	e7df      	b.n	8009ece <_fflush_r+0x22>
 8009f0e:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <_fflush_r+0x74>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	bf08      	it	eq
 8009f14:	68ec      	ldreq	r4, [r5, #12]
 8009f16:	e7da      	b.n	8009ece <_fflush_r+0x22>
 8009f18:	0800c6c8 	.word	0x0800c6c8
 8009f1c:	0800c6e8 	.word	0x0800c6e8
 8009f20:	0800c6a8 	.word	0x0800c6a8

08009f24 <std>:
 8009f24:	2300      	movs	r3, #0
 8009f26:	b510      	push	{r4, lr}
 8009f28:	4604      	mov	r4, r0
 8009f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f32:	6083      	str	r3, [r0, #8]
 8009f34:	8181      	strh	r1, [r0, #12]
 8009f36:	6643      	str	r3, [r0, #100]	; 0x64
 8009f38:	81c2      	strh	r2, [r0, #14]
 8009f3a:	6183      	str	r3, [r0, #24]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	2208      	movs	r2, #8
 8009f40:	305c      	adds	r0, #92	; 0x5c
 8009f42:	f7fd f857 	bl	8006ff4 <memset>
 8009f46:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <std+0x38>)
 8009f48:	6263      	str	r3, [r4, #36]	; 0x24
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <std+0x3c>)
 8009f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <std+0x40>)
 8009f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <std+0x44>)
 8009f54:	6224      	str	r4, [r4, #32]
 8009f56:	6323      	str	r3, [r4, #48]	; 0x30
 8009f58:	bd10      	pop	{r4, pc}
 8009f5a:	bf00      	nop
 8009f5c:	0800b669 	.word	0x0800b669
 8009f60:	0800b68b 	.word	0x0800b68b
 8009f64:	0800b6c3 	.word	0x0800b6c3
 8009f68:	0800b6e7 	.word	0x0800b6e7

08009f6c <_cleanup_r>:
 8009f6c:	4901      	ldr	r1, [pc, #4]	; (8009f74 <_cleanup_r+0x8>)
 8009f6e:	f000 b8af 	b.w	800a0d0 <_fwalk_reent>
 8009f72:	bf00      	nop
 8009f74:	08009ead 	.word	0x08009ead

08009f78 <__sfmoreglue>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	1e4a      	subs	r2, r1, #1
 8009f7c:	2568      	movs	r5, #104	; 0x68
 8009f7e:	4355      	muls	r5, r2
 8009f80:	460e      	mov	r6, r1
 8009f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f86:	f7fd f88d 	bl	80070a4 <_malloc_r>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	b140      	cbz	r0, 8009fa0 <__sfmoreglue+0x28>
 8009f8e:	2100      	movs	r1, #0
 8009f90:	e9c0 1600 	strd	r1, r6, [r0]
 8009f94:	300c      	adds	r0, #12
 8009f96:	60a0      	str	r0, [r4, #8]
 8009f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f9c:	f7fd f82a 	bl	8006ff4 <memset>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}

08009fa4 <__sfp_lock_acquire>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	; (8009fac <__sfp_lock_acquire+0x8>)
 8009fa6:	f000 bc26 	b.w	800a7f6 <__retarget_lock_acquire_recursive>
 8009faa:	bf00      	nop
 8009fac:	20000a08 	.word	0x20000a08

08009fb0 <__sfp_lock_release>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	; (8009fb8 <__sfp_lock_release+0x8>)
 8009fb2:	f000 bc21 	b.w	800a7f8 <__retarget_lock_release_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20000a08 	.word	0x20000a08

08009fbc <__sinit_lock_acquire>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__sinit_lock_acquire+0x8>)
 8009fbe:	f000 bc1a 	b.w	800a7f6 <__retarget_lock_acquire_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20000a03 	.word	0x20000a03

08009fc8 <__sinit_lock_release>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__sinit_lock_release+0x8>)
 8009fca:	f000 bc15 	b.w	800a7f8 <__retarget_lock_release_recursive>
 8009fce:	bf00      	nop
 8009fd0:	20000a03 	.word	0x20000a03

08009fd4 <__sinit>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	f7ff fff0 	bl	8009fbc <__sinit_lock_acquire>
 8009fdc:	69a3      	ldr	r3, [r4, #24]
 8009fde:	b11b      	cbz	r3, 8009fe8 <__sinit+0x14>
 8009fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe4:	f7ff bff0 	b.w	8009fc8 <__sinit_lock_release>
 8009fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009fec:	6523      	str	r3, [r4, #80]	; 0x50
 8009fee:	4b13      	ldr	r3, [pc, #76]	; (800a03c <__sinit+0x68>)
 8009ff0:	4a13      	ldr	r2, [pc, #76]	; (800a040 <__sinit+0x6c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	bf04      	itt	eq
 8009ffa:	2301      	moveq	r3, #1
 8009ffc:	61a3      	streq	r3, [r4, #24]
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 f820 	bl	800a044 <__sfp>
 800a004:	6060      	str	r0, [r4, #4]
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f81c 	bl	800a044 <__sfp>
 800a00c:	60a0      	str	r0, [r4, #8]
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f818 	bl	800a044 <__sfp>
 800a014:	2200      	movs	r2, #0
 800a016:	60e0      	str	r0, [r4, #12]
 800a018:	2104      	movs	r1, #4
 800a01a:	6860      	ldr	r0, [r4, #4]
 800a01c:	f7ff ff82 	bl	8009f24 <std>
 800a020:	68a0      	ldr	r0, [r4, #8]
 800a022:	2201      	movs	r2, #1
 800a024:	2109      	movs	r1, #9
 800a026:	f7ff ff7d 	bl	8009f24 <std>
 800a02a:	68e0      	ldr	r0, [r4, #12]
 800a02c:	2202      	movs	r2, #2
 800a02e:	2112      	movs	r1, #18
 800a030:	f7ff ff78 	bl	8009f24 <std>
 800a034:	2301      	movs	r3, #1
 800a036:	61a3      	str	r3, [r4, #24]
 800a038:	e7d2      	b.n	8009fe0 <__sinit+0xc>
 800a03a:	bf00      	nop
 800a03c:	0800c46c 	.word	0x0800c46c
 800a040:	08009f6d 	.word	0x08009f6d

0800a044 <__sfp>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	4607      	mov	r7, r0
 800a048:	f7ff ffac 	bl	8009fa4 <__sfp_lock_acquire>
 800a04c:	4b1e      	ldr	r3, [pc, #120]	; (800a0c8 <__sfp+0x84>)
 800a04e:	681e      	ldr	r6, [r3, #0]
 800a050:	69b3      	ldr	r3, [r6, #24]
 800a052:	b913      	cbnz	r3, 800a05a <__sfp+0x16>
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ffbd 	bl	8009fd4 <__sinit>
 800a05a:	3648      	adds	r6, #72	; 0x48
 800a05c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a060:	3b01      	subs	r3, #1
 800a062:	d503      	bpl.n	800a06c <__sfp+0x28>
 800a064:	6833      	ldr	r3, [r6, #0]
 800a066:	b30b      	cbz	r3, 800a0ac <__sfp+0x68>
 800a068:	6836      	ldr	r6, [r6, #0]
 800a06a:	e7f7      	b.n	800a05c <__sfp+0x18>
 800a06c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a070:	b9d5      	cbnz	r5, 800a0a8 <__sfp+0x64>
 800a072:	4b16      	ldr	r3, [pc, #88]	; (800a0cc <__sfp+0x88>)
 800a074:	60e3      	str	r3, [r4, #12]
 800a076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a07a:	6665      	str	r5, [r4, #100]	; 0x64
 800a07c:	f000 fbba 	bl	800a7f4 <__retarget_lock_init_recursive>
 800a080:	f7ff ff96 	bl	8009fb0 <__sfp_lock_release>
 800a084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a08c:	6025      	str	r5, [r4, #0]
 800a08e:	61a5      	str	r5, [r4, #24]
 800a090:	2208      	movs	r2, #8
 800a092:	4629      	mov	r1, r5
 800a094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a098:	f7fc ffac 	bl	8006ff4 <memset>
 800a09c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a8:	3468      	adds	r4, #104	; 0x68
 800a0aa:	e7d9      	b.n	800a060 <__sfp+0x1c>
 800a0ac:	2104      	movs	r1, #4
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f7ff ff62 	bl	8009f78 <__sfmoreglue>
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	6030      	str	r0, [r6, #0]
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1d5      	bne.n	800a068 <__sfp+0x24>
 800a0bc:	f7ff ff78 	bl	8009fb0 <__sfp_lock_release>
 800a0c0:	230c      	movs	r3, #12
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	e7ee      	b.n	800a0a4 <__sfp+0x60>
 800a0c6:	bf00      	nop
 800a0c8:	0800c46c 	.word	0x0800c46c
 800a0cc:	ffff0001 	.word	0xffff0001

0800a0d0 <_fwalk_reent>:
 800a0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	4688      	mov	r8, r1
 800a0d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0dc:	2700      	movs	r7, #0
 800a0de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0e6:	d505      	bpl.n	800a0f4 <_fwalk_reent+0x24>
 800a0e8:	6824      	ldr	r4, [r4, #0]
 800a0ea:	2c00      	cmp	r4, #0
 800a0ec:	d1f7      	bne.n	800a0de <_fwalk_reent+0xe>
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f4:	89ab      	ldrh	r3, [r5, #12]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d907      	bls.n	800a10a <_fwalk_reent+0x3a>
 800a0fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0fe:	3301      	adds	r3, #1
 800a100:	d003      	beq.n	800a10a <_fwalk_reent+0x3a>
 800a102:	4629      	mov	r1, r5
 800a104:	4630      	mov	r0, r6
 800a106:	47c0      	blx	r8
 800a108:	4307      	orrs	r7, r0
 800a10a:	3568      	adds	r5, #104	; 0x68
 800a10c:	e7e9      	b.n	800a0e2 <_fwalk_reent+0x12>

0800a10e <rshift>:
 800a10e:	6903      	ldr	r3, [r0, #16]
 800a110:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a118:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a11c:	f100 0414 	add.w	r4, r0, #20
 800a120:	dd45      	ble.n	800a1ae <rshift+0xa0>
 800a122:	f011 011f 	ands.w	r1, r1, #31
 800a126:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a12a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a12e:	d10c      	bne.n	800a14a <rshift+0x3c>
 800a130:	f100 0710 	add.w	r7, r0, #16
 800a134:	4629      	mov	r1, r5
 800a136:	42b1      	cmp	r1, r6
 800a138:	d334      	bcc.n	800a1a4 <rshift+0x96>
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	1eea      	subs	r2, r5, #3
 800a140:	4296      	cmp	r6, r2
 800a142:	bf38      	it	cc
 800a144:	2300      	movcc	r3, #0
 800a146:	4423      	add	r3, r4
 800a148:	e015      	b.n	800a176 <rshift+0x68>
 800a14a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a14e:	f1c1 0820 	rsb	r8, r1, #32
 800a152:	40cf      	lsrs	r7, r1
 800a154:	f105 0e04 	add.w	lr, r5, #4
 800a158:	46a1      	mov	r9, r4
 800a15a:	4576      	cmp	r6, lr
 800a15c:	46f4      	mov	ip, lr
 800a15e:	d815      	bhi.n	800a18c <rshift+0x7e>
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	009a      	lsls	r2, r3, #2
 800a164:	3a04      	subs	r2, #4
 800a166:	3501      	adds	r5, #1
 800a168:	42ae      	cmp	r6, r5
 800a16a:	bf38      	it	cc
 800a16c:	2200      	movcc	r2, #0
 800a16e:	18a3      	adds	r3, r4, r2
 800a170:	50a7      	str	r7, [r4, r2]
 800a172:	b107      	cbz	r7, 800a176 <rshift+0x68>
 800a174:	3304      	adds	r3, #4
 800a176:	1b1a      	subs	r2, r3, r4
 800a178:	42a3      	cmp	r3, r4
 800a17a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a17e:	bf08      	it	eq
 800a180:	2300      	moveq	r3, #0
 800a182:	6102      	str	r2, [r0, #16]
 800a184:	bf08      	it	eq
 800a186:	6143      	streq	r3, [r0, #20]
 800a188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a18c:	f8dc c000 	ldr.w	ip, [ip]
 800a190:	fa0c fc08 	lsl.w	ip, ip, r8
 800a194:	ea4c 0707 	orr.w	r7, ip, r7
 800a198:	f849 7b04 	str.w	r7, [r9], #4
 800a19c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1a0:	40cf      	lsrs	r7, r1
 800a1a2:	e7da      	b.n	800a15a <rshift+0x4c>
 800a1a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a1a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1ac:	e7c3      	b.n	800a136 <rshift+0x28>
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	e7e1      	b.n	800a176 <rshift+0x68>

0800a1b2 <__hexdig_fun>:
 800a1b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a1b6:	2b09      	cmp	r3, #9
 800a1b8:	d802      	bhi.n	800a1c0 <__hexdig_fun+0xe>
 800a1ba:	3820      	subs	r0, #32
 800a1bc:	b2c0      	uxtb	r0, r0
 800a1be:	4770      	bx	lr
 800a1c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a1c4:	2b05      	cmp	r3, #5
 800a1c6:	d801      	bhi.n	800a1cc <__hexdig_fun+0x1a>
 800a1c8:	3847      	subs	r0, #71	; 0x47
 800a1ca:	e7f7      	b.n	800a1bc <__hexdig_fun+0xa>
 800a1cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	d801      	bhi.n	800a1d8 <__hexdig_fun+0x26>
 800a1d4:	3827      	subs	r0, #39	; 0x27
 800a1d6:	e7f1      	b.n	800a1bc <__hexdig_fun+0xa>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	4770      	bx	lr

0800a1dc <__gethex>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	ed2d 8b02 	vpush	{d8}
 800a1e4:	b089      	sub	sp, #36	; 0x24
 800a1e6:	ee08 0a10 	vmov	s16, r0
 800a1ea:	9304      	str	r3, [sp, #16]
 800a1ec:	4bbc      	ldr	r3, [pc, #752]	; (800a4e0 <__gethex+0x304>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	468b      	mov	fp, r1
 800a1f6:	4690      	mov	r8, r2
 800a1f8:	f7f5 ffea 	bl	80001d0 <strlen>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	f8db 2000 	ldr.w	r2, [fp]
 800a202:	4403      	add	r3, r0
 800a204:	4682      	mov	sl, r0
 800a206:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	1c93      	adds	r3, r2, #2
 800a20e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a212:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a216:	32fe      	adds	r2, #254	; 0xfe
 800a218:	18d1      	adds	r1, r2, r3
 800a21a:	461f      	mov	r7, r3
 800a21c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a220:	9100      	str	r1, [sp, #0]
 800a222:	2830      	cmp	r0, #48	; 0x30
 800a224:	d0f8      	beq.n	800a218 <__gethex+0x3c>
 800a226:	f7ff ffc4 	bl	800a1b2 <__hexdig_fun>
 800a22a:	4604      	mov	r4, r0
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d13a      	bne.n	800a2a6 <__gethex+0xca>
 800a230:	9901      	ldr	r1, [sp, #4]
 800a232:	4652      	mov	r2, sl
 800a234:	4638      	mov	r0, r7
 800a236:	f7fd ffb1 	bl	800819c <strncmp>
 800a23a:	4605      	mov	r5, r0
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d168      	bne.n	800a312 <__gethex+0x136>
 800a240:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a244:	eb07 060a 	add.w	r6, r7, sl
 800a248:	f7ff ffb3 	bl	800a1b2 <__hexdig_fun>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d062      	beq.n	800a316 <__gethex+0x13a>
 800a250:	4633      	mov	r3, r6
 800a252:	7818      	ldrb	r0, [r3, #0]
 800a254:	2830      	cmp	r0, #48	; 0x30
 800a256:	461f      	mov	r7, r3
 800a258:	f103 0301 	add.w	r3, r3, #1
 800a25c:	d0f9      	beq.n	800a252 <__gethex+0x76>
 800a25e:	f7ff ffa8 	bl	800a1b2 <__hexdig_fun>
 800a262:	2301      	movs	r3, #1
 800a264:	fab0 f480 	clz	r4, r0
 800a268:	0964      	lsrs	r4, r4, #5
 800a26a:	4635      	mov	r5, r6
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	463a      	mov	r2, r7
 800a270:	4616      	mov	r6, r2
 800a272:	3201      	adds	r2, #1
 800a274:	7830      	ldrb	r0, [r6, #0]
 800a276:	f7ff ff9c 	bl	800a1b2 <__hexdig_fun>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d1f8      	bne.n	800a270 <__gethex+0x94>
 800a27e:	9901      	ldr	r1, [sp, #4]
 800a280:	4652      	mov	r2, sl
 800a282:	4630      	mov	r0, r6
 800a284:	f7fd ff8a 	bl	800819c <strncmp>
 800a288:	b980      	cbnz	r0, 800a2ac <__gethex+0xd0>
 800a28a:	b94d      	cbnz	r5, 800a2a0 <__gethex+0xc4>
 800a28c:	eb06 050a 	add.w	r5, r6, sl
 800a290:	462a      	mov	r2, r5
 800a292:	4616      	mov	r6, r2
 800a294:	3201      	adds	r2, #1
 800a296:	7830      	ldrb	r0, [r6, #0]
 800a298:	f7ff ff8b 	bl	800a1b2 <__hexdig_fun>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d1f8      	bne.n	800a292 <__gethex+0xb6>
 800a2a0:	1bad      	subs	r5, r5, r6
 800a2a2:	00ad      	lsls	r5, r5, #2
 800a2a4:	e004      	b.n	800a2b0 <__gethex+0xd4>
 800a2a6:	2400      	movs	r4, #0
 800a2a8:	4625      	mov	r5, r4
 800a2aa:	e7e0      	b.n	800a26e <__gethex+0x92>
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	d1f7      	bne.n	800a2a0 <__gethex+0xc4>
 800a2b0:	7833      	ldrb	r3, [r6, #0]
 800a2b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2b6:	2b50      	cmp	r3, #80	; 0x50
 800a2b8:	d13b      	bne.n	800a332 <__gethex+0x156>
 800a2ba:	7873      	ldrb	r3, [r6, #1]
 800a2bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a2be:	d02c      	beq.n	800a31a <__gethex+0x13e>
 800a2c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a2c2:	d02e      	beq.n	800a322 <__gethex+0x146>
 800a2c4:	1c71      	adds	r1, r6, #1
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	7808      	ldrb	r0, [r1, #0]
 800a2cc:	f7ff ff71 	bl	800a1b2 <__hexdig_fun>
 800a2d0:	1e43      	subs	r3, r0, #1
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b18      	cmp	r3, #24
 800a2d6:	d82c      	bhi.n	800a332 <__gethex+0x156>
 800a2d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a2dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a2e0:	f7ff ff67 	bl	800a1b2 <__hexdig_fun>
 800a2e4:	1e43      	subs	r3, r0, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b18      	cmp	r3, #24
 800a2ea:	d91d      	bls.n	800a328 <__gethex+0x14c>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	d000      	beq.n	800a2f4 <__gethex+0x118>
 800a2f2:	4252      	negs	r2, r2
 800a2f4:	4415      	add	r5, r2
 800a2f6:	f8cb 1000 	str.w	r1, [fp]
 800a2fa:	b1e4      	cbz	r4, 800a336 <__gethex+0x15a>
 800a2fc:	9b00      	ldr	r3, [sp, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	bf14      	ite	ne
 800a302:	2700      	movne	r7, #0
 800a304:	2706      	moveq	r7, #6
 800a306:	4638      	mov	r0, r7
 800a308:	b009      	add	sp, #36	; 0x24
 800a30a:	ecbd 8b02 	vpop	{d8}
 800a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a312:	463e      	mov	r6, r7
 800a314:	4625      	mov	r5, r4
 800a316:	2401      	movs	r4, #1
 800a318:	e7ca      	b.n	800a2b0 <__gethex+0xd4>
 800a31a:	f04f 0900 	mov.w	r9, #0
 800a31e:	1cb1      	adds	r1, r6, #2
 800a320:	e7d3      	b.n	800a2ca <__gethex+0xee>
 800a322:	f04f 0901 	mov.w	r9, #1
 800a326:	e7fa      	b.n	800a31e <__gethex+0x142>
 800a328:	230a      	movs	r3, #10
 800a32a:	fb03 0202 	mla	r2, r3, r2, r0
 800a32e:	3a10      	subs	r2, #16
 800a330:	e7d4      	b.n	800a2dc <__gethex+0x100>
 800a332:	4631      	mov	r1, r6
 800a334:	e7df      	b.n	800a2f6 <__gethex+0x11a>
 800a336:	1bf3      	subs	r3, r6, r7
 800a338:	3b01      	subs	r3, #1
 800a33a:	4621      	mov	r1, r4
 800a33c:	2b07      	cmp	r3, #7
 800a33e:	dc0b      	bgt.n	800a358 <__gethex+0x17c>
 800a340:	ee18 0a10 	vmov	r0, s16
 800a344:	f000 faf6 	bl	800a934 <_Balloc>
 800a348:	4604      	mov	r4, r0
 800a34a:	b940      	cbnz	r0, 800a35e <__gethex+0x182>
 800a34c:	4b65      	ldr	r3, [pc, #404]	; (800a4e4 <__gethex+0x308>)
 800a34e:	4602      	mov	r2, r0
 800a350:	21de      	movs	r1, #222	; 0xde
 800a352:	4865      	ldr	r0, [pc, #404]	; (800a4e8 <__gethex+0x30c>)
 800a354:	f7fc fdde 	bl	8006f14 <__assert_func>
 800a358:	3101      	adds	r1, #1
 800a35a:	105b      	asrs	r3, r3, #1
 800a35c:	e7ee      	b.n	800a33c <__gethex+0x160>
 800a35e:	f100 0914 	add.w	r9, r0, #20
 800a362:	f04f 0b00 	mov.w	fp, #0
 800a366:	f1ca 0301 	rsb	r3, sl, #1
 800a36a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a36e:	f8cd b000 	str.w	fp, [sp]
 800a372:	9306      	str	r3, [sp, #24]
 800a374:	42b7      	cmp	r7, r6
 800a376:	d340      	bcc.n	800a3fa <__gethex+0x21e>
 800a378:	9802      	ldr	r0, [sp, #8]
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	f840 3b04 	str.w	r3, [r0], #4
 800a380:	eba0 0009 	sub.w	r0, r0, r9
 800a384:	1080      	asrs	r0, r0, #2
 800a386:	0146      	lsls	r6, r0, #5
 800a388:	6120      	str	r0, [r4, #16]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fbc8 	bl	800ab20 <__hi0bits>
 800a390:	1a30      	subs	r0, r6, r0
 800a392:	f8d8 6000 	ldr.w	r6, [r8]
 800a396:	42b0      	cmp	r0, r6
 800a398:	dd63      	ble.n	800a462 <__gethex+0x286>
 800a39a:	1b87      	subs	r7, r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 ff62 	bl	800b268 <__any_on>
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	b1a8      	cbz	r0, 800a3d4 <__gethex+0x1f8>
 800a3a8:	1e7b      	subs	r3, r7, #1
 800a3aa:	1159      	asrs	r1, r3, #5
 800a3ac:	f003 021f 	and.w	r2, r3, #31
 800a3b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a3b4:	f04f 0a01 	mov.w	sl, #1
 800a3b8:	fa0a f202 	lsl.w	r2, sl, r2
 800a3bc:	420a      	tst	r2, r1
 800a3be:	d009      	beq.n	800a3d4 <__gethex+0x1f8>
 800a3c0:	4553      	cmp	r3, sl
 800a3c2:	dd05      	ble.n	800a3d0 <__gethex+0x1f4>
 800a3c4:	1eb9      	subs	r1, r7, #2
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 ff4e 	bl	800b268 <__any_on>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d145      	bne.n	800a45c <__gethex+0x280>
 800a3d0:	f04f 0a02 	mov.w	sl, #2
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7ff fe99 	bl	800a10e <rshift>
 800a3dc:	443d      	add	r5, r7
 800a3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3e2:	42ab      	cmp	r3, r5
 800a3e4:	da4c      	bge.n	800a480 <__gethex+0x2a4>
 800a3e6:	ee18 0a10 	vmov	r0, s16
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	f000 fae2 	bl	800a9b4 <_Bfree>
 800a3f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	27a3      	movs	r7, #163	; 0xa3
 800a3f8:	e785      	b.n	800a306 <__gethex+0x12a>
 800a3fa:	1e73      	subs	r3, r6, #1
 800a3fc:	9a05      	ldr	r2, [sp, #20]
 800a3fe:	9303      	str	r3, [sp, #12]
 800a400:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a404:	4293      	cmp	r3, r2
 800a406:	d019      	beq.n	800a43c <__gethex+0x260>
 800a408:	f1bb 0f20 	cmp.w	fp, #32
 800a40c:	d107      	bne.n	800a41e <__gethex+0x242>
 800a40e:	9b02      	ldr	r3, [sp, #8]
 800a410:	9a00      	ldr	r2, [sp, #0]
 800a412:	f843 2b04 	str.w	r2, [r3], #4
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	2300      	movs	r3, #0
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	469b      	mov	fp, r3
 800a41e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a422:	f7ff fec6 	bl	800a1b2 <__hexdig_fun>
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	f000 000f 	and.w	r0, r0, #15
 800a42c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a430:	4303      	orrs	r3, r0
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	f10b 0b04 	add.w	fp, fp, #4
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	e00d      	b.n	800a458 <__gethex+0x27c>
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	9a06      	ldr	r2, [sp, #24]
 800a440:	4413      	add	r3, r2
 800a442:	42bb      	cmp	r3, r7
 800a444:	d3e0      	bcc.n	800a408 <__gethex+0x22c>
 800a446:	4618      	mov	r0, r3
 800a448:	9901      	ldr	r1, [sp, #4]
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	4652      	mov	r2, sl
 800a44e:	f7fd fea5 	bl	800819c <strncmp>
 800a452:	9b07      	ldr	r3, [sp, #28]
 800a454:	2800      	cmp	r0, #0
 800a456:	d1d7      	bne.n	800a408 <__gethex+0x22c>
 800a458:	461e      	mov	r6, r3
 800a45a:	e78b      	b.n	800a374 <__gethex+0x198>
 800a45c:	f04f 0a03 	mov.w	sl, #3
 800a460:	e7b8      	b.n	800a3d4 <__gethex+0x1f8>
 800a462:	da0a      	bge.n	800a47a <__gethex+0x29e>
 800a464:	1a37      	subs	r7, r6, r0
 800a466:	4621      	mov	r1, r4
 800a468:	ee18 0a10 	vmov	r0, s16
 800a46c:	463a      	mov	r2, r7
 800a46e:	f000 fcbd 	bl	800adec <__lshift>
 800a472:	1bed      	subs	r5, r5, r7
 800a474:	4604      	mov	r4, r0
 800a476:	f100 0914 	add.w	r9, r0, #20
 800a47a:	f04f 0a00 	mov.w	sl, #0
 800a47e:	e7ae      	b.n	800a3de <__gethex+0x202>
 800a480:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a484:	42a8      	cmp	r0, r5
 800a486:	dd72      	ble.n	800a56e <__gethex+0x392>
 800a488:	1b45      	subs	r5, r0, r5
 800a48a:	42ae      	cmp	r6, r5
 800a48c:	dc36      	bgt.n	800a4fc <__gethex+0x320>
 800a48e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d02a      	beq.n	800a4ec <__gethex+0x310>
 800a496:	2b03      	cmp	r3, #3
 800a498:	d02c      	beq.n	800a4f4 <__gethex+0x318>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d115      	bne.n	800a4ca <__gethex+0x2ee>
 800a49e:	42ae      	cmp	r6, r5
 800a4a0:	d113      	bne.n	800a4ca <__gethex+0x2ee>
 800a4a2:	2e01      	cmp	r6, #1
 800a4a4:	d10b      	bne.n	800a4be <__gethex+0x2e2>
 800a4a6:	9a04      	ldr	r2, [sp, #16]
 800a4a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	f8c9 3000 	str.w	r3, [r9]
 800a4b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b8:	2762      	movs	r7, #98	; 0x62
 800a4ba:	601c      	str	r4, [r3, #0]
 800a4bc:	e723      	b.n	800a306 <__gethex+0x12a>
 800a4be:	1e71      	subs	r1, r6, #1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fed1 	bl	800b268 <__any_on>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d1ed      	bne.n	800a4a6 <__gethex+0x2ca>
 800a4ca:	ee18 0a10 	vmov	r0, s16
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	f000 fa70 	bl	800a9b4 <_Bfree>
 800a4d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	2750      	movs	r7, #80	; 0x50
 800a4dc:	e713      	b.n	800a306 <__gethex+0x12a>
 800a4de:	bf00      	nop
 800a4e0:	0800c774 	.word	0x0800c774
 800a4e4:	0800c694 	.word	0x0800c694
 800a4e8:	0800c708 	.word	0x0800c708
 800a4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1eb      	bne.n	800a4ca <__gethex+0x2ee>
 800a4f2:	e7d8      	b.n	800a4a6 <__gethex+0x2ca>
 800a4f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1d5      	bne.n	800a4a6 <__gethex+0x2ca>
 800a4fa:	e7e6      	b.n	800a4ca <__gethex+0x2ee>
 800a4fc:	1e6f      	subs	r7, r5, #1
 800a4fe:	f1ba 0f00 	cmp.w	sl, #0
 800a502:	d131      	bne.n	800a568 <__gethex+0x38c>
 800a504:	b127      	cbz	r7, 800a510 <__gethex+0x334>
 800a506:	4639      	mov	r1, r7
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fead 	bl	800b268 <__any_on>
 800a50e:	4682      	mov	sl, r0
 800a510:	117b      	asrs	r3, r7, #5
 800a512:	2101      	movs	r1, #1
 800a514:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a518:	f007 071f 	and.w	r7, r7, #31
 800a51c:	fa01 f707 	lsl.w	r7, r1, r7
 800a520:	421f      	tst	r7, r3
 800a522:	4629      	mov	r1, r5
 800a524:	4620      	mov	r0, r4
 800a526:	bf18      	it	ne
 800a528:	f04a 0a02 	orrne.w	sl, sl, #2
 800a52c:	1b76      	subs	r6, r6, r5
 800a52e:	f7ff fdee 	bl	800a10e <rshift>
 800a532:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a536:	2702      	movs	r7, #2
 800a538:	f1ba 0f00 	cmp.w	sl, #0
 800a53c:	d048      	beq.n	800a5d0 <__gethex+0x3f4>
 800a53e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d015      	beq.n	800a572 <__gethex+0x396>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d017      	beq.n	800a57a <__gethex+0x39e>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d109      	bne.n	800a562 <__gethex+0x386>
 800a54e:	f01a 0f02 	tst.w	sl, #2
 800a552:	d006      	beq.n	800a562 <__gethex+0x386>
 800a554:	f8d9 0000 	ldr.w	r0, [r9]
 800a558:	ea4a 0a00 	orr.w	sl, sl, r0
 800a55c:	f01a 0f01 	tst.w	sl, #1
 800a560:	d10e      	bne.n	800a580 <__gethex+0x3a4>
 800a562:	f047 0710 	orr.w	r7, r7, #16
 800a566:	e033      	b.n	800a5d0 <__gethex+0x3f4>
 800a568:	f04f 0a01 	mov.w	sl, #1
 800a56c:	e7d0      	b.n	800a510 <__gethex+0x334>
 800a56e:	2701      	movs	r7, #1
 800a570:	e7e2      	b.n	800a538 <__gethex+0x35c>
 800a572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a574:	f1c3 0301 	rsb	r3, r3, #1
 800a578:	9315      	str	r3, [sp, #84]	; 0x54
 800a57a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0f0      	beq.n	800a562 <__gethex+0x386>
 800a580:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a584:	f104 0314 	add.w	r3, r4, #20
 800a588:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a58c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a590:	f04f 0c00 	mov.w	ip, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a59e:	d01c      	beq.n	800a5da <__gethex+0x3fe>
 800a5a0:	3201      	adds	r2, #1
 800a5a2:	6002      	str	r2, [r0, #0]
 800a5a4:	2f02      	cmp	r7, #2
 800a5a6:	f104 0314 	add.w	r3, r4, #20
 800a5aa:	d13f      	bne.n	800a62c <__gethex+0x450>
 800a5ac:	f8d8 2000 	ldr.w	r2, [r8]
 800a5b0:	3a01      	subs	r2, #1
 800a5b2:	42b2      	cmp	r2, r6
 800a5b4:	d10a      	bne.n	800a5cc <__gethex+0x3f0>
 800a5b6:	1171      	asrs	r1, r6, #5
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5be:	f006 061f 	and.w	r6, r6, #31
 800a5c2:	fa02 f606 	lsl.w	r6, r2, r6
 800a5c6:	421e      	tst	r6, r3
 800a5c8:	bf18      	it	ne
 800a5ca:	4617      	movne	r7, r2
 800a5cc:	f047 0720 	orr.w	r7, r7, #32
 800a5d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5d2:	601c      	str	r4, [r3, #0]
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	601d      	str	r5, [r3, #0]
 800a5d8:	e695      	b.n	800a306 <__gethex+0x12a>
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a5e0:	d8d8      	bhi.n	800a594 <__gethex+0x3b8>
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	459b      	cmp	fp, r3
 800a5e6:	db19      	blt.n	800a61c <__gethex+0x440>
 800a5e8:	6861      	ldr	r1, [r4, #4]
 800a5ea:	ee18 0a10 	vmov	r0, s16
 800a5ee:	3101      	adds	r1, #1
 800a5f0:	f000 f9a0 	bl	800a934 <_Balloc>
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	b918      	cbnz	r0, 800a600 <__gethex+0x424>
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	; (800a664 <__gethex+0x488>)
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	2184      	movs	r1, #132	; 0x84
 800a5fe:	e6a8      	b.n	800a352 <__gethex+0x176>
 800a600:	6922      	ldr	r2, [r4, #16]
 800a602:	3202      	adds	r2, #2
 800a604:	f104 010c 	add.w	r1, r4, #12
 800a608:	0092      	lsls	r2, r2, #2
 800a60a:	300c      	adds	r0, #12
 800a60c:	f7fc fce4 	bl	8006fd8 <memcpy>
 800a610:	4621      	mov	r1, r4
 800a612:	ee18 0a10 	vmov	r0, s16
 800a616:	f000 f9cd 	bl	800a9b4 <_Bfree>
 800a61a:	464c      	mov	r4, r9
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a624:	6122      	str	r2, [r4, #16]
 800a626:	2201      	movs	r2, #1
 800a628:	615a      	str	r2, [r3, #20]
 800a62a:	e7bb      	b.n	800a5a4 <__gethex+0x3c8>
 800a62c:	6922      	ldr	r2, [r4, #16]
 800a62e:	455a      	cmp	r2, fp
 800a630:	dd0b      	ble.n	800a64a <__gethex+0x46e>
 800a632:	2101      	movs	r1, #1
 800a634:	4620      	mov	r0, r4
 800a636:	f7ff fd6a 	bl	800a10e <rshift>
 800a63a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a63e:	3501      	adds	r5, #1
 800a640:	42ab      	cmp	r3, r5
 800a642:	f6ff aed0 	blt.w	800a3e6 <__gethex+0x20a>
 800a646:	2701      	movs	r7, #1
 800a648:	e7c0      	b.n	800a5cc <__gethex+0x3f0>
 800a64a:	f016 061f 	ands.w	r6, r6, #31
 800a64e:	d0fa      	beq.n	800a646 <__gethex+0x46a>
 800a650:	449a      	add	sl, r3
 800a652:	f1c6 0620 	rsb	r6, r6, #32
 800a656:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a65a:	f000 fa61 	bl	800ab20 <__hi0bits>
 800a65e:	42b0      	cmp	r0, r6
 800a660:	dbe7      	blt.n	800a632 <__gethex+0x456>
 800a662:	e7f0      	b.n	800a646 <__gethex+0x46a>
 800a664:	0800c694 	.word	0x0800c694

0800a668 <L_shift>:
 800a668:	f1c2 0208 	rsb	r2, r2, #8
 800a66c:	0092      	lsls	r2, r2, #2
 800a66e:	b570      	push	{r4, r5, r6, lr}
 800a670:	f1c2 0620 	rsb	r6, r2, #32
 800a674:	6843      	ldr	r3, [r0, #4]
 800a676:	6804      	ldr	r4, [r0, #0]
 800a678:	fa03 f506 	lsl.w	r5, r3, r6
 800a67c:	432c      	orrs	r4, r5
 800a67e:	40d3      	lsrs	r3, r2
 800a680:	6004      	str	r4, [r0, #0]
 800a682:	f840 3f04 	str.w	r3, [r0, #4]!
 800a686:	4288      	cmp	r0, r1
 800a688:	d3f4      	bcc.n	800a674 <L_shift+0xc>
 800a68a:	bd70      	pop	{r4, r5, r6, pc}

0800a68c <__match>:
 800a68c:	b530      	push	{r4, r5, lr}
 800a68e:	6803      	ldr	r3, [r0, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a696:	b914      	cbnz	r4, 800a69e <__match+0x12>
 800a698:	6003      	str	r3, [r0, #0]
 800a69a:	2001      	movs	r0, #1
 800a69c:	bd30      	pop	{r4, r5, pc}
 800a69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a6a6:	2d19      	cmp	r5, #25
 800a6a8:	bf98      	it	ls
 800a6aa:	3220      	addls	r2, #32
 800a6ac:	42a2      	cmp	r2, r4
 800a6ae:	d0f0      	beq.n	800a692 <__match+0x6>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e7f3      	b.n	800a69c <__match+0x10>

0800a6b4 <__hexnan>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	680b      	ldr	r3, [r1, #0]
 800a6ba:	6801      	ldr	r1, [r0, #0]
 800a6bc:	115e      	asrs	r6, r3, #5
 800a6be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6c2:	f013 031f 	ands.w	r3, r3, #31
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	bf18      	it	ne
 800a6ca:	3604      	addne	r6, #4
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	1f37      	subs	r7, r6, #4
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	4690      	mov	r8, r2
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6da:	46b9      	mov	r9, r7
 800a6dc:	463c      	mov	r4, r7
 800a6de:	9502      	str	r5, [sp, #8]
 800a6e0:	46ab      	mov	fp, r5
 800a6e2:	784a      	ldrb	r2, [r1, #1]
 800a6e4:	1c4b      	adds	r3, r1, #1
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	b342      	cbz	r2, 800a73c <__hexnan+0x88>
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	9105      	str	r1, [sp, #20]
 800a6ee:	9204      	str	r2, [sp, #16]
 800a6f0:	f7ff fd5f 	bl	800a1b2 <__hexdig_fun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d14f      	bne.n	800a798 <__hexnan+0xe4>
 800a6f8:	9a04      	ldr	r2, [sp, #16]
 800a6fa:	9905      	ldr	r1, [sp, #20]
 800a6fc:	2a20      	cmp	r2, #32
 800a6fe:	d818      	bhi.n	800a732 <__hexnan+0x7e>
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	459b      	cmp	fp, r3
 800a704:	dd13      	ble.n	800a72e <__hexnan+0x7a>
 800a706:	454c      	cmp	r4, r9
 800a708:	d206      	bcs.n	800a718 <__hexnan+0x64>
 800a70a:	2d07      	cmp	r5, #7
 800a70c:	dc04      	bgt.n	800a718 <__hexnan+0x64>
 800a70e:	462a      	mov	r2, r5
 800a710:	4649      	mov	r1, r9
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff ffa8 	bl	800a668 <L_shift>
 800a718:	4544      	cmp	r4, r8
 800a71a:	d950      	bls.n	800a7be <__hexnan+0x10a>
 800a71c:	2300      	movs	r3, #0
 800a71e:	f1a4 0904 	sub.w	r9, r4, #4
 800a722:	f844 3c04 	str.w	r3, [r4, #-4]
 800a726:	f8cd b008 	str.w	fp, [sp, #8]
 800a72a:	464c      	mov	r4, r9
 800a72c:	461d      	mov	r5, r3
 800a72e:	9903      	ldr	r1, [sp, #12]
 800a730:	e7d7      	b.n	800a6e2 <__hexnan+0x2e>
 800a732:	2a29      	cmp	r2, #41	; 0x29
 800a734:	d156      	bne.n	800a7e4 <__hexnan+0x130>
 800a736:	3102      	adds	r1, #2
 800a738:	f8ca 1000 	str.w	r1, [sl]
 800a73c:	f1bb 0f00 	cmp.w	fp, #0
 800a740:	d050      	beq.n	800a7e4 <__hexnan+0x130>
 800a742:	454c      	cmp	r4, r9
 800a744:	d206      	bcs.n	800a754 <__hexnan+0xa0>
 800a746:	2d07      	cmp	r5, #7
 800a748:	dc04      	bgt.n	800a754 <__hexnan+0xa0>
 800a74a:	462a      	mov	r2, r5
 800a74c:	4649      	mov	r1, r9
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff ff8a 	bl	800a668 <L_shift>
 800a754:	4544      	cmp	r4, r8
 800a756:	d934      	bls.n	800a7c2 <__hexnan+0x10e>
 800a758:	f1a8 0204 	sub.w	r2, r8, #4
 800a75c:	4623      	mov	r3, r4
 800a75e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a762:	f842 1f04 	str.w	r1, [r2, #4]!
 800a766:	429f      	cmp	r7, r3
 800a768:	d2f9      	bcs.n	800a75e <__hexnan+0xaa>
 800a76a:	1b3b      	subs	r3, r7, r4
 800a76c:	f023 0303 	bic.w	r3, r3, #3
 800a770:	3304      	adds	r3, #4
 800a772:	3401      	adds	r4, #1
 800a774:	3e03      	subs	r6, #3
 800a776:	42b4      	cmp	r4, r6
 800a778:	bf88      	it	hi
 800a77a:	2304      	movhi	r3, #4
 800a77c:	4443      	add	r3, r8
 800a77e:	2200      	movs	r2, #0
 800a780:	f843 2b04 	str.w	r2, [r3], #4
 800a784:	429f      	cmp	r7, r3
 800a786:	d2fb      	bcs.n	800a780 <__hexnan+0xcc>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	b91b      	cbnz	r3, 800a794 <__hexnan+0xe0>
 800a78c:	4547      	cmp	r7, r8
 800a78e:	d127      	bne.n	800a7e0 <__hexnan+0x12c>
 800a790:	2301      	movs	r3, #1
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	2005      	movs	r0, #5
 800a796:	e026      	b.n	800a7e6 <__hexnan+0x132>
 800a798:	3501      	adds	r5, #1
 800a79a:	2d08      	cmp	r5, #8
 800a79c:	f10b 0b01 	add.w	fp, fp, #1
 800a7a0:	dd06      	ble.n	800a7b0 <__hexnan+0xfc>
 800a7a2:	4544      	cmp	r4, r8
 800a7a4:	d9c3      	bls.n	800a72e <__hexnan+0x7a>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7ac:	2501      	movs	r5, #1
 800a7ae:	3c04      	subs	r4, #4
 800a7b0:	6822      	ldr	r2, [r4, #0]
 800a7b2:	f000 000f 	and.w	r0, r0, #15
 800a7b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a7ba:	6022      	str	r2, [r4, #0]
 800a7bc:	e7b7      	b.n	800a72e <__hexnan+0x7a>
 800a7be:	2508      	movs	r5, #8
 800a7c0:	e7b5      	b.n	800a72e <__hexnan+0x7a>
 800a7c2:	9b01      	ldr	r3, [sp, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d0df      	beq.n	800a788 <__hexnan+0xd4>
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7cc:	f1c3 0320 	rsb	r3, r3, #32
 800a7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a7d8:	401a      	ands	r2, r3
 800a7da:	f846 2c04 	str.w	r2, [r6, #-4]
 800a7de:	e7d3      	b.n	800a788 <__hexnan+0xd4>
 800a7e0:	3f04      	subs	r7, #4
 800a7e2:	e7d1      	b.n	800a788 <__hexnan+0xd4>
 800a7e4:	2004      	movs	r0, #4
 800a7e6:	b007      	add	sp, #28
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7ec <_localeconv_r>:
 800a7ec:	4800      	ldr	r0, [pc, #0]	; (800a7f0 <_localeconv_r+0x4>)
 800a7ee:	4770      	bx	lr
 800a7f0:	2000016c 	.word	0x2000016c

0800a7f4 <__retarget_lock_init_recursive>:
 800a7f4:	4770      	bx	lr

0800a7f6 <__retarget_lock_acquire_recursive>:
 800a7f6:	4770      	bx	lr

0800a7f8 <__retarget_lock_release_recursive>:
 800a7f8:	4770      	bx	lr

0800a7fa <__swhatbuf_r>:
 800a7fa:	b570      	push	{r4, r5, r6, lr}
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a802:	2900      	cmp	r1, #0
 800a804:	b096      	sub	sp, #88	; 0x58
 800a806:	4614      	mov	r4, r2
 800a808:	461d      	mov	r5, r3
 800a80a:	da07      	bge.n	800a81c <__swhatbuf_r+0x22>
 800a80c:	2300      	movs	r3, #0
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	89b3      	ldrh	r3, [r6, #12]
 800a812:	061a      	lsls	r2, r3, #24
 800a814:	d410      	bmi.n	800a838 <__swhatbuf_r+0x3e>
 800a816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a81a:	e00e      	b.n	800a83a <__swhatbuf_r+0x40>
 800a81c:	466a      	mov	r2, sp
 800a81e:	f000 ff95 	bl	800b74c <_fstat_r>
 800a822:	2800      	cmp	r0, #0
 800a824:	dbf2      	blt.n	800a80c <__swhatbuf_r+0x12>
 800a826:	9a01      	ldr	r2, [sp, #4]
 800a828:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a82c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a830:	425a      	negs	r2, r3
 800a832:	415a      	adcs	r2, r3
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	e7ee      	b.n	800a816 <__swhatbuf_r+0x1c>
 800a838:	2340      	movs	r3, #64	; 0x40
 800a83a:	2000      	movs	r0, #0
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	b016      	add	sp, #88	; 0x58
 800a840:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a844 <__smakebuf_r>:
 800a844:	898b      	ldrh	r3, [r1, #12]
 800a846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a848:	079d      	lsls	r5, r3, #30
 800a84a:	4606      	mov	r6, r0
 800a84c:	460c      	mov	r4, r1
 800a84e:	d507      	bpl.n	800a860 <__smakebuf_r+0x1c>
 800a850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	2301      	movs	r3, #1
 800a85a:	6163      	str	r3, [r4, #20]
 800a85c:	b002      	add	sp, #8
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	ab01      	add	r3, sp, #4
 800a862:	466a      	mov	r2, sp
 800a864:	f7ff ffc9 	bl	800a7fa <__swhatbuf_r>
 800a868:	9900      	ldr	r1, [sp, #0]
 800a86a:	4605      	mov	r5, r0
 800a86c:	4630      	mov	r0, r6
 800a86e:	f7fc fc19 	bl	80070a4 <_malloc_r>
 800a872:	b948      	cbnz	r0, 800a888 <__smakebuf_r+0x44>
 800a874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a878:	059a      	lsls	r2, r3, #22
 800a87a:	d4ef      	bmi.n	800a85c <__smakebuf_r+0x18>
 800a87c:	f023 0303 	bic.w	r3, r3, #3
 800a880:	f043 0302 	orr.w	r3, r3, #2
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	e7e3      	b.n	800a850 <__smakebuf_r+0xc>
 800a888:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <__smakebuf_r+0x7c>)
 800a88a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	6020      	str	r0, [r4, #0]
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	6163      	str	r3, [r4, #20]
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	6120      	str	r0, [r4, #16]
 800a89e:	b15b      	cbz	r3, 800a8b8 <__smakebuf_r+0x74>
 800a8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	f000 ff63 	bl	800b770 <_isatty_r>
 800a8aa:	b128      	cbz	r0, 800a8b8 <__smakebuf_r+0x74>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f023 0303 	bic.w	r3, r3, #3
 800a8b2:	f043 0301 	orr.w	r3, r3, #1
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	89a0      	ldrh	r0, [r4, #12]
 800a8ba:	4305      	orrs	r5, r0
 800a8bc:	81a5      	strh	r5, [r4, #12]
 800a8be:	e7cd      	b.n	800a85c <__smakebuf_r+0x18>
 800a8c0:	08009f6d 	.word	0x08009f6d

0800a8c4 <__ascii_mbtowc>:
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	b901      	cbnz	r1, 800a8ca <__ascii_mbtowc+0x6>
 800a8c8:	a901      	add	r1, sp, #4
 800a8ca:	b142      	cbz	r2, 800a8de <__ascii_mbtowc+0x1a>
 800a8cc:	b14b      	cbz	r3, 800a8e2 <__ascii_mbtowc+0x1e>
 800a8ce:	7813      	ldrb	r3, [r2, #0]
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	1e10      	subs	r0, r2, #0
 800a8d6:	bf18      	it	ne
 800a8d8:	2001      	movne	r0, #1
 800a8da:	b002      	add	sp, #8
 800a8dc:	4770      	bx	lr
 800a8de:	4610      	mov	r0, r2
 800a8e0:	e7fb      	b.n	800a8da <__ascii_mbtowc+0x16>
 800a8e2:	f06f 0001 	mvn.w	r0, #1
 800a8e6:	e7f8      	b.n	800a8da <__ascii_mbtowc+0x16>

0800a8e8 <memmove>:
 800a8e8:	4288      	cmp	r0, r1
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	eb01 0402 	add.w	r4, r1, r2
 800a8f0:	d902      	bls.n	800a8f8 <memmove+0x10>
 800a8f2:	4284      	cmp	r4, r0
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	d807      	bhi.n	800a908 <memmove+0x20>
 800a8f8:	1e43      	subs	r3, r0, #1
 800a8fa:	42a1      	cmp	r1, r4
 800a8fc:	d008      	beq.n	800a910 <memmove+0x28>
 800a8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a902:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a906:	e7f8      	b.n	800a8fa <memmove+0x12>
 800a908:	4402      	add	r2, r0
 800a90a:	4601      	mov	r1, r0
 800a90c:	428a      	cmp	r2, r1
 800a90e:	d100      	bne.n	800a912 <memmove+0x2a>
 800a910:	bd10      	pop	{r4, pc}
 800a912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a91a:	e7f7      	b.n	800a90c <memmove+0x24>

0800a91c <__malloc_lock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_lock+0x8>)
 800a91e:	f7ff bf6a 	b.w	800a7f6 <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	20000a04 	.word	0x20000a04

0800a928 <__malloc_unlock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_unlock+0x8>)
 800a92a:	f7ff bf65 	b.w	800a7f8 <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	20000a04 	.word	0x20000a04

0800a934 <_Balloc>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a938:	4604      	mov	r4, r0
 800a93a:	460d      	mov	r5, r1
 800a93c:	b976      	cbnz	r6, 800a95c <_Balloc+0x28>
 800a93e:	2010      	movs	r0, #16
 800a940:	f7fc fb42 	bl	8006fc8 <malloc>
 800a944:	4602      	mov	r2, r0
 800a946:	6260      	str	r0, [r4, #36]	; 0x24
 800a948:	b920      	cbnz	r0, 800a954 <_Balloc+0x20>
 800a94a:	4b18      	ldr	r3, [pc, #96]	; (800a9ac <_Balloc+0x78>)
 800a94c:	4818      	ldr	r0, [pc, #96]	; (800a9b0 <_Balloc+0x7c>)
 800a94e:	2166      	movs	r1, #102	; 0x66
 800a950:	f7fc fae0 	bl	8006f14 <__assert_func>
 800a954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a958:	6006      	str	r6, [r0, #0]
 800a95a:	60c6      	str	r6, [r0, #12]
 800a95c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a95e:	68f3      	ldr	r3, [r6, #12]
 800a960:	b183      	cbz	r3, 800a984 <_Balloc+0x50>
 800a962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a96a:	b9b8      	cbnz	r0, 800a99c <_Balloc+0x68>
 800a96c:	2101      	movs	r1, #1
 800a96e:	fa01 f605 	lsl.w	r6, r1, r5
 800a972:	1d72      	adds	r2, r6, #5
 800a974:	0092      	lsls	r2, r2, #2
 800a976:	4620      	mov	r0, r4
 800a978:	f000 fc97 	bl	800b2aa <_calloc_r>
 800a97c:	b160      	cbz	r0, 800a998 <_Balloc+0x64>
 800a97e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a982:	e00e      	b.n	800a9a2 <_Balloc+0x6e>
 800a984:	2221      	movs	r2, #33	; 0x21
 800a986:	2104      	movs	r1, #4
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fc8e 	bl	800b2aa <_calloc_r>
 800a98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a990:	60f0      	str	r0, [r6, #12]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e4      	bne.n	800a962 <_Balloc+0x2e>
 800a998:	2000      	movs	r0, #0
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	6802      	ldr	r2, [r0, #0]
 800a99e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a8:	e7f7      	b.n	800a99a <_Balloc+0x66>
 800a9aa:	bf00      	nop
 800a9ac:	0800c61e 	.word	0x0800c61e
 800a9b0:	0800c788 	.word	0x0800c788

0800a9b4 <_Bfree>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	b976      	cbnz	r6, 800a9dc <_Bfree+0x28>
 800a9be:	2010      	movs	r0, #16
 800a9c0:	f7fc fb02 	bl	8006fc8 <malloc>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a9c8:	b920      	cbnz	r0, 800a9d4 <_Bfree+0x20>
 800a9ca:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <_Bfree+0x3c>)
 800a9cc:	4809      	ldr	r0, [pc, #36]	; (800a9f4 <_Bfree+0x40>)
 800a9ce:	218a      	movs	r1, #138	; 0x8a
 800a9d0:	f7fc faa0 	bl	8006f14 <__assert_func>
 800a9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d8:	6006      	str	r6, [r0, #0]
 800a9da:	60c6      	str	r6, [r0, #12]
 800a9dc:	b13c      	cbz	r4, 800a9ee <_Bfree+0x3a>
 800a9de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9e0:	6862      	ldr	r2, [r4, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e8:	6021      	str	r1, [r4, #0]
 800a9ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	0800c61e 	.word	0x0800c61e
 800a9f4:	0800c788 	.word	0x0800c788

0800a9f8 <__multadd>:
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	690e      	ldr	r6, [r1, #16]
 800a9fe:	4607      	mov	r7, r0
 800aa00:	4698      	mov	r8, r3
 800aa02:	460c      	mov	r4, r1
 800aa04:	f101 0014 	add.w	r0, r1, #20
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6805      	ldr	r5, [r0, #0]
 800aa0c:	b2a9      	uxth	r1, r5
 800aa0e:	fb02 8101 	mla	r1, r2, r1, r8
 800aa12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aa16:	0c2d      	lsrs	r5, r5, #16
 800aa18:	fb02 c505 	mla	r5, r2, r5, ip
 800aa1c:	b289      	uxth	r1, r1
 800aa1e:	3301      	adds	r3, #1
 800aa20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aa24:	429e      	cmp	r6, r3
 800aa26:	f840 1b04 	str.w	r1, [r0], #4
 800aa2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aa2e:	dcec      	bgt.n	800aa0a <__multadd+0x12>
 800aa30:	f1b8 0f00 	cmp.w	r8, #0
 800aa34:	d022      	beq.n	800aa7c <__multadd+0x84>
 800aa36:	68a3      	ldr	r3, [r4, #8]
 800aa38:	42b3      	cmp	r3, r6
 800aa3a:	dc19      	bgt.n	800aa70 <__multadd+0x78>
 800aa3c:	6861      	ldr	r1, [r4, #4]
 800aa3e:	4638      	mov	r0, r7
 800aa40:	3101      	adds	r1, #1
 800aa42:	f7ff ff77 	bl	800a934 <_Balloc>
 800aa46:	4605      	mov	r5, r0
 800aa48:	b928      	cbnz	r0, 800aa56 <__multadd+0x5e>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <__multadd+0x8c>)
 800aa4e:	480e      	ldr	r0, [pc, #56]	; (800aa88 <__multadd+0x90>)
 800aa50:	21b5      	movs	r1, #181	; 0xb5
 800aa52:	f7fc fa5f 	bl	8006f14 <__assert_func>
 800aa56:	6922      	ldr	r2, [r4, #16]
 800aa58:	3202      	adds	r2, #2
 800aa5a:	f104 010c 	add.w	r1, r4, #12
 800aa5e:	0092      	lsls	r2, r2, #2
 800aa60:	300c      	adds	r0, #12
 800aa62:	f7fc fab9 	bl	8006fd8 <memcpy>
 800aa66:	4621      	mov	r1, r4
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff ffa3 	bl	800a9b4 <_Bfree>
 800aa6e:	462c      	mov	r4, r5
 800aa70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aa74:	3601      	adds	r6, #1
 800aa76:	f8c3 8014 	str.w	r8, [r3, #20]
 800aa7a:	6126      	str	r6, [r4, #16]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa82:	bf00      	nop
 800aa84:	0800c694 	.word	0x0800c694
 800aa88:	0800c788 	.word	0x0800c788

0800aa8c <__s2b>:
 800aa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa90:	460c      	mov	r4, r1
 800aa92:	4615      	mov	r5, r2
 800aa94:	461f      	mov	r7, r3
 800aa96:	2209      	movs	r2, #9
 800aa98:	3308      	adds	r3, #8
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	db09      	blt.n	800aabc <__s2b+0x30>
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff ff43 	bl	800a934 <_Balloc>
 800aaae:	b940      	cbnz	r0, 800aac2 <__s2b+0x36>
 800aab0:	4602      	mov	r2, r0
 800aab2:	4b19      	ldr	r3, [pc, #100]	; (800ab18 <__s2b+0x8c>)
 800aab4:	4819      	ldr	r0, [pc, #100]	; (800ab1c <__s2b+0x90>)
 800aab6:	21ce      	movs	r1, #206	; 0xce
 800aab8:	f7fc fa2c 	bl	8006f14 <__assert_func>
 800aabc:	0052      	lsls	r2, r2, #1
 800aabe:	3101      	adds	r1, #1
 800aac0:	e7f0      	b.n	800aaa4 <__s2b+0x18>
 800aac2:	9b08      	ldr	r3, [sp, #32]
 800aac4:	6143      	str	r3, [r0, #20]
 800aac6:	2d09      	cmp	r5, #9
 800aac8:	f04f 0301 	mov.w	r3, #1
 800aacc:	6103      	str	r3, [r0, #16]
 800aace:	dd16      	ble.n	800aafe <__s2b+0x72>
 800aad0:	f104 0909 	add.w	r9, r4, #9
 800aad4:	46c8      	mov	r8, r9
 800aad6:	442c      	add	r4, r5
 800aad8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aadc:	4601      	mov	r1, r0
 800aade:	3b30      	subs	r3, #48	; 0x30
 800aae0:	220a      	movs	r2, #10
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ff88 	bl	800a9f8 <__multadd>
 800aae8:	45a0      	cmp	r8, r4
 800aaea:	d1f5      	bne.n	800aad8 <__s2b+0x4c>
 800aaec:	f1a5 0408 	sub.w	r4, r5, #8
 800aaf0:	444c      	add	r4, r9
 800aaf2:	1b2d      	subs	r5, r5, r4
 800aaf4:	1963      	adds	r3, r4, r5
 800aaf6:	42bb      	cmp	r3, r7
 800aaf8:	db04      	blt.n	800ab04 <__s2b+0x78>
 800aafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafe:	340a      	adds	r4, #10
 800ab00:	2509      	movs	r5, #9
 800ab02:	e7f6      	b.n	800aaf2 <__s2b+0x66>
 800ab04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab08:	4601      	mov	r1, r0
 800ab0a:	3b30      	subs	r3, #48	; 0x30
 800ab0c:	220a      	movs	r2, #10
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ff72 	bl	800a9f8 <__multadd>
 800ab14:	e7ee      	b.n	800aaf4 <__s2b+0x68>
 800ab16:	bf00      	nop
 800ab18:	0800c694 	.word	0x0800c694
 800ab1c:	0800c788 	.word	0x0800c788

0800ab20 <__hi0bits>:
 800ab20:	0c03      	lsrs	r3, r0, #16
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	b9d3      	cbnz	r3, 800ab5c <__hi0bits+0x3c>
 800ab26:	0400      	lsls	r0, r0, #16
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab2e:	bf04      	itt	eq
 800ab30:	0200      	lsleq	r0, r0, #8
 800ab32:	3308      	addeq	r3, #8
 800ab34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab38:	bf04      	itt	eq
 800ab3a:	0100      	lsleq	r0, r0, #4
 800ab3c:	3304      	addeq	r3, #4
 800ab3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab42:	bf04      	itt	eq
 800ab44:	0080      	lsleq	r0, r0, #2
 800ab46:	3302      	addeq	r3, #2
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	db05      	blt.n	800ab58 <__hi0bits+0x38>
 800ab4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab50:	f103 0301 	add.w	r3, r3, #1
 800ab54:	bf08      	it	eq
 800ab56:	2320      	moveq	r3, #32
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4770      	bx	lr
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e7e4      	b.n	800ab2a <__hi0bits+0xa>

0800ab60 <__lo0bits>:
 800ab60:	6803      	ldr	r3, [r0, #0]
 800ab62:	f013 0207 	ands.w	r2, r3, #7
 800ab66:	4601      	mov	r1, r0
 800ab68:	d00b      	beq.n	800ab82 <__lo0bits+0x22>
 800ab6a:	07da      	lsls	r2, r3, #31
 800ab6c:	d424      	bmi.n	800abb8 <__lo0bits+0x58>
 800ab6e:	0798      	lsls	r0, r3, #30
 800ab70:	bf49      	itett	mi
 800ab72:	085b      	lsrmi	r3, r3, #1
 800ab74:	089b      	lsrpl	r3, r3, #2
 800ab76:	2001      	movmi	r0, #1
 800ab78:	600b      	strmi	r3, [r1, #0]
 800ab7a:	bf5c      	itt	pl
 800ab7c:	600b      	strpl	r3, [r1, #0]
 800ab7e:	2002      	movpl	r0, #2
 800ab80:	4770      	bx	lr
 800ab82:	b298      	uxth	r0, r3
 800ab84:	b9b0      	cbnz	r0, 800abb4 <__lo0bits+0x54>
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	2010      	movs	r0, #16
 800ab8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab8e:	bf04      	itt	eq
 800ab90:	0a1b      	lsreq	r3, r3, #8
 800ab92:	3008      	addeq	r0, #8
 800ab94:	071a      	lsls	r2, r3, #28
 800ab96:	bf04      	itt	eq
 800ab98:	091b      	lsreq	r3, r3, #4
 800ab9a:	3004      	addeq	r0, #4
 800ab9c:	079a      	lsls	r2, r3, #30
 800ab9e:	bf04      	itt	eq
 800aba0:	089b      	lsreq	r3, r3, #2
 800aba2:	3002      	addeq	r0, #2
 800aba4:	07da      	lsls	r2, r3, #31
 800aba6:	d403      	bmi.n	800abb0 <__lo0bits+0x50>
 800aba8:	085b      	lsrs	r3, r3, #1
 800abaa:	f100 0001 	add.w	r0, r0, #1
 800abae:	d005      	beq.n	800abbc <__lo0bits+0x5c>
 800abb0:	600b      	str	r3, [r1, #0]
 800abb2:	4770      	bx	lr
 800abb4:	4610      	mov	r0, r2
 800abb6:	e7e8      	b.n	800ab8a <__lo0bits+0x2a>
 800abb8:	2000      	movs	r0, #0
 800abba:	4770      	bx	lr
 800abbc:	2020      	movs	r0, #32
 800abbe:	4770      	bx	lr

0800abc0 <__i2b>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	460c      	mov	r4, r1
 800abc4:	2101      	movs	r1, #1
 800abc6:	f7ff feb5 	bl	800a934 <_Balloc>
 800abca:	4602      	mov	r2, r0
 800abcc:	b928      	cbnz	r0, 800abda <__i2b+0x1a>
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <__i2b+0x24>)
 800abd0:	4805      	ldr	r0, [pc, #20]	; (800abe8 <__i2b+0x28>)
 800abd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abd6:	f7fc f99d 	bl	8006f14 <__assert_func>
 800abda:	2301      	movs	r3, #1
 800abdc:	6144      	str	r4, [r0, #20]
 800abde:	6103      	str	r3, [r0, #16]
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	0800c694 	.word	0x0800c694
 800abe8:	0800c788 	.word	0x0800c788

0800abec <__multiply>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4614      	mov	r4, r2
 800abf2:	690a      	ldr	r2, [r1, #16]
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	bfb8      	it	lt
 800abfa:	460b      	movlt	r3, r1
 800abfc:	460d      	mov	r5, r1
 800abfe:	bfbc      	itt	lt
 800ac00:	4625      	movlt	r5, r4
 800ac02:	461c      	movlt	r4, r3
 800ac04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ac08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac0c:	68ab      	ldr	r3, [r5, #8]
 800ac0e:	6869      	ldr	r1, [r5, #4]
 800ac10:	eb0a 0709 	add.w	r7, sl, r9
 800ac14:	42bb      	cmp	r3, r7
 800ac16:	b085      	sub	sp, #20
 800ac18:	bfb8      	it	lt
 800ac1a:	3101      	addlt	r1, #1
 800ac1c:	f7ff fe8a 	bl	800a934 <_Balloc>
 800ac20:	b930      	cbnz	r0, 800ac30 <__multiply+0x44>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b42      	ldr	r3, [pc, #264]	; (800ad30 <__multiply+0x144>)
 800ac26:	4843      	ldr	r0, [pc, #268]	; (800ad34 <__multiply+0x148>)
 800ac28:	f240 115d 	movw	r1, #349	; 0x15d
 800ac2c:	f7fc f972 	bl	8006f14 <__assert_func>
 800ac30:	f100 0614 	add.w	r6, r0, #20
 800ac34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ac38:	4633      	mov	r3, r6
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	4543      	cmp	r3, r8
 800ac3e:	d31e      	bcc.n	800ac7e <__multiply+0x92>
 800ac40:	f105 0c14 	add.w	ip, r5, #20
 800ac44:	f104 0314 	add.w	r3, r4, #20
 800ac48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ac4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ac50:	9202      	str	r2, [sp, #8]
 800ac52:	ebac 0205 	sub.w	r2, ip, r5
 800ac56:	3a15      	subs	r2, #21
 800ac58:	f022 0203 	bic.w	r2, r2, #3
 800ac5c:	3204      	adds	r2, #4
 800ac5e:	f105 0115 	add.w	r1, r5, #21
 800ac62:	458c      	cmp	ip, r1
 800ac64:	bf38      	it	cc
 800ac66:	2204      	movcc	r2, #4
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	9a02      	ldr	r2, [sp, #8]
 800ac6c:	9303      	str	r3, [sp, #12]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d808      	bhi.n	800ac84 <__multiply+0x98>
 800ac72:	2f00      	cmp	r7, #0
 800ac74:	dc55      	bgt.n	800ad22 <__multiply+0x136>
 800ac76:	6107      	str	r7, [r0, #16]
 800ac78:	b005      	add	sp, #20
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	f843 2b04 	str.w	r2, [r3], #4
 800ac82:	e7db      	b.n	800ac3c <__multiply+0x50>
 800ac84:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac88:	f1ba 0f00 	cmp.w	sl, #0
 800ac8c:	d020      	beq.n	800acd0 <__multiply+0xe4>
 800ac8e:	f105 0e14 	add.w	lr, r5, #20
 800ac92:	46b1      	mov	r9, r6
 800ac94:	2200      	movs	r2, #0
 800ac96:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ac9a:	f8d9 b000 	ldr.w	fp, [r9]
 800ac9e:	b2a1      	uxth	r1, r4
 800aca0:	fa1f fb8b 	uxth.w	fp, fp
 800aca4:	fb0a b101 	mla	r1, sl, r1, fp
 800aca8:	4411      	add	r1, r2
 800acaa:	f8d9 2000 	ldr.w	r2, [r9]
 800acae:	0c24      	lsrs	r4, r4, #16
 800acb0:	0c12      	lsrs	r2, r2, #16
 800acb2:	fb0a 2404 	mla	r4, sl, r4, r2
 800acb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800acba:	b289      	uxth	r1, r1
 800acbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800acc0:	45f4      	cmp	ip, lr
 800acc2:	f849 1b04 	str.w	r1, [r9], #4
 800acc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800acca:	d8e4      	bhi.n	800ac96 <__multiply+0xaa>
 800accc:	9901      	ldr	r1, [sp, #4]
 800acce:	5072      	str	r2, [r6, r1]
 800acd0:	9a03      	ldr	r2, [sp, #12]
 800acd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800acd6:	3304      	adds	r3, #4
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	d01f      	beq.n	800ad1e <__multiply+0x132>
 800acde:	6834      	ldr	r4, [r6, #0]
 800ace0:	f105 0114 	add.w	r1, r5, #20
 800ace4:	46b6      	mov	lr, r6
 800ace6:	f04f 0a00 	mov.w	sl, #0
 800acea:	880a      	ldrh	r2, [r1, #0]
 800acec:	f8be b002 	ldrh.w	fp, [lr, #2]
 800acf0:	fb09 b202 	mla	r2, r9, r2, fp
 800acf4:	4492      	add	sl, r2
 800acf6:	b2a4      	uxth	r4, r4
 800acf8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800acfc:	f84e 4b04 	str.w	r4, [lr], #4
 800ad00:	f851 4b04 	ldr.w	r4, [r1], #4
 800ad04:	f8be 2000 	ldrh.w	r2, [lr]
 800ad08:	0c24      	lsrs	r4, r4, #16
 800ad0a:	fb09 2404 	mla	r4, r9, r4, r2
 800ad0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ad12:	458c      	cmp	ip, r1
 800ad14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ad18:	d8e7      	bhi.n	800acea <__multiply+0xfe>
 800ad1a:	9a01      	ldr	r2, [sp, #4]
 800ad1c:	50b4      	str	r4, [r6, r2]
 800ad1e:	3604      	adds	r6, #4
 800ad20:	e7a3      	b.n	800ac6a <__multiply+0x7e>
 800ad22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1a5      	bne.n	800ac76 <__multiply+0x8a>
 800ad2a:	3f01      	subs	r7, #1
 800ad2c:	e7a1      	b.n	800ac72 <__multiply+0x86>
 800ad2e:	bf00      	nop
 800ad30:	0800c694 	.word	0x0800c694
 800ad34:	0800c788 	.word	0x0800c788

0800ad38 <__pow5mult>:
 800ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	4615      	mov	r5, r2
 800ad3e:	f012 0203 	ands.w	r2, r2, #3
 800ad42:	4606      	mov	r6, r0
 800ad44:	460f      	mov	r7, r1
 800ad46:	d007      	beq.n	800ad58 <__pow5mult+0x20>
 800ad48:	4c25      	ldr	r4, [pc, #148]	; (800ade0 <__pow5mult+0xa8>)
 800ad4a:	3a01      	subs	r2, #1
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad52:	f7ff fe51 	bl	800a9f8 <__multadd>
 800ad56:	4607      	mov	r7, r0
 800ad58:	10ad      	asrs	r5, r5, #2
 800ad5a:	d03d      	beq.n	800add8 <__pow5mult+0xa0>
 800ad5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad5e:	b97c      	cbnz	r4, 800ad80 <__pow5mult+0x48>
 800ad60:	2010      	movs	r0, #16
 800ad62:	f7fc f931 	bl	8006fc8 <malloc>
 800ad66:	4602      	mov	r2, r0
 800ad68:	6270      	str	r0, [r6, #36]	; 0x24
 800ad6a:	b928      	cbnz	r0, 800ad78 <__pow5mult+0x40>
 800ad6c:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <__pow5mult+0xac>)
 800ad6e:	481e      	ldr	r0, [pc, #120]	; (800ade8 <__pow5mult+0xb0>)
 800ad70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad74:	f7fc f8ce 	bl	8006f14 <__assert_func>
 800ad78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad7c:	6004      	str	r4, [r0, #0]
 800ad7e:	60c4      	str	r4, [r0, #12]
 800ad80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad88:	b94c      	cbnz	r4, 800ad9e <__pow5mult+0x66>
 800ad8a:	f240 2171 	movw	r1, #625	; 0x271
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ff16 	bl	800abc0 <__i2b>
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	f04f 0900 	mov.w	r9, #0
 800ada2:	07eb      	lsls	r3, r5, #31
 800ada4:	d50a      	bpl.n	800adbc <__pow5mult+0x84>
 800ada6:	4639      	mov	r1, r7
 800ada8:	4622      	mov	r2, r4
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ff1e 	bl	800abec <__multiply>
 800adb0:	4639      	mov	r1, r7
 800adb2:	4680      	mov	r8, r0
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff fdfd 	bl	800a9b4 <_Bfree>
 800adba:	4647      	mov	r7, r8
 800adbc:	106d      	asrs	r5, r5, #1
 800adbe:	d00b      	beq.n	800add8 <__pow5mult+0xa0>
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	b938      	cbnz	r0, 800add4 <__pow5mult+0x9c>
 800adc4:	4622      	mov	r2, r4
 800adc6:	4621      	mov	r1, r4
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff ff0f 	bl	800abec <__multiply>
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	f8c0 9000 	str.w	r9, [r0]
 800add4:	4604      	mov	r4, r0
 800add6:	e7e4      	b.n	800ada2 <__pow5mult+0x6a>
 800add8:	4638      	mov	r0, r7
 800adda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adde:	bf00      	nop
 800ade0:	0800c8d8 	.word	0x0800c8d8
 800ade4:	0800c61e 	.word	0x0800c61e
 800ade8:	0800c788 	.word	0x0800c788

0800adec <__lshift>:
 800adec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	460c      	mov	r4, r1
 800adf2:	6849      	ldr	r1, [r1, #4]
 800adf4:	6923      	ldr	r3, [r4, #16]
 800adf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adfa:	68a3      	ldr	r3, [r4, #8]
 800adfc:	4607      	mov	r7, r0
 800adfe:	4691      	mov	r9, r2
 800ae00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae04:	f108 0601 	add.w	r6, r8, #1
 800ae08:	42b3      	cmp	r3, r6
 800ae0a:	db0b      	blt.n	800ae24 <__lshift+0x38>
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7ff fd91 	bl	800a934 <_Balloc>
 800ae12:	4605      	mov	r5, r0
 800ae14:	b948      	cbnz	r0, 800ae2a <__lshift+0x3e>
 800ae16:	4602      	mov	r2, r0
 800ae18:	4b28      	ldr	r3, [pc, #160]	; (800aebc <__lshift+0xd0>)
 800ae1a:	4829      	ldr	r0, [pc, #164]	; (800aec0 <__lshift+0xd4>)
 800ae1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae20:	f7fc f878 	bl	8006f14 <__assert_func>
 800ae24:	3101      	adds	r1, #1
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	e7ee      	b.n	800ae08 <__lshift+0x1c>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f100 0114 	add.w	r1, r0, #20
 800ae30:	f100 0210 	add.w	r2, r0, #16
 800ae34:	4618      	mov	r0, r3
 800ae36:	4553      	cmp	r3, sl
 800ae38:	db33      	blt.n	800aea2 <__lshift+0xb6>
 800ae3a:	6920      	ldr	r0, [r4, #16]
 800ae3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae40:	f104 0314 	add.w	r3, r4, #20
 800ae44:	f019 091f 	ands.w	r9, r9, #31
 800ae48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae50:	d02b      	beq.n	800aeaa <__lshift+0xbe>
 800ae52:	f1c9 0e20 	rsb	lr, r9, #32
 800ae56:	468a      	mov	sl, r1
 800ae58:	2200      	movs	r2, #0
 800ae5a:	6818      	ldr	r0, [r3, #0]
 800ae5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ae60:	4302      	orrs	r2, r0
 800ae62:	f84a 2b04 	str.w	r2, [sl], #4
 800ae66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6a:	459c      	cmp	ip, r3
 800ae6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae70:	d8f3      	bhi.n	800ae5a <__lshift+0x6e>
 800ae72:	ebac 0304 	sub.w	r3, ip, r4
 800ae76:	3b15      	subs	r3, #21
 800ae78:	f023 0303 	bic.w	r3, r3, #3
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	f104 0015 	add.w	r0, r4, #21
 800ae82:	4584      	cmp	ip, r0
 800ae84:	bf38      	it	cc
 800ae86:	2304      	movcc	r3, #4
 800ae88:	50ca      	str	r2, [r1, r3]
 800ae8a:	b10a      	cbz	r2, 800ae90 <__lshift+0xa4>
 800ae8c:	f108 0602 	add.w	r6, r8, #2
 800ae90:	3e01      	subs	r6, #1
 800ae92:	4638      	mov	r0, r7
 800ae94:	612e      	str	r6, [r5, #16]
 800ae96:	4621      	mov	r1, r4
 800ae98:	f7ff fd8c 	bl	800a9b4 <_Bfree>
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aea6:	3301      	adds	r3, #1
 800aea8:	e7c5      	b.n	800ae36 <__lshift+0x4a>
 800aeaa:	3904      	subs	r1, #4
 800aeac:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeb4:	459c      	cmp	ip, r3
 800aeb6:	d8f9      	bhi.n	800aeac <__lshift+0xc0>
 800aeb8:	e7ea      	b.n	800ae90 <__lshift+0xa4>
 800aeba:	bf00      	nop
 800aebc:	0800c694 	.word	0x0800c694
 800aec0:	0800c788 	.word	0x0800c788

0800aec4 <__mcmp>:
 800aec4:	b530      	push	{r4, r5, lr}
 800aec6:	6902      	ldr	r2, [r0, #16]
 800aec8:	690c      	ldr	r4, [r1, #16]
 800aeca:	1b12      	subs	r2, r2, r4
 800aecc:	d10e      	bne.n	800aeec <__mcmp+0x28>
 800aece:	f100 0314 	add.w	r3, r0, #20
 800aed2:	3114      	adds	r1, #20
 800aed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aedc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aee4:	42a5      	cmp	r5, r4
 800aee6:	d003      	beq.n	800aef0 <__mcmp+0x2c>
 800aee8:	d305      	bcc.n	800aef6 <__mcmp+0x32>
 800aeea:	2201      	movs	r2, #1
 800aeec:	4610      	mov	r0, r2
 800aeee:	bd30      	pop	{r4, r5, pc}
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d3f3      	bcc.n	800aedc <__mcmp+0x18>
 800aef4:	e7fa      	b.n	800aeec <__mcmp+0x28>
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aefa:	e7f7      	b.n	800aeec <__mcmp+0x28>

0800aefc <__mdiff>:
 800aefc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	4606      	mov	r6, r0
 800af04:	4611      	mov	r1, r2
 800af06:	4620      	mov	r0, r4
 800af08:	4617      	mov	r7, r2
 800af0a:	f7ff ffdb 	bl	800aec4 <__mcmp>
 800af0e:	1e05      	subs	r5, r0, #0
 800af10:	d110      	bne.n	800af34 <__mdiff+0x38>
 800af12:	4629      	mov	r1, r5
 800af14:	4630      	mov	r0, r6
 800af16:	f7ff fd0d 	bl	800a934 <_Balloc>
 800af1a:	b930      	cbnz	r0, 800af2a <__mdiff+0x2e>
 800af1c:	4b39      	ldr	r3, [pc, #228]	; (800b004 <__mdiff+0x108>)
 800af1e:	4602      	mov	r2, r0
 800af20:	f240 2132 	movw	r1, #562	; 0x232
 800af24:	4838      	ldr	r0, [pc, #224]	; (800b008 <__mdiff+0x10c>)
 800af26:	f7fb fff5 	bl	8006f14 <__assert_func>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	bfa4      	itt	ge
 800af36:	463b      	movge	r3, r7
 800af38:	4627      	movge	r7, r4
 800af3a:	4630      	mov	r0, r6
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	bfa6      	itte	ge
 800af40:	461c      	movge	r4, r3
 800af42:	2500      	movge	r5, #0
 800af44:	2501      	movlt	r5, #1
 800af46:	f7ff fcf5 	bl	800a934 <_Balloc>
 800af4a:	b920      	cbnz	r0, 800af56 <__mdiff+0x5a>
 800af4c:	4b2d      	ldr	r3, [pc, #180]	; (800b004 <__mdiff+0x108>)
 800af4e:	4602      	mov	r2, r0
 800af50:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af54:	e7e6      	b.n	800af24 <__mdiff+0x28>
 800af56:	693e      	ldr	r6, [r7, #16]
 800af58:	60c5      	str	r5, [r0, #12]
 800af5a:	6925      	ldr	r5, [r4, #16]
 800af5c:	f107 0114 	add.w	r1, r7, #20
 800af60:	f104 0914 	add.w	r9, r4, #20
 800af64:	f100 0e14 	add.w	lr, r0, #20
 800af68:	f107 0210 	add.w	r2, r7, #16
 800af6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800af70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800af74:	46f2      	mov	sl, lr
 800af76:	2700      	movs	r7, #0
 800af78:	f859 3b04 	ldr.w	r3, [r9], #4
 800af7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af80:	fa1f f883 	uxth.w	r8, r3
 800af84:	fa17 f78b 	uxtah	r7, r7, fp
 800af88:	0c1b      	lsrs	r3, r3, #16
 800af8a:	eba7 0808 	sub.w	r8, r7, r8
 800af8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af96:	fa1f f888 	uxth.w	r8, r8
 800af9a:	141f      	asrs	r7, r3, #16
 800af9c:	454d      	cmp	r5, r9
 800af9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afa2:	f84a 3b04 	str.w	r3, [sl], #4
 800afa6:	d8e7      	bhi.n	800af78 <__mdiff+0x7c>
 800afa8:	1b2b      	subs	r3, r5, r4
 800afaa:	3b15      	subs	r3, #21
 800afac:	f023 0303 	bic.w	r3, r3, #3
 800afb0:	3304      	adds	r3, #4
 800afb2:	3415      	adds	r4, #21
 800afb4:	42a5      	cmp	r5, r4
 800afb6:	bf38      	it	cc
 800afb8:	2304      	movcc	r3, #4
 800afba:	4419      	add	r1, r3
 800afbc:	4473      	add	r3, lr
 800afbe:	469e      	mov	lr, r3
 800afc0:	460d      	mov	r5, r1
 800afc2:	4565      	cmp	r5, ip
 800afc4:	d30e      	bcc.n	800afe4 <__mdiff+0xe8>
 800afc6:	f10c 0203 	add.w	r2, ip, #3
 800afca:	1a52      	subs	r2, r2, r1
 800afcc:	f022 0203 	bic.w	r2, r2, #3
 800afd0:	3903      	subs	r1, #3
 800afd2:	458c      	cmp	ip, r1
 800afd4:	bf38      	it	cc
 800afd6:	2200      	movcc	r2, #0
 800afd8:	441a      	add	r2, r3
 800afda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800afde:	b17b      	cbz	r3, 800b000 <__mdiff+0x104>
 800afe0:	6106      	str	r6, [r0, #16]
 800afe2:	e7a5      	b.n	800af30 <__mdiff+0x34>
 800afe4:	f855 8b04 	ldr.w	r8, [r5], #4
 800afe8:	fa17 f488 	uxtah	r4, r7, r8
 800afec:	1422      	asrs	r2, r4, #16
 800afee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aff2:	b2a4      	uxth	r4, r4
 800aff4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aff8:	f84e 4b04 	str.w	r4, [lr], #4
 800affc:	1417      	asrs	r7, r2, #16
 800affe:	e7e0      	b.n	800afc2 <__mdiff+0xc6>
 800b000:	3e01      	subs	r6, #1
 800b002:	e7ea      	b.n	800afda <__mdiff+0xde>
 800b004:	0800c694 	.word	0x0800c694
 800b008:	0800c788 	.word	0x0800c788

0800b00c <__ulp>:
 800b00c:	b082      	sub	sp, #8
 800b00e:	ed8d 0b00 	vstr	d0, [sp]
 800b012:	9b01      	ldr	r3, [sp, #4]
 800b014:	4912      	ldr	r1, [pc, #72]	; (800b060 <__ulp+0x54>)
 800b016:	4019      	ands	r1, r3
 800b018:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b01c:	2900      	cmp	r1, #0
 800b01e:	dd05      	ble.n	800b02c <__ulp+0x20>
 800b020:	2200      	movs	r2, #0
 800b022:	460b      	mov	r3, r1
 800b024:	ec43 2b10 	vmov	d0, r2, r3
 800b028:	b002      	add	sp, #8
 800b02a:	4770      	bx	lr
 800b02c:	4249      	negs	r1, r1
 800b02e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b032:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b036:	f04f 0200 	mov.w	r2, #0
 800b03a:	f04f 0300 	mov.w	r3, #0
 800b03e:	da04      	bge.n	800b04a <__ulp+0x3e>
 800b040:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b044:	fa41 f300 	asr.w	r3, r1, r0
 800b048:	e7ec      	b.n	800b024 <__ulp+0x18>
 800b04a:	f1a0 0114 	sub.w	r1, r0, #20
 800b04e:	291e      	cmp	r1, #30
 800b050:	bfda      	itte	le
 800b052:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b056:	fa20 f101 	lsrle.w	r1, r0, r1
 800b05a:	2101      	movgt	r1, #1
 800b05c:	460a      	mov	r2, r1
 800b05e:	e7e1      	b.n	800b024 <__ulp+0x18>
 800b060:	7ff00000 	.word	0x7ff00000

0800b064 <__b2d>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	6905      	ldr	r5, [r0, #16]
 800b068:	f100 0714 	add.w	r7, r0, #20
 800b06c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b070:	1f2e      	subs	r6, r5, #4
 800b072:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff fd52 	bl	800ab20 <__hi0bits>
 800b07c:	f1c0 0320 	rsb	r3, r0, #32
 800b080:	280a      	cmp	r0, #10
 800b082:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b100 <__b2d+0x9c>
 800b086:	600b      	str	r3, [r1, #0]
 800b088:	dc14      	bgt.n	800b0b4 <__b2d+0x50>
 800b08a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b08e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b092:	42b7      	cmp	r7, r6
 800b094:	ea41 030c 	orr.w	r3, r1, ip
 800b098:	bf34      	ite	cc
 800b09a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b09e:	2100      	movcs	r1, #0
 800b0a0:	3015      	adds	r0, #21
 800b0a2:	fa04 f000 	lsl.w	r0, r4, r0
 800b0a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0aa:	ea40 0201 	orr.w	r2, r0, r1
 800b0ae:	ec43 2b10 	vmov	d0, r2, r3
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b4:	42b7      	cmp	r7, r6
 800b0b6:	bf3a      	itte	cc
 800b0b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0c0:	2100      	movcs	r1, #0
 800b0c2:	380b      	subs	r0, #11
 800b0c4:	d017      	beq.n	800b0f6 <__b2d+0x92>
 800b0c6:	f1c0 0c20 	rsb	ip, r0, #32
 800b0ca:	fa04 f500 	lsl.w	r5, r4, r0
 800b0ce:	42be      	cmp	r6, r7
 800b0d0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b0d4:	ea45 0504 	orr.w	r5, r5, r4
 800b0d8:	bf8c      	ite	hi
 800b0da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b0de:	2400      	movls	r4, #0
 800b0e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b0e4:	fa01 f000 	lsl.w	r0, r1, r0
 800b0e8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b0ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0f0:	ea40 0204 	orr.w	r2, r0, r4
 800b0f4:	e7db      	b.n	800b0ae <__b2d+0x4a>
 800b0f6:	ea44 030c 	orr.w	r3, r4, ip
 800b0fa:	460a      	mov	r2, r1
 800b0fc:	e7d7      	b.n	800b0ae <__b2d+0x4a>
 800b0fe:	bf00      	nop
 800b100:	3ff00000 	.word	0x3ff00000

0800b104 <__d2b>:
 800b104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b108:	4689      	mov	r9, r1
 800b10a:	2101      	movs	r1, #1
 800b10c:	ec57 6b10 	vmov	r6, r7, d0
 800b110:	4690      	mov	r8, r2
 800b112:	f7ff fc0f 	bl	800a934 <_Balloc>
 800b116:	4604      	mov	r4, r0
 800b118:	b930      	cbnz	r0, 800b128 <__d2b+0x24>
 800b11a:	4602      	mov	r2, r0
 800b11c:	4b25      	ldr	r3, [pc, #148]	; (800b1b4 <__d2b+0xb0>)
 800b11e:	4826      	ldr	r0, [pc, #152]	; (800b1b8 <__d2b+0xb4>)
 800b120:	f240 310a 	movw	r1, #778	; 0x30a
 800b124:	f7fb fef6 	bl	8006f14 <__assert_func>
 800b128:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b12c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b130:	bb35      	cbnz	r5, 800b180 <__d2b+0x7c>
 800b132:	2e00      	cmp	r6, #0
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	d028      	beq.n	800b18a <__d2b+0x86>
 800b138:	4668      	mov	r0, sp
 800b13a:	9600      	str	r6, [sp, #0]
 800b13c:	f7ff fd10 	bl	800ab60 <__lo0bits>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	b300      	cbz	r0, 800b186 <__d2b+0x82>
 800b144:	9a01      	ldr	r2, [sp, #4]
 800b146:	f1c0 0320 	rsb	r3, r0, #32
 800b14a:	fa02 f303 	lsl.w	r3, r2, r3
 800b14e:	430b      	orrs	r3, r1
 800b150:	40c2      	lsrs	r2, r0
 800b152:	6163      	str	r3, [r4, #20]
 800b154:	9201      	str	r2, [sp, #4]
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	61a3      	str	r3, [r4, #24]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bf14      	ite	ne
 800b15e:	2202      	movne	r2, #2
 800b160:	2201      	moveq	r2, #1
 800b162:	6122      	str	r2, [r4, #16]
 800b164:	b1d5      	cbz	r5, 800b19c <__d2b+0x98>
 800b166:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b16a:	4405      	add	r5, r0
 800b16c:	f8c9 5000 	str.w	r5, [r9]
 800b170:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b174:	f8c8 0000 	str.w	r0, [r8]
 800b178:	4620      	mov	r0, r4
 800b17a:	b003      	add	sp, #12
 800b17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b184:	e7d5      	b.n	800b132 <__d2b+0x2e>
 800b186:	6161      	str	r1, [r4, #20]
 800b188:	e7e5      	b.n	800b156 <__d2b+0x52>
 800b18a:	a801      	add	r0, sp, #4
 800b18c:	f7ff fce8 	bl	800ab60 <__lo0bits>
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	6163      	str	r3, [r4, #20]
 800b194:	2201      	movs	r2, #1
 800b196:	6122      	str	r2, [r4, #16]
 800b198:	3020      	adds	r0, #32
 800b19a:	e7e3      	b.n	800b164 <__d2b+0x60>
 800b19c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1a4:	f8c9 0000 	str.w	r0, [r9]
 800b1a8:	6918      	ldr	r0, [r3, #16]
 800b1aa:	f7ff fcb9 	bl	800ab20 <__hi0bits>
 800b1ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1b2:	e7df      	b.n	800b174 <__d2b+0x70>
 800b1b4:	0800c694 	.word	0x0800c694
 800b1b8:	0800c788 	.word	0x0800c788

0800b1bc <__ratio>:
 800b1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	4688      	mov	r8, r1
 800b1c2:	4669      	mov	r1, sp
 800b1c4:	4681      	mov	r9, r0
 800b1c6:	f7ff ff4d 	bl	800b064 <__b2d>
 800b1ca:	a901      	add	r1, sp, #4
 800b1cc:	4640      	mov	r0, r8
 800b1ce:	ec55 4b10 	vmov	r4, r5, d0
 800b1d2:	f7ff ff47 	bl	800b064 <__b2d>
 800b1d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b1de:	eba3 0c02 	sub.w	ip, r3, r2
 800b1e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b1ec:	ec51 0b10 	vmov	r0, r1, d0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfd6      	itet	le
 800b1f4:	460a      	movle	r2, r1
 800b1f6:	462a      	movgt	r2, r5
 800b1f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	462f      	mov	r7, r5
 800b200:	bfd4      	ite	le
 800b202:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b206:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b20a:	4620      	mov	r0, r4
 800b20c:	ee10 2a10 	vmov	r2, s0
 800b210:	465b      	mov	r3, fp
 800b212:	4639      	mov	r1, r7
 800b214:	f7f5 fb1a 	bl	800084c <__aeabi_ddiv>
 800b218:	ec41 0b10 	vmov	d0, r0, r1
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b222 <__copybits>:
 800b222:	3901      	subs	r1, #1
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	1149      	asrs	r1, r1, #5
 800b228:	6914      	ldr	r4, [r2, #16]
 800b22a:	3101      	adds	r1, #1
 800b22c:	f102 0314 	add.w	r3, r2, #20
 800b230:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b234:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b238:	1f05      	subs	r5, r0, #4
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	d30c      	bcc.n	800b258 <__copybits+0x36>
 800b23e:	1aa3      	subs	r3, r4, r2
 800b240:	3b11      	subs	r3, #17
 800b242:	f023 0303 	bic.w	r3, r3, #3
 800b246:	3211      	adds	r2, #17
 800b248:	42a2      	cmp	r2, r4
 800b24a:	bf88      	it	hi
 800b24c:	2300      	movhi	r3, #0
 800b24e:	4418      	add	r0, r3
 800b250:	2300      	movs	r3, #0
 800b252:	4288      	cmp	r0, r1
 800b254:	d305      	bcc.n	800b262 <__copybits+0x40>
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	f853 6b04 	ldr.w	r6, [r3], #4
 800b25c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b260:	e7eb      	b.n	800b23a <__copybits+0x18>
 800b262:	f840 3b04 	str.w	r3, [r0], #4
 800b266:	e7f4      	b.n	800b252 <__copybits+0x30>

0800b268 <__any_on>:
 800b268:	f100 0214 	add.w	r2, r0, #20
 800b26c:	6900      	ldr	r0, [r0, #16]
 800b26e:	114b      	asrs	r3, r1, #5
 800b270:	4298      	cmp	r0, r3
 800b272:	b510      	push	{r4, lr}
 800b274:	db11      	blt.n	800b29a <__any_on+0x32>
 800b276:	dd0a      	ble.n	800b28e <__any_on+0x26>
 800b278:	f011 011f 	ands.w	r1, r1, #31
 800b27c:	d007      	beq.n	800b28e <__any_on+0x26>
 800b27e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b282:	fa24 f001 	lsr.w	r0, r4, r1
 800b286:	fa00 f101 	lsl.w	r1, r0, r1
 800b28a:	428c      	cmp	r4, r1
 800b28c:	d10b      	bne.n	800b2a6 <__any_on+0x3e>
 800b28e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b292:	4293      	cmp	r3, r2
 800b294:	d803      	bhi.n	800b29e <__any_on+0x36>
 800b296:	2000      	movs	r0, #0
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	4603      	mov	r3, r0
 800b29c:	e7f7      	b.n	800b28e <__any_on+0x26>
 800b29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	d0f5      	beq.n	800b292 <__any_on+0x2a>
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	e7f6      	b.n	800b298 <__any_on+0x30>

0800b2aa <_calloc_r>:
 800b2aa:	b513      	push	{r0, r1, r4, lr}
 800b2ac:	434a      	muls	r2, r1
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	9201      	str	r2, [sp, #4]
 800b2b2:	f7fb fef7 	bl	80070a4 <_malloc_r>
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	b118      	cbz	r0, 800b2c2 <_calloc_r+0x18>
 800b2ba:	9a01      	ldr	r2, [sp, #4]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	f7fb fe99 	bl	8006ff4 <memset>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	b002      	add	sp, #8
 800b2c6:	bd10      	pop	{r4, pc}

0800b2c8 <_realloc_r>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	b921      	cbnz	r1, 800b2dc <_realloc_r+0x14>
 800b2d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	f7fb bee4 	b.w	80070a4 <_malloc_r>
 800b2dc:	b922      	cbnz	r2, 800b2e8 <_realloc_r+0x20>
 800b2de:	f7fb fe91 	bl	8007004 <_free_r>
 800b2e2:	4625      	mov	r5, r4
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e8:	f000 fa64 	bl	800b7b4 <_malloc_usable_size_r>
 800b2ec:	42a0      	cmp	r0, r4
 800b2ee:	d20f      	bcs.n	800b310 <_realloc_r+0x48>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7fb fed6 	bl	80070a4 <_malloc_r>
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d0f2      	beq.n	800b2e4 <_realloc_r+0x1c>
 800b2fe:	4631      	mov	r1, r6
 800b300:	4622      	mov	r2, r4
 800b302:	f7fb fe69 	bl	8006fd8 <memcpy>
 800b306:	4631      	mov	r1, r6
 800b308:	4638      	mov	r0, r7
 800b30a:	f7fb fe7b 	bl	8007004 <_free_r>
 800b30e:	e7e9      	b.n	800b2e4 <_realloc_r+0x1c>
 800b310:	4635      	mov	r5, r6
 800b312:	e7e7      	b.n	800b2e4 <_realloc_r+0x1c>

0800b314 <__ssputs_r>:
 800b314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b318:	688e      	ldr	r6, [r1, #8]
 800b31a:	429e      	cmp	r6, r3
 800b31c:	4682      	mov	sl, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	4690      	mov	r8, r2
 800b322:	461f      	mov	r7, r3
 800b324:	d838      	bhi.n	800b398 <__ssputs_r+0x84>
 800b326:	898a      	ldrh	r2, [r1, #12]
 800b328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b32c:	d032      	beq.n	800b394 <__ssputs_r+0x80>
 800b32e:	6825      	ldr	r5, [r4, #0]
 800b330:	6909      	ldr	r1, [r1, #16]
 800b332:	eba5 0901 	sub.w	r9, r5, r1
 800b336:	6965      	ldr	r5, [r4, #20]
 800b338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b33c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b340:	3301      	adds	r3, #1
 800b342:	444b      	add	r3, r9
 800b344:	106d      	asrs	r5, r5, #1
 800b346:	429d      	cmp	r5, r3
 800b348:	bf38      	it	cc
 800b34a:	461d      	movcc	r5, r3
 800b34c:	0553      	lsls	r3, r2, #21
 800b34e:	d531      	bpl.n	800b3b4 <__ssputs_r+0xa0>
 800b350:	4629      	mov	r1, r5
 800b352:	f7fb fea7 	bl	80070a4 <_malloc_r>
 800b356:	4606      	mov	r6, r0
 800b358:	b950      	cbnz	r0, 800b370 <__ssputs_r+0x5c>
 800b35a:	230c      	movs	r3, #12
 800b35c:	f8ca 3000 	str.w	r3, [sl]
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b370:	6921      	ldr	r1, [r4, #16]
 800b372:	464a      	mov	r2, r9
 800b374:	f7fb fe30 	bl	8006fd8 <memcpy>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b37e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	6126      	str	r6, [r4, #16]
 800b386:	6165      	str	r5, [r4, #20]
 800b388:	444e      	add	r6, r9
 800b38a:	eba5 0509 	sub.w	r5, r5, r9
 800b38e:	6026      	str	r6, [r4, #0]
 800b390:	60a5      	str	r5, [r4, #8]
 800b392:	463e      	mov	r6, r7
 800b394:	42be      	cmp	r6, r7
 800b396:	d900      	bls.n	800b39a <__ssputs_r+0x86>
 800b398:	463e      	mov	r6, r7
 800b39a:	4632      	mov	r2, r6
 800b39c:	6820      	ldr	r0, [r4, #0]
 800b39e:	4641      	mov	r1, r8
 800b3a0:	f7ff faa2 	bl	800a8e8 <memmove>
 800b3a4:	68a3      	ldr	r3, [r4, #8]
 800b3a6:	6822      	ldr	r2, [r4, #0]
 800b3a8:	1b9b      	subs	r3, r3, r6
 800b3aa:	4432      	add	r2, r6
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	6022      	str	r2, [r4, #0]
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	e7db      	b.n	800b36c <__ssputs_r+0x58>
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	f7ff ff87 	bl	800b2c8 <_realloc_r>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d1e1      	bne.n	800b384 <__ssputs_r+0x70>
 800b3c0:	6921      	ldr	r1, [r4, #16]
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	f7fb fe1e 	bl	8007004 <_free_r>
 800b3c8:	e7c7      	b.n	800b35a <__ssputs_r+0x46>
	...

0800b3cc <_svfiprintf_r>:
 800b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d0:	4698      	mov	r8, r3
 800b3d2:	898b      	ldrh	r3, [r1, #12]
 800b3d4:	061b      	lsls	r3, r3, #24
 800b3d6:	b09d      	sub	sp, #116	; 0x74
 800b3d8:	4607      	mov	r7, r0
 800b3da:	460d      	mov	r5, r1
 800b3dc:	4614      	mov	r4, r2
 800b3de:	d50e      	bpl.n	800b3fe <_svfiprintf_r+0x32>
 800b3e0:	690b      	ldr	r3, [r1, #16]
 800b3e2:	b963      	cbnz	r3, 800b3fe <_svfiprintf_r+0x32>
 800b3e4:	2140      	movs	r1, #64	; 0x40
 800b3e6:	f7fb fe5d 	bl	80070a4 <_malloc_r>
 800b3ea:	6028      	str	r0, [r5, #0]
 800b3ec:	6128      	str	r0, [r5, #16]
 800b3ee:	b920      	cbnz	r0, 800b3fa <_svfiprintf_r+0x2e>
 800b3f0:	230c      	movs	r3, #12
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3f8:	e0d1      	b.n	800b59e <_svfiprintf_r+0x1d2>
 800b3fa:	2340      	movs	r3, #64	; 0x40
 800b3fc:	616b      	str	r3, [r5, #20]
 800b3fe:	2300      	movs	r3, #0
 800b400:	9309      	str	r3, [sp, #36]	; 0x24
 800b402:	2320      	movs	r3, #32
 800b404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b408:	f8cd 800c 	str.w	r8, [sp, #12]
 800b40c:	2330      	movs	r3, #48	; 0x30
 800b40e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5b8 <_svfiprintf_r+0x1ec>
 800b412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b416:	f04f 0901 	mov.w	r9, #1
 800b41a:	4623      	mov	r3, r4
 800b41c:	469a      	mov	sl, r3
 800b41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b422:	b10a      	cbz	r2, 800b428 <_svfiprintf_r+0x5c>
 800b424:	2a25      	cmp	r2, #37	; 0x25
 800b426:	d1f9      	bne.n	800b41c <_svfiprintf_r+0x50>
 800b428:	ebba 0b04 	subs.w	fp, sl, r4
 800b42c:	d00b      	beq.n	800b446 <_svfiprintf_r+0x7a>
 800b42e:	465b      	mov	r3, fp
 800b430:	4622      	mov	r2, r4
 800b432:	4629      	mov	r1, r5
 800b434:	4638      	mov	r0, r7
 800b436:	f7ff ff6d 	bl	800b314 <__ssputs_r>
 800b43a:	3001      	adds	r0, #1
 800b43c:	f000 80aa 	beq.w	800b594 <_svfiprintf_r+0x1c8>
 800b440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b442:	445a      	add	r2, fp
 800b444:	9209      	str	r2, [sp, #36]	; 0x24
 800b446:	f89a 3000 	ldrb.w	r3, [sl]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 80a2 	beq.w	800b594 <_svfiprintf_r+0x1c8>
 800b450:	2300      	movs	r3, #0
 800b452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b45a:	f10a 0a01 	add.w	sl, sl, #1
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b466:	931a      	str	r3, [sp, #104]	; 0x68
 800b468:	4654      	mov	r4, sl
 800b46a:	2205      	movs	r2, #5
 800b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b470:	4851      	ldr	r0, [pc, #324]	; (800b5b8 <_svfiprintf_r+0x1ec>)
 800b472:	f7f4 feb5 	bl	80001e0 <memchr>
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	b9d8      	cbnz	r0, 800b4b2 <_svfiprintf_r+0xe6>
 800b47a:	06d0      	lsls	r0, r2, #27
 800b47c:	bf44      	itt	mi
 800b47e:	2320      	movmi	r3, #32
 800b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b484:	0711      	lsls	r1, r2, #28
 800b486:	bf44      	itt	mi
 800b488:	232b      	movmi	r3, #43	; 0x2b
 800b48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b48e:	f89a 3000 	ldrb.w	r3, [sl]
 800b492:	2b2a      	cmp	r3, #42	; 0x2a
 800b494:	d015      	beq.n	800b4c2 <_svfiprintf_r+0xf6>
 800b496:	9a07      	ldr	r2, [sp, #28]
 800b498:	4654      	mov	r4, sl
 800b49a:	2000      	movs	r0, #0
 800b49c:	f04f 0c0a 	mov.w	ip, #10
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a6:	3b30      	subs	r3, #48	; 0x30
 800b4a8:	2b09      	cmp	r3, #9
 800b4aa:	d94e      	bls.n	800b54a <_svfiprintf_r+0x17e>
 800b4ac:	b1b0      	cbz	r0, 800b4dc <_svfiprintf_r+0x110>
 800b4ae:	9207      	str	r2, [sp, #28]
 800b4b0:	e014      	b.n	800b4dc <_svfiprintf_r+0x110>
 800b4b2:	eba0 0308 	sub.w	r3, r0, r8
 800b4b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	46a2      	mov	sl, r4
 800b4c0:	e7d2      	b.n	800b468 <_svfiprintf_r+0x9c>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	1d19      	adds	r1, r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	9103      	str	r1, [sp, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bfbb      	ittet	lt
 800b4ce:	425b      	neglt	r3, r3
 800b4d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4d4:	9307      	strge	r3, [sp, #28]
 800b4d6:	9307      	strlt	r3, [sp, #28]
 800b4d8:	bfb8      	it	lt
 800b4da:	9204      	strlt	r2, [sp, #16]
 800b4dc:	7823      	ldrb	r3, [r4, #0]
 800b4de:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e0:	d10c      	bne.n	800b4fc <_svfiprintf_r+0x130>
 800b4e2:	7863      	ldrb	r3, [r4, #1]
 800b4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e6:	d135      	bne.n	800b554 <_svfiprintf_r+0x188>
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	9203      	str	r2, [sp, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	bfb8      	it	lt
 800b4f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b4f8:	3402      	adds	r4, #2
 800b4fa:	9305      	str	r3, [sp, #20]
 800b4fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5c8 <_svfiprintf_r+0x1fc>
 800b500:	7821      	ldrb	r1, [r4, #0]
 800b502:	2203      	movs	r2, #3
 800b504:	4650      	mov	r0, sl
 800b506:	f7f4 fe6b 	bl	80001e0 <memchr>
 800b50a:	b140      	cbz	r0, 800b51e <_svfiprintf_r+0x152>
 800b50c:	2340      	movs	r3, #64	; 0x40
 800b50e:	eba0 000a 	sub.w	r0, r0, sl
 800b512:	fa03 f000 	lsl.w	r0, r3, r0
 800b516:	9b04      	ldr	r3, [sp, #16]
 800b518:	4303      	orrs	r3, r0
 800b51a:	3401      	adds	r4, #1
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b522:	4826      	ldr	r0, [pc, #152]	; (800b5bc <_svfiprintf_r+0x1f0>)
 800b524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b528:	2206      	movs	r2, #6
 800b52a:	f7f4 fe59 	bl	80001e0 <memchr>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d038      	beq.n	800b5a4 <_svfiprintf_r+0x1d8>
 800b532:	4b23      	ldr	r3, [pc, #140]	; (800b5c0 <_svfiprintf_r+0x1f4>)
 800b534:	bb1b      	cbnz	r3, 800b57e <_svfiprintf_r+0x1b2>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	3307      	adds	r3, #7
 800b53a:	f023 0307 	bic.w	r3, r3, #7
 800b53e:	3308      	adds	r3, #8
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	4433      	add	r3, r6
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	e767      	b.n	800b41a <_svfiprintf_r+0x4e>
 800b54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b54e:	460c      	mov	r4, r1
 800b550:	2001      	movs	r0, #1
 800b552:	e7a5      	b.n	800b4a0 <_svfiprintf_r+0xd4>
 800b554:	2300      	movs	r3, #0
 800b556:	3401      	adds	r4, #1
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	4619      	mov	r1, r3
 800b55c:	f04f 0c0a 	mov.w	ip, #10
 800b560:	4620      	mov	r0, r4
 800b562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b566:	3a30      	subs	r2, #48	; 0x30
 800b568:	2a09      	cmp	r2, #9
 800b56a:	d903      	bls.n	800b574 <_svfiprintf_r+0x1a8>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0c5      	beq.n	800b4fc <_svfiprintf_r+0x130>
 800b570:	9105      	str	r1, [sp, #20]
 800b572:	e7c3      	b.n	800b4fc <_svfiprintf_r+0x130>
 800b574:	fb0c 2101 	mla	r1, ip, r1, r2
 800b578:	4604      	mov	r4, r0
 800b57a:	2301      	movs	r3, #1
 800b57c:	e7f0      	b.n	800b560 <_svfiprintf_r+0x194>
 800b57e:	ab03      	add	r3, sp, #12
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	462a      	mov	r2, r5
 800b584:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <_svfiprintf_r+0x1f8>)
 800b586:	a904      	add	r1, sp, #16
 800b588:	4638      	mov	r0, r7
 800b58a:	f7fb ffdf 	bl	800754c <_printf_float>
 800b58e:	1c42      	adds	r2, r0, #1
 800b590:	4606      	mov	r6, r0
 800b592:	d1d6      	bne.n	800b542 <_svfiprintf_r+0x176>
 800b594:	89ab      	ldrh	r3, [r5, #12]
 800b596:	065b      	lsls	r3, r3, #25
 800b598:	f53f af2c 	bmi.w	800b3f4 <_svfiprintf_r+0x28>
 800b59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b59e:	b01d      	add	sp, #116	; 0x74
 800b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	ab03      	add	r3, sp, #12
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <_svfiprintf_r+0x1f8>)
 800b5ac:	a904      	add	r1, sp, #16
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f7fc fa70 	bl	8007a94 <_printf_i>
 800b5b4:	e7eb      	b.n	800b58e <_svfiprintf_r+0x1c2>
 800b5b6:	bf00      	nop
 800b5b8:	0800c470 	.word	0x0800c470
 800b5bc:	0800c47a 	.word	0x0800c47a
 800b5c0:	0800754d 	.word	0x0800754d
 800b5c4:	0800b315 	.word	0x0800b315
 800b5c8:	0800c476 	.word	0x0800c476
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <nan>:
 800b5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5d8 <nan+0x8>
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	7ff80000 	.word	0x7ff80000

0800b5e0 <_raise_r>:
 800b5e0:	291f      	cmp	r1, #31
 800b5e2:	b538      	push	{r3, r4, r5, lr}
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	d904      	bls.n	800b5f4 <_raise_r+0x14>
 800b5ea:	2316      	movs	r3, #22
 800b5ec:	6003      	str	r3, [r0, #0]
 800b5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5f2:	bd38      	pop	{r3, r4, r5, pc}
 800b5f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5f6:	b112      	cbz	r2, 800b5fe <_raise_r+0x1e>
 800b5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5fc:	b94b      	cbnz	r3, 800b612 <_raise_r+0x32>
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 f830 	bl	800b664 <_getpid_r>
 800b604:	462a      	mov	r2, r5
 800b606:	4601      	mov	r1, r0
 800b608:	4620      	mov	r0, r4
 800b60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b60e:	f000 b817 	b.w	800b640 <_kill_r>
 800b612:	2b01      	cmp	r3, #1
 800b614:	d00a      	beq.n	800b62c <_raise_r+0x4c>
 800b616:	1c59      	adds	r1, r3, #1
 800b618:	d103      	bne.n	800b622 <_raise_r+0x42>
 800b61a:	2316      	movs	r3, #22
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	2001      	movs	r0, #1
 800b620:	e7e7      	b.n	800b5f2 <_raise_r+0x12>
 800b622:	2400      	movs	r4, #0
 800b624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b628:	4628      	mov	r0, r5
 800b62a:	4798      	blx	r3
 800b62c:	2000      	movs	r0, #0
 800b62e:	e7e0      	b.n	800b5f2 <_raise_r+0x12>

0800b630 <raise>:
 800b630:	4b02      	ldr	r3, [pc, #8]	; (800b63c <raise+0xc>)
 800b632:	4601      	mov	r1, r0
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f7ff bfd3 	b.w	800b5e0 <_raise_r>
 800b63a:	bf00      	nop
 800b63c:	20000014 	.word	0x20000014

0800b640 <_kill_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d07      	ldr	r5, [pc, #28]	; (800b660 <_kill_r+0x20>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	4611      	mov	r1, r2
 800b64c:	602b      	str	r3, [r5, #0]
 800b64e:	f7f6 f8dd 	bl	800180c <_kill>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d102      	bne.n	800b65c <_kill_r+0x1c>
 800b656:	682b      	ldr	r3, [r5, #0]
 800b658:	b103      	cbz	r3, 800b65c <_kill_r+0x1c>
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	bd38      	pop	{r3, r4, r5, pc}
 800b65e:	bf00      	nop
 800b660:	20000a0c 	.word	0x20000a0c

0800b664 <_getpid_r>:
 800b664:	f7f6 b8ca 	b.w	80017fc <_getpid>

0800b668 <__sread>:
 800b668:	b510      	push	{r4, lr}
 800b66a:	460c      	mov	r4, r1
 800b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b670:	f000 f8a8 	bl	800b7c4 <_read_r>
 800b674:	2800      	cmp	r0, #0
 800b676:	bfab      	itete	ge
 800b678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b67a:	89a3      	ldrhlt	r3, [r4, #12]
 800b67c:	181b      	addge	r3, r3, r0
 800b67e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b682:	bfac      	ite	ge
 800b684:	6563      	strge	r3, [r4, #84]	; 0x54
 800b686:	81a3      	strhlt	r3, [r4, #12]
 800b688:	bd10      	pop	{r4, pc}

0800b68a <__swrite>:
 800b68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	461f      	mov	r7, r3
 800b690:	898b      	ldrh	r3, [r1, #12]
 800b692:	05db      	lsls	r3, r3, #23
 800b694:	4605      	mov	r5, r0
 800b696:	460c      	mov	r4, r1
 800b698:	4616      	mov	r6, r2
 800b69a:	d505      	bpl.n	800b6a8 <__swrite+0x1e>
 800b69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f000 f874 	bl	800b790 <_lseek_r>
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6b2:	81a3      	strh	r3, [r4, #12]
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	f000 b823 	b.w	800b708 <_write_r>

0800b6c2 <__sseek>:
 800b6c2:	b510      	push	{r4, lr}
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ca:	f000 f861 	bl	800b790 <_lseek_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	bf15      	itete	ne
 800b6d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6de:	81a3      	strheq	r3, [r4, #12]
 800b6e0:	bf18      	it	ne
 800b6e2:	81a3      	strhne	r3, [r4, #12]
 800b6e4:	bd10      	pop	{r4, pc}

0800b6e6 <__sclose>:
 800b6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ea:	f000 b81f 	b.w	800b72c <_close_r>

0800b6ee <__ascii_wctomb>:
 800b6ee:	b149      	cbz	r1, 800b704 <__ascii_wctomb+0x16>
 800b6f0:	2aff      	cmp	r2, #255	; 0xff
 800b6f2:	bf85      	ittet	hi
 800b6f4:	238a      	movhi	r3, #138	; 0x8a
 800b6f6:	6003      	strhi	r3, [r0, #0]
 800b6f8:	700a      	strbls	r2, [r1, #0]
 800b6fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b6fe:	bf98      	it	ls
 800b700:	2001      	movls	r0, #1
 800b702:	4770      	bx	lr
 800b704:	4608      	mov	r0, r1
 800b706:	4770      	bx	lr

0800b708 <_write_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	; (800b728 <_write_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f6 f8af 	bl	800187a <_write>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_write_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_write_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000a0c 	.word	0x20000a0c

0800b72c <_close_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d06      	ldr	r5, [pc, #24]	; (800b748 <_close_r+0x1c>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	f7f6 f8bb 	bl	80018b2 <_close>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_close_r+0x1a>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_close_r+0x1a>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20000a0c 	.word	0x20000a0c

0800b74c <_fstat_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	; (800b76c <_fstat_r+0x20>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	4611      	mov	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7f6 f8b6 	bl	80018ca <_fstat>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d102      	bne.n	800b768 <_fstat_r+0x1c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	b103      	cbz	r3, 800b768 <_fstat_r+0x1c>
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	20000a0c 	.word	0x20000a0c

0800b770 <_isatty_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d06      	ldr	r5, [pc, #24]	; (800b78c <_isatty_r+0x1c>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7f6 f8b5 	bl	80018ea <_isatty>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_isatty_r+0x1a>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_isatty_r+0x1a>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	20000a0c 	.word	0x20000a0c

0800b790 <_lseek_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d07      	ldr	r5, [pc, #28]	; (800b7b0 <_lseek_r+0x20>)
 800b794:	4604      	mov	r4, r0
 800b796:	4608      	mov	r0, r1
 800b798:	4611      	mov	r1, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	602a      	str	r2, [r5, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f7f6 f8ae 	bl	8001900 <_lseek>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_lseek_r+0x1e>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_lseek_r+0x1e>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000a0c 	.word	0x20000a0c

0800b7b4 <_malloc_usable_size_r>:
 800b7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b8:	1f18      	subs	r0, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	bfbc      	itt	lt
 800b7be:	580b      	ldrlt	r3, [r1, r0]
 800b7c0:	18c0      	addlt	r0, r0, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_read_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d07      	ldr	r5, [pc, #28]	; (800b7e4 <_read_r+0x20>)
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f7f6 f834 	bl	8001840 <_read>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_read_r+0x1e>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_read_r+0x1e>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	20000a0c 	.word	0x20000a0c

0800b7e8 <_init>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	bf00      	nop
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr

0800b7f4 <_fini>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr
